
Digital_Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d98  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800a038  0800a038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a0f8  0800a0f8  0000b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a100  0800a100  0000b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a104  0800a104  0000b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800a108  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f8  2400006c  0800a174  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000364  0800a174  0000c364  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013a88  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cba  00000000  00000000  0001fb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  000227e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b81  00000000  00000000  00023708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384a7  00000000  00000000  00024289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000179c3  00000000  00000000  0005c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a623  00000000  00000000  000740f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ce716  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000453c  00000000  00000000  001ce75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001d2c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a020 	.word	0x0800a020

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800a020 	.word	0x0800a020

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <lcdIli9341_setArea>:
#endif
static void lcdIli9341_readData();

/*** External Function Defines ***/
void lcdIli9341_setArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4604      	mov	r4, r0
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4623      	mov	r3, r4
 8000390:	80fb      	strh	r3, [r7, #6]
 8000392:	4603      	mov	r3, r0
 8000394:	80bb      	strh	r3, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	807b      	strh	r3, [r7, #2]
 800039a:	4613      	mov	r3, r2
 800039c:	803b      	strh	r3, [r7, #0]
  lcdIli9341_writeCmd(0x2a);
 800039e:	202a      	movs	r0, #42	@ 0x2a
 80003a0:	f000 f941 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(xStart >> 8);
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	0a1b      	lsrs	r3, r3, #8
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f94a 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(xStart & 0xff);
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f944 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd >> 8);
 80003bc:	887b      	ldrh	r3, [r7, #2]
 80003be:	0a1b      	lsrs	r3, r3, #8
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f93e 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd & 0xff);
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f938 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b);
 80003d4:	202b      	movs	r0, #43	@ 0x2b
 80003d6:	f000 f926 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(yStart >> 8);
 80003da:	88bb      	ldrh	r3, [r7, #4]
 80003dc:	0a1b      	lsrs	r3, r3, #8
 80003de:	b29b      	uxth	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f92f 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(yStart & 0xff);
 80003e6:	88bb      	ldrh	r3, [r7, #4]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f929 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd >> 8);
 80003f2:	883b      	ldrh	r3, [r7, #0]
 80003f4:	0a1b      	lsrs	r3, r3, #8
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f923 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd & 0xff);
 80003fe:	883b      	ldrh	r3, [r7, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	b29b      	uxth	r3, r3
 8000404:	4618      	mov	r0, r3
 8000406:	f000 f91d 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2c);
 800040a:	202c      	movs	r0, #44	@ 0x2c
 800040c:	f000 f90b 	bl	8000626 <lcdIli9341_writeCmd>
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}

08000418 <lcdIli9341_drawRect>:
  // the first read is invalid
  lcdIli9341_readData();
}

void lcdIli9341_drawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	4604      	mov	r4, r0
 8000420:	4608      	mov	r0, r1
 8000422:	4611      	mov	r1, r2
 8000424:	461a      	mov	r2, r3
 8000426:	4623      	mov	r3, r4
 8000428:	80fb      	strh	r3, [r7, #6]
 800042a:	4603      	mov	r3, r0
 800042c:	80bb      	strh	r3, [r7, #4]
 800042e:	460b      	mov	r3, r1
 8000430:	807b      	strh	r3, [r7, #2]
 8000432:	4613      	mov	r3, r2
 8000434:	803b      	strh	r3, [r7, #0]
  lcdIli9341_setArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 8000436:	88fa      	ldrh	r2, [r7, #6]
 8000438:	887b      	ldrh	r3, [r7, #2]
 800043a:	4413      	add	r3, r2
 800043c:	b29b      	uxth	r3, r3
 800043e:	3b01      	subs	r3, #1
 8000440:	b29c      	uxth	r4, r3
 8000442:	88ba      	ldrh	r2, [r7, #4]
 8000444:	883b      	ldrh	r3, [r7, #0]
 8000446:	4413      	add	r3, r2
 8000448:	b29b      	uxth	r3, r3
 800044a:	3b01      	subs	r3, #1
 800044c:	b29b      	uxth	r3, r3
 800044e:	88b9      	ldrh	r1, [r7, #4]
 8000450:	88f8      	ldrh	r0, [r7, #6]
 8000452:	4622      	mov	r2, r4
 8000454:	f7ff ff94 	bl	8000380 <lcdIli9341_setArea>
  for( uint16_t y = 0; y < height; y++ ){
 8000458:	2300      	movs	r3, #0
 800045a:	81fb      	strh	r3, [r7, #14]
 800045c:	e00f      	b.n	800047e <lcdIli9341_drawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 800045e:	2300      	movs	r3, #0
 8000460:	81bb      	strh	r3, [r7, #12]
 8000462:	e005      	b.n	8000470 <lcdIli9341_drawRect+0x58>
//      lcdIli9341_writeData(color >> 8);
//      lcdIli9341_writeData(color);
      LCD_DATA = color;
 8000464:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <lcdIli9341_drawRect+0x78>)
 8000466:	8c3b      	ldrh	r3, [r7, #32]
 8000468:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 800046a:	89bb      	ldrh	r3, [r7, #12]
 800046c:	3301      	adds	r3, #1
 800046e:	81bb      	strh	r3, [r7, #12]
 8000470:	89ba      	ldrh	r2, [r7, #12]
 8000472:	887b      	ldrh	r3, [r7, #2]
 8000474:	429a      	cmp	r2, r3
 8000476:	d3f5      	bcc.n	8000464 <lcdIli9341_drawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 8000478:	89fb      	ldrh	r3, [r7, #14]
 800047a:	3301      	adds	r3, #1
 800047c:	81fb      	strh	r3, [r7, #14]
 800047e:	89fa      	ldrh	r2, [r7, #14]
 8000480:	883b      	ldrh	r3, [r7, #0]
 8000482:	429a      	cmp	r2, r3
 8000484:	d3eb      	bcc.n	800045e <lcdIli9341_drawRect+0x46>
    }
  }
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	60080000 	.word	0x60080000

08000494 <lcdIli9341_getDrawAddress>:

inline uint16_t* lcdIli9341_getDrawAddress()
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  return (uint16_t*)LCD_DATA_ADDR;
 8000498:	4b02      	ldr	r3, [pc, #8]	@ (80004a4 <lcdIli9341_getDrawAddress+0x10>)
}
 800049a:	4618      	mov	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	60080000 	.word	0x60080000

080004a8 <lcdIli9341_init>:

RET lcdIli9341_init()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_ResetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);

  lcdIli9341_writeCmd(0x01); //software reset
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 f8b9 	bl	8000626 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 80004b4:	2032      	movs	r0, #50	@ 0x32
 80004b6:	f001 f8df 	bl	8001678 <HAL_Delay>
  lcdIli9341_writeCmd(0x11); //exit sleep
 80004ba:	2011      	movs	r0, #17
 80004bc:	f000 f8b3 	bl	8000626 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 80004c0:	2032      	movs	r0, #50	@ 0x32
 80004c2:	f001 f8d9 	bl	8001678 <HAL_Delay>

  lcdIli9341_writeCmd(0xB6);
 80004c6:	20b6      	movs	r0, #182	@ 0xb6
 80004c8:	f000 f8ad 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0A);
 80004cc:	200a      	movs	r0, #10
 80004ce:	f000 f8b9 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xC2);
 80004d2:	20c2      	movs	r0, #194	@ 0xc2
 80004d4:	f000 f8b6 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x36);   // memory access control
 80004d8:	2036      	movs	r0, #54	@ 0x36
 80004da:	f000 f8a4 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x68);     // BGR -> seems RGB
 80004de:	2068      	movs	r0, #104	@ 0x68
 80004e0:	f000 f8b0 	bl	8000644 <lcdIli9341_writeData>
//  lcdIli9341_writeData(0x60);     // RGB -> seems BGR

  lcdIli9341_writeCmd(0x3A); // pixel format
 80004e4:	203a      	movs	r0, #58	@ 0x3a
 80004e6:	f000 f89e 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x55); //RGB565 (16bit)
 80004ea:	2055      	movs	r0, #85	@ 0x55
 80004ec:	f000 f8aa 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0xE0); //gamma
 80004f0:	20e0      	movs	r0, #224	@ 0xe0
 80004f2:	f000 f898 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x10);
 80004f6:	2010      	movs	r0, #16
 80004f8:	f000 f8a4 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 80004fc:	2010      	movs	r0, #16
 80004fe:	f000 f8a1 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 8000502:	2010      	movs	r0, #16
 8000504:	f000 f89e 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x08);
 8000508:	2008      	movs	r0, #8
 800050a:	f000 f89b 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 800050e:	200e      	movs	r0, #14
 8000510:	f000 f898 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x06);
 8000514:	2006      	movs	r0, #6
 8000516:	f000 f895 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x42);
 800051a:	2042      	movs	r0, #66	@ 0x42
 800051c:	f000 f892 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x28);
 8000520:	2028      	movs	r0, #40	@ 0x28
 8000522:	f000 f88f 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x36);
 8000526:	2036      	movs	r0, #54	@ 0x36
 8000528:	f000 f88c 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f889 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000532:	200e      	movs	r0, #14
 8000534:	f000 f886 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000538:	2004      	movs	r0, #4
 800053a:	f000 f883 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x13);
 800053e:	2013      	movs	r0, #19
 8000540:	f000 f880 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000544:	200e      	movs	r0, #14
 8000546:	f000 f87d 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800054a:	200c      	movs	r0, #12
 800054c:	f000 f87a 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0XE1); //gamma
 8000550:	20e1      	movs	r0, #225	@ 0xe1
 8000552:	f000 f868 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0C);
 8000556:	200c      	movs	r0, #12
 8000558:	f000 f874 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x23);
 800055c:	2023      	movs	r0, #35	@ 0x23
 800055e:	f000 f871 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x26);
 8000562:	2026      	movs	r0, #38	@ 0x26
 8000564:	f000 f86e 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000568:	2004      	movs	r0, #4
 800056a:	f000 f86b 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 800056e:	200c      	movs	r0, #12
 8000570:	f000 f868 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000574:	2004      	movs	r0, #4
 8000576:	f000 f865 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x39);
 800057a:	2039      	movs	r0, #57	@ 0x39
 800057c:	f000 f862 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x24);
 8000580:	2024      	movs	r0, #36	@ 0x24
 8000582:	f000 f85f 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x4B);
 8000586:	204b      	movs	r0, #75	@ 0x4b
 8000588:	f000 f85c 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f859 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8000592:	200b      	movs	r0, #11
 8000594:	f000 f856 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8000598:	200b      	movs	r0, #11
 800059a:	f000 f853 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x33);
 800059e:	2033      	movs	r0, #51	@ 0x33
 80005a0:	f000 f850 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x37);
 80005a4:	2037      	movs	r0, #55	@ 0x37
 80005a6:	f000 f84d 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0F);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f84a 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2a);//
 80005b0:	202a      	movs	r0, #42	@ 0x2a
 80005b2:	f000 f838 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f844 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 f841 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f83e 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xef);
 80005c8:	20ef      	movs	r0, #239	@ 0xef
 80005ca:	f000 f83b 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b); //
 80005ce:	202b      	movs	r0, #43	@ 0x2b
 80005d0:	f000 f829 	bl	8000626 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f835 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f832 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x01);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f82f 	bl	8000644 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x3f);
 80005e6:	203f      	movs	r0, #63	@ 0x3f
 80005e8:	f000 f82c 	bl	8000644 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x29);
 80005ec:	2029      	movs	r0, #41	@ 0x29
 80005ee:	f000 f81a 	bl	8000626 <lcdIli9341_writeCmd>
  HAL_Delay(10);
 80005f2:	200a      	movs	r0, #10
 80005f4:	f001 f840 	bl	8001678 <HAL_Delay>
  lcdIli9341_writeCmd(0x2C);
 80005f8:	202c      	movs	r0, #44	@ 0x2c
 80005fa:	f000 f814 	bl	8000626 <lcdIli9341_writeCmd>
//  lcdIli9341_readData();
//  lcdIli9341_readData();
//  lcdIli9341_readData();

//  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0xffff);
  lcdIli9341_drawRect(0, 0, LCD_ILI9342_WIDTH, LCD_ILI9342_HEIGHT, 0x0000);
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	23f0      	movs	r3, #240	@ 0xf0
 8000604:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff04 	bl	8000418 <lcdIli9341_drawRect>
  lcdIli9341_setArea(0, 0, LCD_ILI9342_WIDTH - 1, LCD_ILI9342_HEIGHT - 1);
 8000610:	23ef      	movs	r3, #239	@ 0xef
 8000612:	f240 123f 	movw	r2, #319	@ 0x13f
 8000616:	2100      	movs	r1, #0
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff feb1 	bl	8000380 <lcdIli9341_setArea>

  return RET_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <lcdIli9341_writeCmd>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeCmd(uint16_t cmd)
#else
inline static void lcdIli9341_writeCmd(uint8_t cmd)
#endif
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	80fb      	strh	r3, [r7, #6]
  LCD_CMD = cmd;
 8000630:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000634:	88fb      	ldrh	r3, [r7, #6]
 8000636:	8013      	strh	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <lcdIli9341_writeData>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeData(uint16_t data)
#else
inline static void lcdIli9341_writeData(uint8_t data)
#endif
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
  LCD_DATA = data;
 800064e:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <lcdIli9341_writeData+0x1c>)
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	8013      	strh	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	60080000 	.word	0x60080000

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800066a:	f000 fa6f 	bl	8000b4c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 ff71 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f83d 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f000 f9bf 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800067a:	f000 f939 	bl	80008f0 <MX_DMA_Init>
  MX_DCMI_Init();
 800067e:	f000 f8c3 	bl	8000808 <MX_DCMI_Init>
  MX_FMC_Init();
 8000682:	f000 f955 	bl	8000930 <MX_FMC_Init>
  MX_I2C2_Init();
 8000686:	f000 f8f3 	bl	8000870 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t* pData;
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET); //Camera PWDN to GND
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000690:	4812      	ldr	r0, [pc, #72]	@ (80006dc <main+0x78>)
 8000692:	f005 f927 	bl	80058e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); //LCD Backlight to 3V3
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <main+0x7c>)
 800069c:	f005 f922 	bl	80058e4 <HAL_GPIO_WritePin>
  lcdIli9341_init();
 80006a0:	f7ff ff02 	bl	80004a8 <lcdIli9341_init>
  lcdIli9341_drawRect(0, 0, 320, 240, LCD_ILI9342_COLOR_RED);
 80006a4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	23f0      	movs	r3, #240	@ 0xf0
 80006ac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff feb0 	bl	8000418 <lcdIli9341_drawRect>
  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 80006b8:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <main+0x80>)
 80006ba:	490b      	ldr	r1, [pc, #44]	@ (80006e8 <main+0x84>)
 80006bc:	480b      	ldr	r0, [pc, #44]	@ (80006ec <main+0x88>)
 80006be:	f000 fa77 	bl	8000bb0 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fabc 	bl	8000c40 <ov7670_config>
  pData = lcdIli9341_getDrawAddress();
 80006c8:	f7ff fee4 	bl	8000494 <lcdIli9341_getDrawAddress>
 80006cc:	6078      	str	r0, [r7, #4]
  ov7670_startCap(OV7670_CAP_CONTINUOUS, pData);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fae4 	bl	8000ca0 <ov7670_startCap>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <main+0x74>
 80006dc:	58020c00 	.word	0x58020c00
 80006e0:	58020400 	.word	0x58020400
 80006e4:	24000150 	.word	0x24000150
 80006e8:	240000d8 	.word	0x240000d8
 80006ec:	24000088 	.word	0x24000088

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	@ 0x70
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	224c      	movs	r2, #76	@ 0x4c
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 fe75 	bl	80093ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2220      	movs	r2, #32
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 fe6f 	bl	80093ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000710:	2002      	movs	r0, #2
 8000712:	f006 f851 	bl	80067b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <SystemClock_Config+0x10c>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	4a37      	ldr	r2, [pc, #220]	@ (80007fc <SystemClock_Config+0x10c>)
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000726:	4b35      	ldr	r3, [pc, #212]	@ (80007fc <SystemClock_Config+0x10c>)
 8000728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4b33      	ldr	r3, [pc, #204]	@ (8000800 <SystemClock_Config+0x110>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a31      	ldr	r2, [pc, #196]	@ (8000800 <SystemClock_Config+0x110>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <SystemClock_Config+0x110>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	bf00      	nop
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <SystemClock_Config+0x110>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800075a:	d1f8      	bne.n	800074e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000772:	232a      	movs	r3, #42	@ 0x2a
 8000774:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000782:	230c      	movs	r3, #12
 8000784:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000786:	2300      	movs	r3, #0
 8000788:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	4618      	mov	r0, r3
 8000794:	f006 f84a 	bl	800682c <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800079e:	f000 fa01 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	233f      	movs	r3, #63	@ 0x3f
 80007a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2303      	movs	r3, #3
 80007a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b2:	2340      	movs	r3, #64	@ 0x40
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2103      	movs	r1, #3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 fc89 	bl	80070e0 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007d4:	f000 f9e6 	bl	8000ba4 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <SystemClock_Config+0x114>)
 80007da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007dc:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <SystemClock_Config+0x114>)
 80007de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_4);
 80007e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007e8:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 80007ec:	2000      	movs	r0, #0
 80007ee:	f006 fe2d 	bl	800744c <HAL_RCC_MCOConfig>
}
 80007f2:	bf00      	nop
 80007f4:	3770      	adds	r7, #112	@ 0x70
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58000400 	.word	0x58000400
 8000800:	58024800 	.word	0x58024800
 8000804:	58024400 	.word	0x58024400

08000808 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_DCMI_Init+0x60>)
 800080e:	4a17      	ldr	r2, [pc, #92]	@ (800086c <MX_DCMI_Init+0x64>)
 8000810:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_DCMI_Init+0x60>)
 800081a:	2220      	movs	r2, #32
 800081c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000820:	2280      	movs	r2, #128	@ 0x80
 8000822:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_DCMI_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_DCMI_Init+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_DCMI_Init+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_DCMI_Init+0x60>)
 8000856:	f001 f8c7 	bl	80019e8 <HAL_DCMI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 f9a0 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000088 	.word	0x24000088
 800086c:	48020000 	.word	0x48020000

08000870 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_I2C2_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	@ (80008e8 <MX_I2C2_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10A0A4F8;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_I2C2_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ec <MX_I2C2_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_I2C2_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_I2C2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_I2C2_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_I2C2_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <MX_I2C2_Init+0x74>)
 80008ac:	f005 f834 	bl	8005918 <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 f975 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <MX_I2C2_Init+0x74>)
 80008be:	f005 fee3 	bl	8006688 <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 f96c 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_I2C2_Init+0x74>)
 80008d0:	f005 ff25 	bl	800671e <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 f963 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000150 	.word	0x24000150
 80008e8:	40005800 	.word	0x40005800
 80008ec:	10a0a4f8 	.word	0x10a0a4f8

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_DMA_Init+0x3c>)
 80008f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008fc:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <MX_DMA_Init+0x3c>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_DMA_Init+0x3c>)
 8000908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	200b      	movs	r0, #11
 800091a:	f000 ffb8 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800091e:	200b      	movs	r0, #11
 8000920:	f000 ffcf 	bl	80018c2 <HAL_NVIC_EnableIRQ>

}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <MX_FMC_Init+0xbc>)
 800094a:	4a29      	ldr	r2, [pc, #164]	@ (80009f0 <MX_FMC_Init+0xc0>)
 800094c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800094e:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000950:	4a28      	ldr	r2, [pc, #160]	@ (80009f4 <MX_FMC_Init+0xc4>)
 8000952:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000954:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_FMC_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000968:	2210      	movs	r2, #16
 800096a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_FMC_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000978:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_FMC_Init+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800097e:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000980:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_FMC_Init+0xbc>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_FMC_Init+0xbc>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_FMC_Init+0xbc>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_FMC_Init+0xbc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_FMC_Init+0xbc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_FMC_Init+0xbc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80009b4:	230f      	movs	r3, #15
 80009b6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80009b8:	2305      	movs	r3, #5
 80009ba:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009c0:	2310      	movs	r3, #16
 80009c2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009c4:	2311      	movs	r3, #17
 80009c6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_FMC_Init+0xbc>)
 80009d4:	f008 fa8c 	bl	8008ef0 <HAL_SRAM_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 80009de:	f000 f8e1 	bl	8000ba4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	240001a4 	.word	0x240001a4
 80009f0:	52004000 	.word	0x52004000
 80009f4:	52004104 	.word	0x52004104

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a14:	4a49      	ldr	r2, [pc, #292]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1e:	4b47      	ldr	r3, [pc, #284]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b43      	ldr	r3, [pc, #268]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	4a42      	ldr	r2, [pc, #264]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	4a3a      	ldr	r2, [pc, #232]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5a:	4b38      	ldr	r3, [pc, #224]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a68:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	4a33      	ldr	r2, [pc, #204]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a78:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	4b2d      	ldr	r3, [pc, #180]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a96:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	4a24      	ldr	r2, [pc, #144]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	481e      	ldr	r0, [pc, #120]	@ (8000b40 <MX_GPIO_Init+0x148>)
 8000ac8:	f004 ff0c 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAMERA_RESET_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000ad2:	481c      	ldr	r0, [pc, #112]	@ (8000b44 <MX_GPIO_Init+0x14c>)
 8000ad4:	f004 ff06 	bl	80058e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4814      	ldr	r0, [pc, #80]	@ (8000b40 <MX_GPIO_Init+0x148>)
 8000af0:	f004 fd48 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA_RESET_Pin PD12 */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin|GPIO_PIN_12;
 8000af4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_GPIO_Init+0x14c>)
 8000b0e:	f004 fd39 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <MX_GPIO_Init+0x150>)
 8000b30:	f004 fd28 	bl	8005584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	@ 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020400 	.word	0x58020400
 8000b44:	58020c00 	.word	0x58020c00
 8000b48:	58020000 	.word	0x58020000

08000b4c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b5e:	f000 fecb 	bl	80018f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b6e:	231f      	movs	r3, #31
 8000b70:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b72:	2387      	movs	r3, #135	@ 0x87
 8000b74:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 fee9 	bl	8001968 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b96:	2004      	movs	r0, #4
 8000b98:	f000 fec6 	bl	8001928 <HAL_MPU_Enable>

}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <ov7670_init+0x78>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <ov7670_init+0x7c>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <ov7670_init+0x80>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <ov7670_init+0x84>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bda:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <ov7670_init+0x88>)
 8000bdc:	f004 fe82 	bl	80058e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000be0:	2064      	movs	r0, #100	@ 0x64
 8000be2:	f000 fd49 	bl	8001678 <HAL_Delay>
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bec:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <ov7670_init+0x88>)
 8000bee:	f004 fe79 	bl	80058e4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f000 fd40 	bl	8001678 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	2012      	movs	r0, #18
 8000bfc:	f000 f8c6 	bl	8000d8c <ov7670_write>
  HAL_Delay(30);
 8000c00:	201e      	movs	r0, #30
 8000c02:	f000 fd39 	bl	8001678 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	200b      	movs	r0, #11
 8000c0e:	f000 f8dd 	bl	8000dcc <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8000c12:	7d3b      	ldrb	r3, [r7, #20]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <ov7670_init+0x8c>)
 8000c18:	f008 fb94 	bl	8009344 <iprintf>


  return RET_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	240001f0 	.word	0x240001f0
 8000c2c:	240001f4 	.word	0x240001f4
 8000c30:	240001f8 	.word	0x240001f8
 8000c34:	240001fc 	.word	0x240001fc
 8000c38:	58020c00 	.word	0x58020c00
 8000c3c:	0800a038 	.word	0x0800a038

08000c40 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8000c48:	f000 f858 	bl	8000cfc <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	2012      	movs	r0, #18
 8000c50:	f000 f89c 	bl	8000d8c <ov7670_write>
  HAL_Delay(30);
 8000c54:	201e      	movs	r0, #30
 8000c56:	f000 fd0f 	bl	8001678 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e012      	b.n	8000c86 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8000c60:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <ov7670_config+0x5c>)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <ov7670_config+0x5c>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	440b      	add	r3, r1
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4610      	mov	r0, r2
 8000c76:	f000 f889 	bl	8000d8c <ov7670_write>
    HAL_Delay(1);
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f000 fcfc 	bl	8001678 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <ov7670_config+0x5c>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000c8e:	2bff      	cmp	r3, #255	@ 0xff
 8000c90:	d1e6      	bne.n	8000c60 <ov7670_config+0x20>
  }
  return RET_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	0800a050 	.word	0x0800a050

08000ca0 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8000caa:	f000 f827 	bl	8000cfc <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10b      	bne.n	8000ccc <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf4 <ov7670_startCap+0x54>)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <ov7670_startCap+0x58>)
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f000 ff09 	bl	8001adc <HAL_DCMI_Start_DMA>
 8000cca:	e00d      	b.n	8000ce8 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10a      	bne.n	8000ce8 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <ov7670_startCap+0x54>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000cd8:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <ov7670_startCap+0x58>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	f000 fefa 	bl	8001adc <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	240001fc 	.word	0x240001fc
 8000cf8:	240001f0 	.word	0x240001f0

08000cfc <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <ov7670_stopCap+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 ffab 	bl	8001c60 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	240001f0 	.word	0x240001f0

08000d14 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_DCMI_FrameEventCallback+0x54>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <HAL_DCMI_FrameEventCallback+0x1c>
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_DCMI_FrameEventCallback+0x54>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_DCMI_FrameEventCallback+0x58>)
 8000d2a:	6812      	ldr	r2, [r2, #0]
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00b      	beq.n	8000d50 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3328      	adds	r3, #40	@ 0x28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_DCMI_FrameEventCallback+0x5c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000d4c:	f001 fc8a 	bl	8002664 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_DCMI_FrameEventCallback+0x58>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <HAL_DCMI_FrameEventCallback+0x58>)
 8000d58:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_DCMI_FrameEventCallback+0x60>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000200 	.word	0x24000200
 8000d6c:	24000208 	.word	0x24000208
 8000d70:	240001fc 	.word	0x240001fc
 8000d74:	24000204 	.word	0x24000204

08000d78 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <ov7670_write+0x3c>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	2364      	movs	r3, #100	@ 0x64
 8000da6:	9302      	str	r3, [sp, #8]
 8000da8:	2301      	movs	r3, #1
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	2142      	movs	r1, #66	@ 0x42
 8000db4:	f005 f85a 	bl	8005e6c <HAL_I2C_Mem_Write>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240001f8 	.word	0x240001f8

08000dcc <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <ov7670_read+0x48>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	1dfa      	adds	r2, r7, #7
 8000dde:	2364      	movs	r3, #100	@ 0x64
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	2142      	movs	r1, #66	@ 0x42
 8000de6:	f004 fe33 	bl	8005a50 <HAL_I2C_Master_Transmit>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <ov7670_read+0x48>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	2364      	movs	r3, #100	@ 0x64
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2301      	movs	r3, #1
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	2142      	movs	r1, #66	@ 0x42
 8000dfc:	f004 ff40 	bl	8005c80 <HAL_I2C_Master_Receive>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	240001f8 	.word	0x240001f8

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e24:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_MspInit+0x30>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_MspInit+0x30>)
 8000e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	58024400 	.word	0x58024400

08000e4c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a66      	ldr	r2, [pc, #408]	@ (8001004 <HAL_DCMI_MspInit+0x1b8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	f040 80c5 	bne.w	8000ffa <HAL_DCMI_MspInit+0x1ae>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000e70:	4b65      	ldr	r3, [pc, #404]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000e72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000e76:	4a64      	ldr	r2, [pc, #400]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000e80:	4b61      	ldr	r3, [pc, #388]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000e82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a5c      	ldr	r2, [pc, #368]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b56      	ldr	r3, [pc, #344]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a55      	ldr	r2, [pc, #340]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b52      	ldr	r3, [pc, #328]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	4b4f      	ldr	r3, [pc, #316]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b4b      	ldr	r3, [pc, #300]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b47      	ldr	r3, [pc, #284]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a46      	ldr	r2, [pc, #280]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b43      	ldr	r3, [pc, #268]	@ (8001008 <HAL_DCMI_MspInit+0x1bc>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10;
 8000f06:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f10:	2302      	movs	r3, #2
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f18:	230d      	movs	r3, #13
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	483a      	ldr	r0, [pc, #232]	@ (800100c <HAL_DCMI_MspInit+0x1c0>)
 8000f24:	f004 fb2e 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000f28:	f44f 6334 	mov.w	r3, #2880	@ 0xb40
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f32:	2302      	movs	r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f3a:	230d      	movs	r3, #13
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4832      	ldr	r0, [pc, #200]	@ (8001010 <HAL_DCMI_MspInit+0x1c4>)
 8000f46:	f004 fb1d 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f52:	2302      	movs	r3, #2
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f5a:	230d      	movs	r3, #13
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	482b      	ldr	r0, [pc, #172]	@ (8001014 <HAL_DCMI_MspInit+0x1c8>)
 8000f66:	f004 fb0d 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f6a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f74:	2302      	movs	r3, #2
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f7c:	230d      	movs	r3, #13
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4824      	ldr	r0, [pc, #144]	@ (8001018 <HAL_DCMI_MspInit+0x1cc>)
 8000f88:	f004 fafc 	bl	8005584 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000f8e:	4a24      	ldr	r2, [pc, #144]	@ (8001020 <HAL_DCMI_MspInit+0x1d4>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000f94:	224b      	movs	r2, #75	@ 0x4b
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000fce:	4813      	ldr	r0, [pc, #76]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fd0:	f000 ffec 	bl	8001fac <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_DCMI_MspInit+0x192>
    {
      Error_Handler();
 8000fda:	f7ff fde3 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fe2:	649a      	str	r2, [r3, #72]	@ 0x48
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <HAL_DCMI_MspInit+0x1d0>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	204e      	movs	r0, #78	@ 0x4e
 8000ff0:	f000 fc4d 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000ff4:	204e      	movs	r0, #78	@ 0x4e
 8000ff6:	f000 fc64 	bl	80018c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DCMI_MspInit 1 */

  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3730      	adds	r7, #48	@ 0x30
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	48020000 	.word	0x48020000
 8001008:	58024400 	.word	0x58024400
 800100c:	58020000 	.word	0x58020000
 8001010:	58020800 	.word	0x58020800
 8001014:	58020c00 	.word	0x58020c00
 8001018:	58020400 	.word	0x58020400
 800101c:	240000d8 	.word	0x240000d8
 8001020:	40020010 	.word	0x40020010

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ba      	sub	sp, #232	@ 0xe8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	22c0      	movs	r2, #192	@ 0xc0
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f008 f9d2 	bl	80093ee <memset>
  if(hi2c->Instance==I2C2)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <HAL_I2C_MspInit+0xc8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d146      	bne.n	80010e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001054:	f04f 0208 	mov.w	r2, #8
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f006 fbd2 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001076:	f7ff fd95 	bl	8000ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001098:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010b2:	2304      	movs	r3, #4
 80010b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <HAL_I2C_MspInit+0xd0>)
 80010c0:	f004 fa60 	bl	8005584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ca:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 80010cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_I2C_MspInit+0xcc>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010e2:	bf00      	nop
 80010e4:	37e8      	adds	r7, #232	@ 0xe8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40005800 	.word	0x40005800
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020400 	.word	0x58020400

080010f8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0b8      	sub	sp, #224	@ 0xe0
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010fe:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800110e:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_FMC_MspInit+0x100>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d16c      	bne.n	80011f0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001116:	4b38      	ldr	r3, [pc, #224]	@ (80011f8 <HAL_FMC_MspInit+0x100>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	22c0      	movs	r2, #192	@ 0xc0
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f008 f962 	bl	80093ee <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800112a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001136:	2300      	movs	r3, #0
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4618      	mov	r0, r3
 8001140:	f006 fb68 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_FMC_MspInit+0x56>
    {
      Error_Handler();
 800114a:	f7ff fd2b 	bl	8000ba4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_FMC_MspInit+0x104>)
 8001150:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001154:	4a29      	ldr	r2, [pc, #164]	@ (80011fc <HAL_FMC_MspInit+0x104>)
 8001156:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800115a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_FMC_MspInit+0x104>)
 8001160:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800116c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001186:	230c      	movs	r3, #12
 8001188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001190:	4619      	mov	r1, r3
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <HAL_FMC_MspInit+0x108>)
 8001194:	f004 f9f6 	bl	8005584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001198:	f24e 7333 	movw	r3, #59187	@ 0xe733
 800119c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b2:	230c      	movs	r3, #12
 80011b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <HAL_FMC_MspInit+0x10c>)
 80011c0:	f004 f9e0 	bl	8005584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80011dc:	2309      	movs	r3, #9
 80011de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	@ (8001208 <HAL_FMC_MspInit+0x110>)
 80011ea:	f004 f9cb 	bl	8005584 <HAL_GPIO_Init>
 80011ee:	e000      	b.n	80011f2 <HAL_FMC_MspInit+0xfa>
    return;
 80011f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011f2:	37e0      	adds	r7, #224	@ 0xe0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2400020c 	.word	0x2400020c
 80011fc:	58024400 	.word	0x58024400
 8001200:	58021000 	.word	0x58021000
 8001204:	58020c00 	.word	0x58020c00
 8001208:	58020800 	.word	0x58020800

0800120c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001214:	f7ff ff70 	bl	80010f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <NMI_Handler+0x4>

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <UsageFault_Handler+0x4>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001276:	f000 f9df 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <DMA1_Stream0_IRQHandler+0x10>)
 8001286:	f002 f9bb 	bl	8003600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	240000d8 	.word	0x240000d8

08001294 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <DCMI_IRQHandler+0x10>)
 800129a:	f000 fd41 	bl	8001d20 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	24000088 	.word	0x24000088

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001342:	605a      	str	r2, [r3, #4]
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f008 f86a 	bl	800948c <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	24080000 	.word	0x24080000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	24000210 	.word	0x24000210
 80013ec:	24000368 	.word	0x24000368

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b37      	ldr	r3, [pc, #220]	@ (80014d4 <SystemInit+0xe4>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a36      	ldr	r2, [pc, #216]	@ (80014d4 <SystemInit+0xe4>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001404:	4b34      	ldr	r3, [pc, #208]	@ (80014d8 <SystemInit+0xe8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	2b06      	cmp	r3, #6
 800140e:	d807      	bhi.n	8001420 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <SystemInit+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 030f 	bic.w	r3, r3, #15
 8001418:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <SystemInit+0xe8>)
 800141a:	f043 0307 	orr.w	r3, r3, #7
 800141e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <SystemInit+0xec>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a2d      	ldr	r2, [pc, #180]	@ (80014dc <SystemInit+0xec>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <SystemInit+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SystemInit+0xec>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4929      	ldr	r1, [pc, #164]	@ (80014dc <SystemInit+0xec>)
 8001438:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <SystemInit+0xf0>)
 800143a:	4013      	ands	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <SystemInit+0xe8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <SystemInit+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 030f 	bic.w	r3, r3, #15
 8001452:	4a21      	ldr	r2, [pc, #132]	@ (80014d8 <SystemInit+0xe8>)
 8001454:	f043 0307 	orr.w	r3, r3, #7
 8001458:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <SystemInit+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001460:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <SystemInit+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <SystemInit+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <SystemInit+0xec>)
 800146e:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <SystemInit+0xf4>)
 8001470:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <SystemInit+0xec>)
 8001474:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <SystemInit+0xf8>)
 8001476:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <SystemInit+0xec>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <SystemInit+0xfc>)
 800147c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <SystemInit+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <SystemInit+0xec>)
 8001486:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <SystemInit+0xfc>)
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <SystemInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <SystemInit+0xec>)
 8001492:	4a16      	ldr	r2, [pc, #88]	@ (80014ec <SystemInit+0xfc>)
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <SystemInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <SystemInit+0xec>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <SystemInit+0x100>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <SystemInit+0x104>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014ba:	d202      	bcs.n	80014c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <SystemInit+0x108>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <SystemInit+0x10c>)
 80014c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	52002000 	.word	0x52002000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e4:	02020200 	.word	0x02020200
 80014e8:	01ff0000 	.word	0x01ff0000
 80014ec:	01010280 	.word	0x01010280
 80014f0:	5c001000 	.word	0x5c001000
 80014f4:	ffff0000 	.word	0xffff0000
 80014f8:	51008108 	.word	0x51008108
 80014fc:	52004000 	.word	0x52004000

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f7ff ff74 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f007 ffb3 	bl	8009498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f897 	bl	8000664 <main>
  bx  lr
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800153c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001540:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001544:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8001548:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800154c:	24000364 	.word	0x24000364

08001550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC3_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155a:	2003      	movs	r0, #3
 800155c:	f000 f98c 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001560:	f005 ffde 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 8001564:	4602      	mov	r2, r0
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	4913      	ldr	r1, [pc, #76]	@ (80015c0 <HAL_Init+0x6c>)
 8001572:	5ccb      	ldrb	r3, [r1, r3]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_Init+0x68>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_Init+0x6c>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <HAL_Init+0x70>)
 8001596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001598:	4a0b      	ldr	r2, [pc, #44]	@ (80015c8 <HAL_Init+0x74>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f814 	bl	80015cc <HAL_InitTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e002      	b.n	80015b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ae:	f7ff fc33 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58024400 	.word	0x58024400
 80015c0:	0800a0ac 	.word	0x0800a0ac
 80015c4:	24000004 	.word	0x24000004
 80015c8:	24000000 	.word	0x24000000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_InitTick+0x60>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e021      	b.n	8001624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_InitTick+0x64>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_InitTick+0x60>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f971 	bl	80018de <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f93b 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_InitTick+0x68>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2400000c 	.word	0x2400000c
 8001630:	24000000 	.word	0x24000000
 8001634:	24000008 	.word	0x24000008

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2400000c 	.word	0x2400000c
 800165c:	24000214 	.word	0x24000214

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	24000214 	.word	0x24000214

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2400000c 	.word	0x2400000c

080016c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_GetREVID+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0c1b      	lsrs	r3, r3, #16
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	5c001000 	.word	0x5c001000

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	05fa0000 	.word	0x05fa0000

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff40 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff90 	bl	80017cc <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5f 	bl	8001778 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff33 	bl	800173c <__NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa4 	bl	8001834 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018fc:	f3bf 8f5f 	dmb	sy
}
 8001900:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <HAL_MPU_Disable+0x28>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_MPU_Disable+0x28>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_MPU_Disable+0x2c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	e000ed90 	.word	0xe000ed90

08001928 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001930:	4a0b      	ldr	r2, [pc, #44]	@ (8001960 <HAL_MPU_Enable+0x38>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_MPU_Enable+0x3c>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <HAL_MPU_Enable+0x3c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001946:	f3bf 8f4f 	dsb	sy
}
 800194a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800194c:	f3bf 8f6f 	isb	sy
}
 8001950:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed90 	.word	0xe000ed90
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785a      	ldrb	r2, [r3, #1]
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001976:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001978:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001984:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b1b      	ldrb	r3, [r3, #12]
 8001990:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7adb      	ldrb	r3, [r3, #11]
 8001996:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7a9b      	ldrb	r3, [r3, #10]
 800199e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b5b      	ldrb	r3, [r3, #13]
 80019a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b9b      	ldrb	r3, [r3, #14]
 80019ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7bdb      	ldrb	r3, [r3, #15]
 80019b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a5b      	ldrb	r3, [r3, #9]
 80019be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a1b      	ldrb	r3, [r3, #8]
 80019c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	7812      	ldrb	r2, [r2, #0]
 80019ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d4:	6113      	str	r3, [r2, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed90 	.word	0xe000ed90

080019e8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e069      	b.n	8001ace <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fa20 	bl	8000e4c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <HAL_DCMI_Init+0xf0>)
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a46:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a52:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a76:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d112      	bne.n	8001aae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7f5b      	ldrb	r3, [r3, #29]
 8001a92:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a94:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7f9b      	ldrb	r3, [r3, #30]
 8001a9a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a9c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7fdb      	ldrb	r3, [r3, #31]
 8001aa4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001aaa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001aac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 021e 	orr.w	r2, r2, #30
 8001abc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	ffe0f007 	.word	0xffe0f007

08001adc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_DCMI_Start_DMA+0x1c>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e0ab      	b.n	8001c50 <HAL_DCMI_Start_DMA+0x174>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b16:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0202 	bic.w	r2, r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3c:	4a46      	ldr	r2, [pc, #280]	@ (8001c58 <HAL_DCMI_Start_DMA+0x17c>)
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b44:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <HAL_DCMI_Start_DMA+0x180>)
 8001b46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6e:	d219      	bcs.n	8001ba4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3328      	adds	r3, #40	@ 0x28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	f000 fd70 	bl	8002664 <HAL_DMA_Start_IT>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d055      	beq.n	8001c36 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2240      	movs	r2, #64	@ 0x40
 8001b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e055      	b.n	8001c50 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <HAL_DCMI_Start_DMA+0x17c>)
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001bbe:	e009      	b.n	8001bd4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc4:	085a      	lsrs	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	005a      	lsls	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bdc:	d2f0      	bcs.n	8001bc0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be2:	1e9a      	subs	r2, r3, #2
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3328      	adds	r3, #40	@ 0x28
 8001c06:	4619      	mov	r1, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	f003 f807 	bl	8004c24 <HAL_DMAEx_MultiBufferStart_IT>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00c      	beq.n	8001c36 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2240      	movs	r2, #64	@ 0x40
 8001c20:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00c      	b.n	8001c50 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08001e4d 	.word	0x08001e4d
 8001c5c:	08001f73 	.word	0x08001f73

08001c60 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001c68:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_DCMI_Stop+0xb8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <HAL_DCMI_Stop+0xbc>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a5b      	lsrs	r3, r3, #9
 8001c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_DCMI_Stop+0x30>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e03f      	b.n	8001d10 <HAL_DCMI_Stop+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d108      	bne.n	8001cce <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	72fb      	strb	r3, [r7, #11]
      break;
 8001ccc:	e006      	b.n	8001cdc <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e9      	bne.n	8001cb0 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 ff21 	bl	8002b38 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000000 	.word	0x24000000
 8001d1c:	10624dd3 	.word	0x10624dd3

08001d20 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	4a31      	ldr	r2, [pc, #196]	@ (8001e20 <HAL_DCMI_IRQHandler+0x100>)
 8001d5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d62:	4618      	mov	r0, r3
 8001d64:	f001 fa06 	bl	8003174 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2202      	movs	r2, #2
 8001d78:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d92:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <HAL_DCMI_IRQHandler+0x100>)
 8001d94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 f9ea 	bl	8003174 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f840 	bl	8001e38 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d006      	beq.n	8001dd0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe ffd4 	bl	8000d78 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01d      	beq.n	8001e16 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d107      	bne.n	8001df8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 021e 	bic.w	r2, r2, #30
 8001df6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7fe ff7f 	bl	8000d14 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	08001f73 	.word	0x08001f73

08001e24 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e58:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d043      	beq.n	8001eea <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e6e:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d118      	bne.n	8001eae <DCMI_DMAXferCplt+0x62>
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e94:	00da      	lsls	r2, r3, #3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f003 fa1f 	bl	80052e0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eac:	e044      	b.n	8001f38 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d13c      	bne.n	8001f38 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	00da      	lsls	r2, r3, #3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f003 fa01 	bl	80052e0 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ee8:	e026      	b.n	8001f38 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	e017      	b.n	8001f38 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10f      	bne.n	8001f38 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f22:	0099      	lsls	r1, r3, #2
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d112      	bne.n	8001f6a <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d103      	bne.n	8001f6a <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7e:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d009      	beq.n	8001f9e <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff40 	bl	8001e24 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fb54 	bl	8001660 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e316      	b.n	80025f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a66      	ldr	r2, [pc, #408]	@ (8002164 <HAL_DMA_Init+0x1b8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d04a      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a65      	ldr	r2, [pc, #404]	@ (8002168 <HAL_DMA_Init+0x1bc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d045      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a63      	ldr	r2, [pc, #396]	@ (800216c <HAL_DMA_Init+0x1c0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d040      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a62      	ldr	r2, [pc, #392]	@ (8002170 <HAL_DMA_Init+0x1c4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d03b      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a60      	ldr	r2, [pc, #384]	@ (8002174 <HAL_DMA_Init+0x1c8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d036      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	@ (8002178 <HAL_DMA_Init+0x1cc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a5d      	ldr	r2, [pc, #372]	@ (800217c <HAL_DMA_Init+0x1d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02c      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a5c      	ldr	r2, [pc, #368]	@ (8002180 <HAL_DMA_Init+0x1d4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d027      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a5a      	ldr	r2, [pc, #360]	@ (8002184 <HAL_DMA_Init+0x1d8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d022      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a59      	ldr	r2, [pc, #356]	@ (8002188 <HAL_DMA_Init+0x1dc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01d      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a57      	ldr	r2, [pc, #348]	@ (800218c <HAL_DMA_Init+0x1e0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a56      	ldr	r2, [pc, #344]	@ (8002190 <HAL_DMA_Init+0x1e4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a54      	ldr	r2, [pc, #336]	@ (8002194 <HAL_DMA_Init+0x1e8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00e      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a53      	ldr	r2, [pc, #332]	@ (8002198 <HAL_DMA_Init+0x1ec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a51      	ldr	r2, [pc, #324]	@ (800219c <HAL_DMA_Init+0x1f0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Init+0xb8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a50      	ldr	r2, [pc, #320]	@ (80021a0 <HAL_DMA_Init+0x1f4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_DMA_Init+0xbc>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_DMA_Init+0xbe>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 813b 	beq.w	80022e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a37      	ldr	r2, [pc, #220]	@ (8002164 <HAL_DMA_Init+0x1b8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_Init+0x174>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <HAL_DMA_Init+0x1bc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_Init+0x174>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a34      	ldr	r2, [pc, #208]	@ (800216c <HAL_DMA_Init+0x1c0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Init+0x174>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a33      	ldr	r2, [pc, #204]	@ (8002170 <HAL_DMA_Init+0x1c4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <HAL_DMA_Init+0x1c8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a30      	ldr	r2, [pc, #192]	@ (8002178 <HAL_DMA_Init+0x1cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2e      	ldr	r2, [pc, #184]	@ (800217c <HAL_DMA_Init+0x1d0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <HAL_DMA_Init+0x1d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <HAL_DMA_Init+0x1d8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2a      	ldr	r2, [pc, #168]	@ (8002188 <HAL_DMA_Init+0x1dc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a28      	ldr	r2, [pc, #160]	@ (800218c <HAL_DMA_Init+0x1e0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_DMA_Init+0x1e4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Init+0x174>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <HAL_DMA_Init+0x1e8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Init+0x174>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <HAL_DMA_Init+0x1ec>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Init+0x174>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a22      	ldr	r2, [pc, #136]	@ (800219c <HAL_DMA_Init+0x1f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Init+0x174>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <HAL_DMA_Init+0x1f4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d108      	bne.n	8002132 <HAL_DMA_Init+0x186>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e007      	b.n	8002142 <HAL_DMA_Init+0x196>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002142:	e02f      	b.n	80021a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002144:	f7ff fa8c 	bl	8001660 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b05      	cmp	r3, #5
 8002150:	d928      	bls.n	80021a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e246      	b.n	80025f2 <HAL_DMA_Init+0x646>
 8002164:	40020010 	.word	0x40020010
 8002168:	40020028 	.word	0x40020028
 800216c:	40020040 	.word	0x40020040
 8002170:	40020058 	.word	0x40020058
 8002174:	40020070 	.word	0x40020070
 8002178:	40020088 	.word	0x40020088
 800217c:	400200a0 	.word	0x400200a0
 8002180:	400200b8 	.word	0x400200b8
 8002184:	40020410 	.word	0x40020410
 8002188:	40020428 	.word	0x40020428
 800218c:	40020440 	.word	0x40020440
 8002190:	40020458 	.word	0x40020458
 8002194:	40020470 	.word	0x40020470
 8002198:	40020488 	.word	0x40020488
 800219c:	400204a0 	.word	0x400204a0
 80021a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1c8      	bne.n	8002144 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4b83      	ldr	r3, [pc, #524]	@ (80023cc <HAL_DMA_Init+0x420>)
 80021be:	4013      	ands	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	4313      	orrs	r3, r2
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002208:	4b71      	ldr	r3, [pc, #452]	@ (80023d0 <HAL_DMA_Init+0x424>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <HAL_DMA_Init+0x428>)
 800220e:	4013      	ands	r3, r2
 8002210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002214:	d328      	bcc.n	8002268 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b28      	cmp	r3, #40	@ 0x28
 800221c:	d903      	bls.n	8002226 <HAL_DMA_Init+0x27a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b2e      	cmp	r3, #46	@ 0x2e
 8002224:	d917      	bls.n	8002256 <HAL_DMA_Init+0x2aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b3e      	cmp	r3, #62	@ 0x3e
 800222c:	d903      	bls.n	8002236 <HAL_DMA_Init+0x28a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b42      	cmp	r3, #66	@ 0x42
 8002234:	d90f      	bls.n	8002256 <HAL_DMA_Init+0x2aa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b46      	cmp	r3, #70	@ 0x46
 800223c:	d903      	bls.n	8002246 <HAL_DMA_Init+0x29a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b48      	cmp	r3, #72	@ 0x48
 8002244:	d907      	bls.n	8002256 <HAL_DMA_Init+0x2aa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b4e      	cmp	r3, #78	@ 0x4e
 800224c:	d905      	bls.n	800225a <HAL_DMA_Init+0x2ae>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b52      	cmp	r3, #82	@ 0x52
 8002254:	d801      	bhi.n	800225a <HAL_DMA_Init+0x2ae>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_DMA_Init+0x2b0>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002266:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	2b04      	cmp	r3, #4
 8002290:	d117      	bne.n	80022c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f002 fb33 	bl	8004910 <DMA_CheckFifoParam>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	@ 0x40
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e197      	b.n	80025f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f002 fa6e 	bl	80047ac <DMA_CalcBaseAndBitshift>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	223f      	movs	r2, #63	@ 0x3f
 80022de:	409a      	lsls	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	e0cd      	b.n	8002482 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <HAL_DMA_Init+0x42c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a39      	ldr	r2, [pc, #228]	@ (80023dc <HAL_DMA_Init+0x430>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a38      	ldr	r2, [pc, #224]	@ (80023e0 <HAL_DMA_Init+0x434>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d018      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a36      	ldr	r2, [pc, #216]	@ (80023e4 <HAL_DMA_Init+0x438>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a35      	ldr	r2, [pc, #212]	@ (80023e8 <HAL_DMA_Init+0x43c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00e      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a33      	ldr	r2, [pc, #204]	@ (80023ec <HAL_DMA_Init+0x440>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a32      	ldr	r2, [pc, #200]	@ (80023f0 <HAL_DMA_Init+0x444>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_DMA_Init+0x38a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a30      	ldr	r2, [pc, #192]	@ (80023f4 <HAL_DMA_Init+0x448>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_DMA_Init+0x38e>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_DMA_Init+0x390>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8097 	beq.w	8002470 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_DMA_Init+0x42c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d021      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a22      	ldr	r2, [pc, #136]	@ (80023dc <HAL_DMA_Init+0x430>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01c      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a21      	ldr	r2, [pc, #132]	@ (80023e0 <HAL_DMA_Init+0x434>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d017      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1f      	ldr	r2, [pc, #124]	@ (80023e4 <HAL_DMA_Init+0x438>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d012      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <HAL_DMA_Init+0x43c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_DMA_Init+0x440>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d008      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <HAL_DMA_Init+0x444>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <HAL_DMA_Init+0x3e4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a19      	ldr	r2, [pc, #100]	@ (80023f4 <HAL_DMA_Init+0x448>)
 800238e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4b13      	ldr	r3, [pc, #76]	@ (80023f8 <HAL_DMA_Init+0x44c>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b40      	cmp	r3, #64	@ 0x40
 80023b6:	d021      	beq.n	80023fc <HAL_DMA_Init+0x450>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b80      	cmp	r3, #128	@ 0x80
 80023be:	d102      	bne.n	80023c6 <HAL_DMA_Init+0x41a>
 80023c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023c4:	e01b      	b.n	80023fe <HAL_DMA_Init+0x452>
 80023c6:	2300      	movs	r3, #0
 80023c8:	e019      	b.n	80023fe <HAL_DMA_Init+0x452>
 80023ca:	bf00      	nop
 80023cc:	fe10803f 	.word	0xfe10803f
 80023d0:	5c001000 	.word	0x5c001000
 80023d4:	ffff0000 	.word	0xffff0000
 80023d8:	58025408 	.word	0x58025408
 80023dc:	5802541c 	.word	0x5802541c
 80023e0:	58025430 	.word	0x58025430
 80023e4:	58025444 	.word	0x58025444
 80023e8:	58025458 	.word	0x58025458
 80023ec:	5802546c 	.word	0x5802546c
 80023f0:	58025480 	.word	0x58025480
 80023f4:	58025494 	.word	0x58025494
 80023f8:	fffe000f 	.word	0xfffe000f
 80023fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800240c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800241c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800242c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b6e      	ldr	r3, [pc, #440]	@ (80025fc <HAL_DMA_Init+0x650>)
 8002444:	4413      	add	r3, r2
 8002446:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <HAL_DMA_Init+0x654>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	009a      	lsls	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f002 f9a9 	bl	80047ac <DMA_CalcBaseAndBitshift>
 800245a:	4603      	mov	r3, r0
 800245c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2201      	movs	r2, #1
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e008      	b.n	8002482 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0b7      	b.n	80025f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5f      	ldr	r2, [pc, #380]	@ (8002604 <HAL_DMA_Init+0x658>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d072      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a5d      	ldr	r2, [pc, #372]	@ (8002608 <HAL_DMA_Init+0x65c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d06d      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a5c      	ldr	r2, [pc, #368]	@ (800260c <HAL_DMA_Init+0x660>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d068      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002610 <HAL_DMA_Init+0x664>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d063      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a59      	ldr	r2, [pc, #356]	@ (8002614 <HAL_DMA_Init+0x668>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d05e      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a57      	ldr	r2, [pc, #348]	@ (8002618 <HAL_DMA_Init+0x66c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d059      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a56      	ldr	r2, [pc, #344]	@ (800261c <HAL_DMA_Init+0x670>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d054      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a54      	ldr	r2, [pc, #336]	@ (8002620 <HAL_DMA_Init+0x674>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04f      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a53      	ldr	r2, [pc, #332]	@ (8002624 <HAL_DMA_Init+0x678>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04a      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a51      	ldr	r2, [pc, #324]	@ (8002628 <HAL_DMA_Init+0x67c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d045      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a50      	ldr	r2, [pc, #320]	@ (800262c <HAL_DMA_Init+0x680>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d040      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002630 <HAL_DMA_Init+0x684>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d03b      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002634 <HAL_DMA_Init+0x688>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d036      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a4b      	ldr	r2, [pc, #300]	@ (8002638 <HAL_DMA_Init+0x68c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <HAL_DMA_Init+0x690>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d02c      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a48      	ldr	r2, [pc, #288]	@ (8002640 <HAL_DMA_Init+0x694>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d027      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <HAL_DMA_Init+0x698>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a45      	ldr	r2, [pc, #276]	@ (8002648 <HAL_DMA_Init+0x69c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01d      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a44      	ldr	r2, [pc, #272]	@ (800264c <HAL_DMA_Init+0x6a0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d018      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a42      	ldr	r2, [pc, #264]	@ (8002650 <HAL_DMA_Init+0x6a4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a41      	ldr	r2, [pc, #260]	@ (8002654 <HAL_DMA_Init+0x6a8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3f      	ldr	r2, [pc, #252]	@ (8002658 <HAL_DMA_Init+0x6ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3e      	ldr	r2, [pc, #248]	@ (800265c <HAL_DMA_Init+0x6b0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_DMA_Init+0x5c6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a3c      	ldr	r2, [pc, #240]	@ (8002660 <HAL_DMA_Init+0x6b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Init+0x5ca>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_DMA_Init+0x5cc>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f002 fa43 	bl	8004a08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b80      	cmp	r3, #128	@ 0x80
 8002588:	d102      	bne.n	8002590 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_DMA_Init+0x624>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d80c      	bhi.n	80025d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f002 fac0 	bl	8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e008      	b.n	80025e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	a7fdabf8 	.word	0xa7fdabf8
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	40020010 	.word	0x40020010
 8002608:	40020028 	.word	0x40020028
 800260c:	40020040 	.word	0x40020040
 8002610:	40020058 	.word	0x40020058
 8002614:	40020070 	.word	0x40020070
 8002618:	40020088 	.word	0x40020088
 800261c:	400200a0 	.word	0x400200a0
 8002620:	400200b8 	.word	0x400200b8
 8002624:	40020410 	.word	0x40020410
 8002628:	40020428 	.word	0x40020428
 800262c:	40020440 	.word	0x40020440
 8002630:	40020458 	.word	0x40020458
 8002634:	40020470 	.word	0x40020470
 8002638:	40020488 	.word	0x40020488
 800263c:	400204a0 	.word	0x400204a0
 8002640:	400204b8 	.word	0x400204b8
 8002644:	58025408 	.word	0x58025408
 8002648:	5802541c 	.word	0x5802541c
 800264c:	58025430 	.word	0x58025430
 8002650:	58025444 	.word	0x58025444
 8002654:	58025458 	.word	0x58025458
 8002658:	5802546c 	.word	0x5802546c
 800265c:	58025480 	.word	0x58025480
 8002660:	58025494 	.word	0x58025494

08002664 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e226      	b.n	8002ace <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_DMA_Start_IT+0x2a>
 800268a:	2302      	movs	r3, #2
 800268c:	e21f      	b.n	8002ace <HAL_DMA_Start_IT+0x46a>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 820a 	bne.w	8002ab8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_DMA_Start_IT+0x1f4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04a      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a66      	ldr	r2, [pc, #408]	@ (800285c <HAL_DMA_Start_IT+0x1f8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d045      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_DMA_Start_IT+0x1fc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d040      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a63      	ldr	r2, [pc, #396]	@ (8002864 <HAL_DMA_Start_IT+0x200>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d03b      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a62      	ldr	r2, [pc, #392]	@ (8002868 <HAL_DMA_Start_IT+0x204>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d036      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a60      	ldr	r2, [pc, #384]	@ (800286c <HAL_DMA_Start_IT+0x208>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002870 <HAL_DMA_Start_IT+0x20c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d02c      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002874 <HAL_DMA_Start_IT+0x210>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d027      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a5c      	ldr	r2, [pc, #368]	@ (8002878 <HAL_DMA_Start_IT+0x214>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_DMA_Start_IT+0x218>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01d      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a59      	ldr	r2, [pc, #356]	@ (8002880 <HAL_DMA_Start_IT+0x21c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <HAL_DMA_Start_IT+0x220>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a56      	ldr	r2, [pc, #344]	@ (8002888 <HAL_DMA_Start_IT+0x224>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a54      	ldr	r2, [pc, #336]	@ (800288c <HAL_DMA_Start_IT+0x228>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a53      	ldr	r2, [pc, #332]	@ (8002890 <HAL_DMA_Start_IT+0x22c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Start_IT+0xee>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a51      	ldr	r2, [pc, #324]	@ (8002894 <HAL_DMA_Start_IT+0x230>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d108      	bne.n	8002764 <HAL_DMA_Start_IT+0x100>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <HAL_DMA_Start_IT+0x110>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f001 fe6a 	bl	8004454 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a34      	ldr	r2, [pc, #208]	@ (8002858 <HAL_DMA_Start_IT+0x1f4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d04a      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a33      	ldr	r2, [pc, #204]	@ (800285c <HAL_DMA_Start_IT+0x1f8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d045      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a31      	ldr	r2, [pc, #196]	@ (8002860 <HAL_DMA_Start_IT+0x1fc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d040      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <HAL_DMA_Start_IT+0x200>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d03b      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002868 <HAL_DMA_Start_IT+0x204>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d036      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2d      	ldr	r2, [pc, #180]	@ (800286c <HAL_DMA_Start_IT+0x208>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d031      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002870 <HAL_DMA_Start_IT+0x20c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02c      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002874 <HAL_DMA_Start_IT+0x210>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d027      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a28      	ldr	r2, [pc, #160]	@ (8002878 <HAL_DMA_Start_IT+0x214>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d022      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a27      	ldr	r2, [pc, #156]	@ (800287c <HAL_DMA_Start_IT+0x218>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d01d      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a25      	ldr	r2, [pc, #148]	@ (8002880 <HAL_DMA_Start_IT+0x21c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d018      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a24      	ldr	r2, [pc, #144]	@ (8002884 <HAL_DMA_Start_IT+0x220>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <HAL_DMA_Start_IT+0x224>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00e      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a21      	ldr	r2, [pc, #132]	@ (800288c <HAL_DMA_Start_IT+0x228>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <HAL_DMA_Start_IT+0x22c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_DMA_Start_IT+0x1bc>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1e      	ldr	r2, [pc, #120]	@ (8002894 <HAL_DMA_Start_IT+0x230>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_DMA_Start_IT+0x1c0>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_DMA_Start_IT+0x1c2>
 8002824:	2300      	movs	r3, #0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 021e 	bic.w	r2, r3, #30
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0216 	orr.w	r2, r2, #22
 800283c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d03e      	beq.n	80028c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0208 	orr.w	r2, r2, #8
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e035      	b.n	80028c4 <HAL_DMA_Start_IT+0x260>
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 020e 	bic.w	r2, r3, #14
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 020a 	orr.w	r2, r2, #10
 80028aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0204 	orr.w	r2, r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	@ (8002ad8 <HAL_DMA_Start_IT+0x474>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d072      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a82      	ldr	r2, [pc, #520]	@ (8002adc <HAL_DMA_Start_IT+0x478>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d06d      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a80      	ldr	r2, [pc, #512]	@ (8002ae0 <HAL_DMA_Start_IT+0x47c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d068      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae4 <HAL_DMA_Start_IT+0x480>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d063      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae8 <HAL_DMA_Start_IT+0x484>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d05e      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7c      	ldr	r2, [pc, #496]	@ (8002aec <HAL_DMA_Start_IT+0x488>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d059      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7a      	ldr	r2, [pc, #488]	@ (8002af0 <HAL_DMA_Start_IT+0x48c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d054      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a79      	ldr	r2, [pc, #484]	@ (8002af4 <HAL_DMA_Start_IT+0x490>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04f      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a77      	ldr	r2, [pc, #476]	@ (8002af8 <HAL_DMA_Start_IT+0x494>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d04a      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a76      	ldr	r2, [pc, #472]	@ (8002afc <HAL_DMA_Start_IT+0x498>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d045      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a74      	ldr	r2, [pc, #464]	@ (8002b00 <HAL_DMA_Start_IT+0x49c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d040      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a73      	ldr	r2, [pc, #460]	@ (8002b04 <HAL_DMA_Start_IT+0x4a0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d03b      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a71      	ldr	r2, [pc, #452]	@ (8002b08 <HAL_DMA_Start_IT+0x4a4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d036      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a70      	ldr	r2, [pc, #448]	@ (8002b0c <HAL_DMA_Start_IT+0x4a8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d031      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_DMA_Start_IT+0x4ac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02c      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6d      	ldr	r2, [pc, #436]	@ (8002b14 <HAL_DMA_Start_IT+0x4b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d027      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6b      	ldr	r2, [pc, #428]	@ (8002b18 <HAL_DMA_Start_IT+0x4b4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d022      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6a      	ldr	r2, [pc, #424]	@ (8002b1c <HAL_DMA_Start_IT+0x4b8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d01d      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a68      	ldr	r2, [pc, #416]	@ (8002b20 <HAL_DMA_Start_IT+0x4bc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d018      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a67      	ldr	r2, [pc, #412]	@ (8002b24 <HAL_DMA_Start_IT+0x4c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a65      	ldr	r2, [pc, #404]	@ (8002b28 <HAL_DMA_Start_IT+0x4c4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00e      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a64      	ldr	r2, [pc, #400]	@ (8002b2c <HAL_DMA_Start_IT+0x4c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a62      	ldr	r2, [pc, #392]	@ (8002b30 <HAL_DMA_Start_IT+0x4cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_Start_IT+0x350>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a61      	ldr	r2, [pc, #388]	@ (8002b34 <HAL_DMA_Start_IT+0x4d0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Start_IT+0x354>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_DMA_Start_IT+0x356>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01a      	beq.n	80029f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a37      	ldr	r2, [pc, #220]	@ (8002ad8 <HAL_DMA_Start_IT+0x474>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04a      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a36      	ldr	r2, [pc, #216]	@ (8002adc <HAL_DMA_Start_IT+0x478>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d045      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <HAL_DMA_Start_IT+0x47c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d040      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a33      	ldr	r2, [pc, #204]	@ (8002ae4 <HAL_DMA_Start_IT+0x480>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d03b      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a31      	ldr	r2, [pc, #196]	@ (8002ae8 <HAL_DMA_Start_IT+0x484>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d036      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <HAL_DMA_Start_IT+0x488>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	@ (8002af0 <HAL_DMA_Start_IT+0x48c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02c      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <HAL_DMA_Start_IT+0x490>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d027      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <HAL_DMA_Start_IT+0x494>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2a      	ldr	r2, [pc, #168]	@ (8002afc <HAL_DMA_Start_IT+0x498>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01d      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <HAL_DMA_Start_IT+0x49c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d018      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_DMA_Start_IT+0x4a0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a25      	ldr	r2, [pc, #148]	@ (8002b08 <HAL_DMA_Start_IT+0x4a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00e      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <HAL_DMA_Start_IT+0x4a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d009      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_DMA_Start_IT+0x4ac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_DMA_Start_IT+0x430>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_DMA_Start_IT+0x4b0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d108      	bne.n	8002aa6 <HAL_DMA_Start_IT+0x442>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e012      	b.n	8002acc <HAL_DMA_Start_IT+0x468>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e009      	b.n	8002acc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8
 8002b18:	58025408 	.word	0x58025408
 8002b1c:	5802541c 	.word	0x5802541c
 8002b20:	58025430 	.word	0x58025430
 8002b24:	58025444 	.word	0x58025444
 8002b28:	58025458 	.word	0x58025458
 8002b2c:	5802546c 	.word	0x5802546c
 8002b30:	58025480 	.word	0x58025480
 8002b34:	58025494 	.word	0x58025494

08002b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7fe fd8e 	bl	8001660 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e2dc      	b.n	800310a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d008      	beq.n	8002b6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2280      	movs	r2, #128	@ 0x80
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e2cd      	b.n	800310a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a76      	ldr	r2, [pc, #472]	@ (8002d4c <HAL_DMA_Abort+0x214>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a74      	ldr	r2, [pc, #464]	@ (8002d50 <HAL_DMA_Abort+0x218>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a73      	ldr	r2, [pc, #460]	@ (8002d54 <HAL_DMA_Abort+0x21c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a71      	ldr	r2, [pc, #452]	@ (8002d58 <HAL_DMA_Abort+0x220>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a70      	ldr	r2, [pc, #448]	@ (8002d5c <HAL_DMA_Abort+0x224>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8002d60 <HAL_DMA_Abort+0x228>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6d      	ldr	r2, [pc, #436]	@ (8002d64 <HAL_DMA_Abort+0x22c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d68 <HAL_DMA_Abort+0x230>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8002d6c <HAL_DMA_Abort+0x234>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a68      	ldr	r2, [pc, #416]	@ (8002d70 <HAL_DMA_Abort+0x238>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a67      	ldr	r2, [pc, #412]	@ (8002d74 <HAL_DMA_Abort+0x23c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a65      	ldr	r2, [pc, #404]	@ (8002d78 <HAL_DMA_Abort+0x240>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a64      	ldr	r2, [pc, #400]	@ (8002d7c <HAL_DMA_Abort+0x244>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a62      	ldr	r2, [pc, #392]	@ (8002d80 <HAL_DMA_Abort+0x248>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a61      	ldr	r2, [pc, #388]	@ (8002d84 <HAL_DMA_Abort+0x24c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort+0xd6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a5f      	ldr	r2, [pc, #380]	@ (8002d88 <HAL_DMA_Abort+0x250>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Abort+0xda>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_DMA_Abort+0xdc>
 8002c12:	2300      	movs	r3, #0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 021e 	bic.w	r2, r2, #30
 8002c26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e00a      	b.n	8002c56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 020e 	bic.w	r2, r2, #14
 8002c4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d4c <HAL_DMA_Abort+0x214>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d072      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3a      	ldr	r2, [pc, #232]	@ (8002d50 <HAL_DMA_Abort+0x218>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d06d      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a39      	ldr	r2, [pc, #228]	@ (8002d54 <HAL_DMA_Abort+0x21c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d068      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a37      	ldr	r2, [pc, #220]	@ (8002d58 <HAL_DMA_Abort+0x220>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d063      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a36      	ldr	r2, [pc, #216]	@ (8002d5c <HAL_DMA_Abort+0x224>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d05e      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a34      	ldr	r2, [pc, #208]	@ (8002d60 <HAL_DMA_Abort+0x228>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d059      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <HAL_DMA_Abort+0x22c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d054      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a31      	ldr	r2, [pc, #196]	@ (8002d68 <HAL_DMA_Abort+0x230>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d04f      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a30      	ldr	r2, [pc, #192]	@ (8002d6c <HAL_DMA_Abort+0x234>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04a      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <HAL_DMA_Abort+0x238>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d045      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <HAL_DMA_Abort+0x23c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d78 <HAL_DMA_Abort+0x240>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d03b      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d7c <HAL_DMA_Abort+0x244>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d036      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a28      	ldr	r2, [pc, #160]	@ (8002d80 <HAL_DMA_Abort+0x248>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d031      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a27      	ldr	r2, [pc, #156]	@ (8002d84 <HAL_DMA_Abort+0x24c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d02c      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <HAL_DMA_Abort+0x250>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d027      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <HAL_DMA_Abort+0x254>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	@ (8002d90 <HAL_DMA_Abort+0x258>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01d      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	@ (8002d94 <HAL_DMA_Abort+0x25c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d018      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_DMA_Abort+0x260>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	@ (8002d9c <HAL_DMA_Abort+0x264>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <HAL_DMA_Abort+0x268>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	@ (8002da4 <HAL_DMA_Abort+0x26c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_Abort+0x20e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <HAL_DMA_Abort+0x270>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d132      	bne.n	8002dac <HAL_DMA_Abort+0x274>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e031      	b.n	8002dae <HAL_DMA_Abort+0x276>
 8002d4a:	bf00      	nop
 8002d4c:	40020010 	.word	0x40020010
 8002d50:	40020028 	.word	0x40020028
 8002d54:	40020040 	.word	0x40020040
 8002d58:	40020058 	.word	0x40020058
 8002d5c:	40020070 	.word	0x40020070
 8002d60:	40020088 	.word	0x40020088
 8002d64:	400200a0 	.word	0x400200a0
 8002d68:	400200b8 	.word	0x400200b8
 8002d6c:	40020410 	.word	0x40020410
 8002d70:	40020428 	.word	0x40020428
 8002d74:	40020440 	.word	0x40020440
 8002d78:	40020458 	.word	0x40020458
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	40020488 	.word	0x40020488
 8002d84:	400204a0 	.word	0x400204a0
 8002d88:	400204b8 	.word	0x400204b8
 8002d8c:	58025408 	.word	0x58025408
 8002d90:	5802541c 	.word	0x5802541c
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	58025458 	.word	0x58025458
 8002da0:	5802546c 	.word	0x5802546c
 8002da4:	58025480 	.word	0x58025480
 8002da8:	58025494 	.word	0x58025494
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8002f7c <HAL_DMA_Abort+0x444>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04a      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f80 <HAL_DMA_Abort+0x448>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d045      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6a      	ldr	r2, [pc, #424]	@ (8002f84 <HAL_DMA_Abort+0x44c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d040      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a68      	ldr	r2, [pc, #416]	@ (8002f88 <HAL_DMA_Abort+0x450>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d03b      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a67      	ldr	r2, [pc, #412]	@ (8002f8c <HAL_DMA_Abort+0x454>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d036      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_DMA_Abort+0x458>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d031      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a64      	ldr	r2, [pc, #400]	@ (8002f94 <HAL_DMA_Abort+0x45c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02c      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a62      	ldr	r2, [pc, #392]	@ (8002f98 <HAL_DMA_Abort+0x460>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d027      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a61      	ldr	r2, [pc, #388]	@ (8002f9c <HAL_DMA_Abort+0x464>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d022      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa0 <HAL_DMA_Abort+0x468>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d01d      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa4 <HAL_DMA_Abort+0x46c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d018      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_DMA_Abort+0x470>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fac <HAL_DMA_Abort+0x474>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00e      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a59      	ldr	r2, [pc, #356]	@ (8002fb0 <HAL_DMA_Abort+0x478>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <HAL_DMA_Abort+0x47c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_Abort+0x32a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	@ (8002fb8 <HAL_DMA_Abort+0x480>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <HAL_DMA_Abort+0x33c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e007      	b.n	8002e84 <HAL_DMA_Abort+0x34c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e84:	e013      	b.n	8002eae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e86:	f7fe fbeb 	bl	8001660 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d90c      	bls.n	8002eae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e12d      	b.n	800310a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <HAL_DMA_Abort+0x444>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d04a      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8002f80 <HAL_DMA_Abort+0x448>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d045      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <HAL_DMA_Abort+0x44c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d040      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <HAL_DMA_Abort+0x450>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d03b      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a29      	ldr	r2, [pc, #164]	@ (8002f8c <HAL_DMA_Abort+0x454>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d036      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <HAL_DMA_Abort+0x458>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d031      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a26      	ldr	r2, [pc, #152]	@ (8002f94 <HAL_DMA_Abort+0x45c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d02c      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a24      	ldr	r2, [pc, #144]	@ (8002f98 <HAL_DMA_Abort+0x460>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d027      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_DMA_Abort+0x464>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <HAL_DMA_Abort+0x468>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <HAL_DMA_Abort+0x46c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa8 <HAL_DMA_Abort+0x470>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <HAL_DMA_Abort+0x474>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb0 <HAL_DMA_Abort+0x478>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <HAL_DMA_Abort+0x47c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_DMA_Abort+0x422>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_DMA_Abort+0x480>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_DMA_Abort+0x426>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_DMA_Abort+0x428>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02b      	beq.n	8002fbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	223f      	movs	r2, #63	@ 0x3f
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	e02a      	b.n	8002fd2 <HAL_DMA_Abort+0x49a>
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2201      	movs	r2, #1
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a4f      	ldr	r2, [pc, #316]	@ (8003114 <HAL_DMA_Abort+0x5dc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d072      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8003118 <HAL_DMA_Abort+0x5e0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d06d      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a4c      	ldr	r2, [pc, #304]	@ (800311c <HAL_DMA_Abort+0x5e4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d068      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8003120 <HAL_DMA_Abort+0x5e8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d063      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a49      	ldr	r2, [pc, #292]	@ (8003124 <HAL_DMA_Abort+0x5ec>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a47      	ldr	r2, [pc, #284]	@ (8003128 <HAL_DMA_Abort+0x5f0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d059      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a46      	ldr	r2, [pc, #280]	@ (800312c <HAL_DMA_Abort+0x5f4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d054      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a44      	ldr	r2, [pc, #272]	@ (8003130 <HAL_DMA_Abort+0x5f8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04f      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a43      	ldr	r2, [pc, #268]	@ (8003134 <HAL_DMA_Abort+0x5fc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04a      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a41      	ldr	r2, [pc, #260]	@ (8003138 <HAL_DMA_Abort+0x600>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a40      	ldr	r2, [pc, #256]	@ (800313c <HAL_DMA_Abort+0x604>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3e      	ldr	r2, [pc, #248]	@ (8003140 <HAL_DMA_Abort+0x608>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d03b      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a3d      	ldr	r2, [pc, #244]	@ (8003144 <HAL_DMA_Abort+0x60c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d036      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a3b      	ldr	r2, [pc, #236]	@ (8003148 <HAL_DMA_Abort+0x610>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a3a      	ldr	r2, [pc, #232]	@ (800314c <HAL_DMA_Abort+0x614>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d02c      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a38      	ldr	r2, [pc, #224]	@ (8003150 <HAL_DMA_Abort+0x618>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a37      	ldr	r2, [pc, #220]	@ (8003154 <HAL_DMA_Abort+0x61c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <HAL_DMA_Abort+0x620>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01d      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a34      	ldr	r2, [pc, #208]	@ (800315c <HAL_DMA_Abort+0x624>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <HAL_DMA_Abort+0x628>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a31      	ldr	r2, [pc, #196]	@ (8003164 <HAL_DMA_Abort+0x62c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003168 <HAL_DMA_Abort+0x630>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2e      	ldr	r2, [pc, #184]	@ (800316c <HAL_DMA_Abort+0x634>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_DMA_Abort+0x58a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <HAL_DMA_Abort+0x638>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_DMA_Abort+0x58e>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_DMA_Abort+0x590>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80030d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	58025408 	.word	0x58025408
 8003158:	5802541c 	.word	0x5802541c
 800315c:	58025430 	.word	0x58025430
 8003160:	58025444 	.word	0x58025444
 8003164:	58025458 	.word	0x58025458
 8003168:	5802546c 	.word	0x5802546c
 800316c:	58025480 	.word	0x58025480
 8003170:	58025494 	.word	0x58025494

08003174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e237      	b.n	80035f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d004      	beq.n	800319c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e22c      	b.n	80035f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <HAL_DMA_Abort_IT+0x1a0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003318 <HAL_DMA_Abort_IT+0x1a4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d045      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a59      	ldr	r2, [pc, #356]	@ (800331c <HAL_DMA_Abort_IT+0x1a8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d040      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a58      	ldr	r2, [pc, #352]	@ (8003320 <HAL_DMA_Abort_IT+0x1ac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d03b      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <HAL_DMA_Abort_IT+0x1b0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a55      	ldr	r2, [pc, #340]	@ (8003328 <HAL_DMA_Abort_IT+0x1b4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d031      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a53      	ldr	r2, [pc, #332]	@ (800332c <HAL_DMA_Abort_IT+0x1b8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02c      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_DMA_Abort_IT+0x1bc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d027      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a50      	ldr	r2, [pc, #320]	@ (8003334 <HAL_DMA_Abort_IT+0x1c0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4f      	ldr	r2, [pc, #316]	@ (8003338 <HAL_DMA_Abort_IT+0x1c4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4d      	ldr	r2, [pc, #308]	@ (800333c <HAL_DMA_Abort_IT+0x1c8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a4c      	ldr	r2, [pc, #304]	@ (8003340 <HAL_DMA_Abort_IT+0x1cc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4a      	ldr	r2, [pc, #296]	@ (8003344 <HAL_DMA_Abort_IT+0x1d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a49      	ldr	r2, [pc, #292]	@ (8003348 <HAL_DMA_Abort_IT+0x1d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a47      	ldr	r2, [pc, #284]	@ (800334c <HAL_DMA_Abort_IT+0x1d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Abort_IT+0xc8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a46      	ldr	r2, [pc, #280]	@ (8003350 <HAL_DMA_Abort_IT+0x1dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_DMA_Abort_IT+0xcc>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_DMA_Abort_IT+0xce>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8086 	beq.w	8003354 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2204      	movs	r2, #4
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2f      	ldr	r2, [pc, #188]	@ (8003314 <HAL_DMA_Abort_IT+0x1a0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04a      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2e      	ldr	r2, [pc, #184]	@ (8003318 <HAL_DMA_Abort_IT+0x1a4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d045      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2c      	ldr	r2, [pc, #176]	@ (800331c <HAL_DMA_Abort_IT+0x1a8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d040      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2b      	ldr	r2, [pc, #172]	@ (8003320 <HAL_DMA_Abort_IT+0x1ac>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a29      	ldr	r2, [pc, #164]	@ (8003324 <HAL_DMA_Abort_IT+0x1b0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d036      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a28      	ldr	r2, [pc, #160]	@ (8003328 <HAL_DMA_Abort_IT+0x1b4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a26      	ldr	r2, [pc, #152]	@ (800332c <HAL_DMA_Abort_IT+0x1b8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02c      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a25      	ldr	r2, [pc, #148]	@ (8003330 <HAL_DMA_Abort_IT+0x1bc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d027      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a23      	ldr	r2, [pc, #140]	@ (8003334 <HAL_DMA_Abort_IT+0x1c0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <HAL_DMA_Abort_IT+0x1c4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a20      	ldr	r2, [pc, #128]	@ (800333c <HAL_DMA_Abort_IT+0x1c8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003340 <HAL_DMA_Abort_IT+0x1cc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003344 <HAL_DMA_Abort_IT+0x1d0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_DMA_Abort_IT+0x1d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	@ (800334c <HAL_DMA_Abort_IT+0x1d8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_Abort_IT+0x17c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <HAL_DMA_Abort_IT+0x1dc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d108      	bne.n	8003302 <HAL_DMA_Abort_IT+0x18e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e178      	b.n	80035f4 <HAL_DMA_Abort_IT+0x480>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e16f      	b.n	80035f4 <HAL_DMA_Abort_IT+0x480>
 8003314:	40020010 	.word	0x40020010
 8003318:	40020028 	.word	0x40020028
 800331c:	40020040 	.word	0x40020040
 8003320:	40020058 	.word	0x40020058
 8003324:	40020070 	.word	0x40020070
 8003328:	40020088 	.word	0x40020088
 800332c:	400200a0 	.word	0x400200a0
 8003330:	400200b8 	.word	0x400200b8
 8003334:	40020410 	.word	0x40020410
 8003338:	40020428 	.word	0x40020428
 800333c:	40020440 	.word	0x40020440
 8003340:	40020458 	.word	0x40020458
 8003344:	40020470 	.word	0x40020470
 8003348:	40020488 	.word	0x40020488
 800334c:	400204a0 	.word	0x400204a0
 8003350:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020e 	bic.w	r2, r2, #14
 8003362:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6c      	ldr	r2, [pc, #432]	@ (800351c <HAL_DMA_Abort_IT+0x3a8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d04a      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6b      	ldr	r2, [pc, #428]	@ (8003520 <HAL_DMA_Abort_IT+0x3ac>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d045      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a69      	ldr	r2, [pc, #420]	@ (8003524 <HAL_DMA_Abort_IT+0x3b0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d040      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <HAL_DMA_Abort_IT+0x3b4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d03b      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a66      	ldr	r2, [pc, #408]	@ (800352c <HAL_DMA_Abort_IT+0x3b8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d036      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a65      	ldr	r2, [pc, #404]	@ (8003530 <HAL_DMA_Abort_IT+0x3bc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d031      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a63      	ldr	r2, [pc, #396]	@ (8003534 <HAL_DMA_Abort_IT+0x3c0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02c      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a62      	ldr	r2, [pc, #392]	@ (8003538 <HAL_DMA_Abort_IT+0x3c4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d027      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a60      	ldr	r2, [pc, #384]	@ (800353c <HAL_DMA_Abort_IT+0x3c8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d022      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003540 <HAL_DMA_Abort_IT+0x3cc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d01d      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003544 <HAL_DMA_Abort_IT+0x3d0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003548 <HAL_DMA_Abort_IT+0x3d4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a5a      	ldr	r2, [pc, #360]	@ (800354c <HAL_DMA_Abort_IT+0x3d8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a59      	ldr	r2, [pc, #356]	@ (8003550 <HAL_DMA_Abort_IT+0x3dc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_DMA_Abort_IT+0x3e0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_Abort_IT+0x290>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <HAL_DMA_Abort_IT+0x3e4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <HAL_DMA_Abort_IT+0x2a2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <HAL_DMA_Abort_IT+0x2b2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a3c      	ldr	r2, [pc, #240]	@ (800351c <HAL_DMA_Abort_IT+0x3a8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d072      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a3a      	ldr	r2, [pc, #232]	@ (8003520 <HAL_DMA_Abort_IT+0x3ac>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d06d      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a39      	ldr	r2, [pc, #228]	@ (8003524 <HAL_DMA_Abort_IT+0x3b0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d068      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <HAL_DMA_Abort_IT+0x3b4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d063      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a36      	ldr	r2, [pc, #216]	@ (800352c <HAL_DMA_Abort_IT+0x3b8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d05e      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	@ (8003530 <HAL_DMA_Abort_IT+0x3bc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d059      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	@ (8003534 <HAL_DMA_Abort_IT+0x3c0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d054      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a31      	ldr	r2, [pc, #196]	@ (8003538 <HAL_DMA_Abort_IT+0x3c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04f      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a30      	ldr	r2, [pc, #192]	@ (800353c <HAL_DMA_Abort_IT+0x3c8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2e      	ldr	r2, [pc, #184]	@ (8003540 <HAL_DMA_Abort_IT+0x3cc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2d      	ldr	r2, [pc, #180]	@ (8003544 <HAL_DMA_Abort_IT+0x3d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2b      	ldr	r2, [pc, #172]	@ (8003548 <HAL_DMA_Abort_IT+0x3d4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2a      	ldr	r2, [pc, #168]	@ (800354c <HAL_DMA_Abort_IT+0x3d8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a28      	ldr	r2, [pc, #160]	@ (8003550 <HAL_DMA_Abort_IT+0x3dc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	@ (8003554 <HAL_DMA_Abort_IT+0x3e0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a25      	ldr	r2, [pc, #148]	@ (8003558 <HAL_DMA_Abort_IT+0x3e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a24      	ldr	r2, [pc, #144]	@ (800355c <HAL_DMA_Abort_IT+0x3e8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	@ (8003560 <HAL_DMA_Abort_IT+0x3ec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	@ (8003564 <HAL_DMA_Abort_IT+0x3f0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003568 <HAL_DMA_Abort_IT+0x3f4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	@ (800356c <HAL_DMA_Abort_IT+0x3f8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003570 <HAL_DMA_Abort_IT+0x3fc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_DMA_Abort_IT+0x400>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_Abort_IT+0x3a2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <HAL_DMA_Abort_IT+0x404>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d132      	bne.n	800357c <HAL_DMA_Abort_IT+0x408>
 8003516:	2301      	movs	r3, #1
 8003518:	e031      	b.n	800357e <HAL_DMA_Abort_IT+0x40a>
 800351a:	bf00      	nop
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	58025408 	.word	0x58025408
 8003560:	5802541c 	.word	0x5802541c
 8003564:	58025430 	.word	0x58025430
 8003568:	58025444 	.word	0x58025444
 800356c:	58025458 	.word	0x58025458
 8003570:	5802546c 	.word	0x5802546c
 8003574:	58025480 	.word	0x58025480
 8003578:	58025494 	.word	0x58025494
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003590:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800360c:	4b67      	ldr	r3, [pc, #412]	@ (80037ac <HAL_DMA_IRQHandler+0x1ac>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a67      	ldr	r2, [pc, #412]	@ (80037b0 <HAL_DMA_IRQHandler+0x1b0>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5f      	ldr	r2, [pc, #380]	@ (80037b4 <HAL_DMA_IRQHandler+0x1b4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a5d      	ldr	r2, [pc, #372]	@ (80037b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5c      	ldr	r2, [pc, #368]	@ (80037bc <HAL_DMA_IRQHandler+0x1bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5a      	ldr	r2, [pc, #360]	@ (80037c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a59      	ldr	r2, [pc, #356]	@ (80037c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a57      	ldr	r2, [pc, #348]	@ (80037c8 <HAL_DMA_IRQHandler+0x1c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a56      	ldr	r2, [pc, #344]	@ (80037cc <HAL_DMA_IRQHandler+0x1cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a54      	ldr	r2, [pc, #336]	@ (80037d0 <HAL_DMA_IRQHandler+0x1d0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a53      	ldr	r2, [pc, #332]	@ (80037d4 <HAL_DMA_IRQHandler+0x1d4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a51      	ldr	r2, [pc, #324]	@ (80037d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a50      	ldr	r2, [pc, #320]	@ (80037dc <HAL_DMA_IRQHandler+0x1dc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4e      	ldr	r2, [pc, #312]	@ (80037e0 <HAL_DMA_IRQHandler+0x1e0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a4d      	ldr	r2, [pc, #308]	@ (80037e4 <HAL_DMA_IRQHandler+0x1e4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a4b      	ldr	r2, [pc, #300]	@ (80037e8 <HAL_DMA_IRQHandler+0x1e8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4a      	ldr	r2, [pc, #296]	@ (80037ec <HAL_DMA_IRQHandler+0x1ec>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xd2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a48      	ldr	r2, [pc, #288]	@ (80037f0 <HAL_DMA_IRQHandler+0x1f0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_IRQHandler+0xd6>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_IRQHandler+0xd8>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 842b 	beq.w	8003f34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2208      	movs	r2, #8
 80036e8:	409a      	lsls	r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a2 	beq.w	8003838 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <HAL_DMA_IRQHandler+0x1b4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d04a      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d045      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <HAL_DMA_IRQHandler+0x1bc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d040      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a28      	ldr	r2, [pc, #160]	@ (80037c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d036      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_DMA_IRQHandler+0x1c8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d031      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <HAL_DMA_IRQHandler+0x1cc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02c      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <HAL_DMA_IRQHandler+0x1d0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d027      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a22      	ldr	r2, [pc, #136]	@ (80037d4 <HAL_DMA_IRQHandler+0x1d4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d022      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a21      	ldr	r2, [pc, #132]	@ (80037d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d01d      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1f      	ldr	r2, [pc, #124]	@ (80037dc <HAL_DMA_IRQHandler+0x1dc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1e      	ldr	r2, [pc, #120]	@ (80037e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <HAL_DMA_IRQHandler+0x1e4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <HAL_DMA_IRQHandler+0x1e8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a19      	ldr	r2, [pc, #100]	@ (80037ec <HAL_DMA_IRQHandler+0x1ec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_DMA_IRQHandler+0x194>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a18      	ldr	r2, [pc, #96]	@ (80037f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d12f      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x1f4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e02e      	b.n	8003808 <HAL_DMA_IRQHandler+0x208>
 80037aa:	bf00      	nop
 80037ac:	24000000 	.word	0x24000000
 80037b0:	1b4e81b5 	.word	0x1b4e81b5
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2208      	movs	r2, #8
 8003826:	409a      	lsls	r2, r3
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003830:	f043 0201 	orr.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06e      	beq.n	800392c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d04a      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a67      	ldr	r2, [pc, #412]	@ (80039fc <HAL_DMA_IRQHandler+0x3fc>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d045      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a66      	ldr	r2, [pc, #408]	@ (8003a00 <HAL_DMA_IRQHandler+0x400>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d040      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a64      	ldr	r2, [pc, #400]	@ (8003a04 <HAL_DMA_IRQHandler+0x404>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d03b      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a63      	ldr	r2, [pc, #396]	@ (8003a08 <HAL_DMA_IRQHandler+0x408>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d036      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a61      	ldr	r2, [pc, #388]	@ (8003a0c <HAL_DMA_IRQHandler+0x40c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d031      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a60      	ldr	r2, [pc, #384]	@ (8003a10 <HAL_DMA_IRQHandler+0x410>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d02c      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a5e      	ldr	r2, [pc, #376]	@ (8003a14 <HAL_DMA_IRQHandler+0x414>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d027      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a18 <HAL_DMA_IRQHandler+0x418>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5b      	ldr	r2, [pc, #364]	@ (8003a1c <HAL_DMA_IRQHandler+0x41c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01d      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a20 <HAL_DMA_IRQHandler+0x420>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d018      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_DMA_IRQHandler+0x424>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a57      	ldr	r2, [pc, #348]	@ (8003a28 <HAL_DMA_IRQHandler+0x428>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a55      	ldr	r2, [pc, #340]	@ (8003a2c <HAL_DMA_IRQHandler+0x42c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a54      	ldr	r2, [pc, #336]	@ (8003a30 <HAL_DMA_IRQHandler+0x430>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2ee>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a52      	ldr	r2, [pc, #328]	@ (8003a34 <HAL_DMA_IRQHandler+0x434>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10a      	bne.n	8003904 <HAL_DMA_IRQHandler+0x304>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e003      	b.n	800390c <HAL_DMA_IRQHandler+0x30c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	f043 0202 	orr.w	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2204      	movs	r2, #4
 8003936:	409a      	lsls	r2, r3
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 808f 	beq.w	8003a60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2c      	ldr	r2, [pc, #176]	@ (80039f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <HAL_DMA_IRQHandler+0x3fc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a29      	ldr	r2, [pc, #164]	@ (8003a00 <HAL_DMA_IRQHandler+0x400>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a27      	ldr	r2, [pc, #156]	@ (8003a04 <HAL_DMA_IRQHandler+0x404>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a26      	ldr	r2, [pc, #152]	@ (8003a08 <HAL_DMA_IRQHandler+0x408>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a24      	ldr	r2, [pc, #144]	@ (8003a0c <HAL_DMA_IRQHandler+0x40c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a23      	ldr	r2, [pc, #140]	@ (8003a10 <HAL_DMA_IRQHandler+0x410>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <HAL_DMA_IRQHandler+0x414>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a20      	ldr	r2, [pc, #128]	@ (8003a18 <HAL_DMA_IRQHandler+0x418>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <HAL_DMA_IRQHandler+0x41c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <HAL_DMA_IRQHandler+0x420>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a24 <HAL_DMA_IRQHandler+0x424>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <HAL_DMA_IRQHandler+0x428>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a18      	ldr	r2, [pc, #96]	@ (8003a2c <HAL_DMA_IRQHandler+0x42c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <HAL_DMA_IRQHandler+0x430>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x3e2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_DMA_IRQHandler+0x434>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d12a      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x438>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e023      	b.n	8003a40 <HAL_DMA_IRQHandler+0x440>
 80039f8:	40020010 	.word	0x40020010
 80039fc:	40020028 	.word	0x40020028
 8003a00:	40020040 	.word	0x40020040
 8003a04:	40020058 	.word	0x40020058
 8003a08:	40020070 	.word	0x40020070
 8003a0c:	40020088 	.word	0x40020088
 8003a10:	400200a0 	.word	0x400200a0
 8003a14:	400200b8 	.word	0x400200b8
 8003a18:	40020410 	.word	0x40020410
 8003a1c:	40020428 	.word	0x40020428
 8003a20:	40020440 	.word	0x40020440
 8003a24:	40020458 	.word	0x40020458
 8003a28:	40020470 	.word	0x40020470
 8003a2c:	40020488 	.word	0x40020488
 8003a30:	400204a0 	.word	0x400204a0
 8003a34:	400204b8 	.word	0x400204b8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2210      	movs	r2, #16
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80a6 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a85      	ldr	r2, [pc, #532]	@ (8003c90 <HAL_DMA_IRQHandler+0x690>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d04a      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a83      	ldr	r2, [pc, #524]	@ (8003c94 <HAL_DMA_IRQHandler+0x694>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d045      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a82      	ldr	r2, [pc, #520]	@ (8003c98 <HAL_DMA_IRQHandler+0x698>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a80      	ldr	r2, [pc, #512]	@ (8003c9c <HAL_DMA_IRQHandler+0x69c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d036      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d031      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d02c      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cac <HAL_DMA_IRQHandler+0x6ac>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d027      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a79      	ldr	r2, [pc, #484]	@ (8003cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a77      	ldr	r2, [pc, #476]	@ (8003cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01d      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a76      	ldr	r2, [pc, #472]	@ (8003cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a74      	ldr	r2, [pc, #464]	@ (8003cbc <HAL_DMA_IRQHandler+0x6bc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a73      	ldr	r2, [pc, #460]	@ (8003cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a71      	ldr	r2, [pc, #452]	@ (8003cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a70      	ldr	r2, [pc, #448]	@ (8003cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x516>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ccc <HAL_DMA_IRQHandler+0x6cc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10a      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x52c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e009      	b.n	8003b40 <HAL_DMA_IRQHandler+0x540>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d03e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d108      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d024      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
 8003b80:	e01f      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
 8003b92:	e016      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0208 	bic.w	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2220      	movs	r2, #32
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8110 	beq.w	8003df8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003c90 <HAL_DMA_IRQHandler+0x690>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d04a      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c94 <HAL_DMA_IRQHandler+0x694>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d045      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a29      	ldr	r2, [pc, #164]	@ (8003c98 <HAL_DMA_IRQHandler+0x698>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d040      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <HAL_DMA_IRQHandler+0x69c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d03b      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d036      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02c      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <HAL_DMA_IRQHandler+0x6ac>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d027      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d022      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01d      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d018      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <HAL_DMA_IRQHandler+0x6bc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d009      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	@ (8003cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x678>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <HAL_DMA_IRQHandler+0x6cc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d12b      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x6d0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e02a      	b.n	8003ce4 <HAL_DMA_IRQHandler+0x6e4>
 8003c8e:	bf00      	nop
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8087 	beq.w	8003df8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d139      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0216 	bic.w	r2, r2, #22
 8003d14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x736>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0208 	bic.w	r2, r2, #8
 8003d44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	223f      	movs	r2, #63	@ 0x3f
 8003d50:	409a      	lsls	r2, r3
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 834a 	beq.w	8004404 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
          }
          return;
 8003d78:	e344      	b.n	8004404 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02c      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
 8003da6:	e027      	b.n	8003df8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e01e      	b.n	8003df8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0210 	bic.w	r2, r2, #16
 8003dd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8306 	beq.w	800440e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8088 	beq.w	8003f20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2204      	movs	r2, #4
 8003e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004008 <HAL_DMA_IRQHandler+0xa08>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d04a      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	@ (800400c <HAL_DMA_IRQHandler+0xa0c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d045      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a77      	ldr	r2, [pc, #476]	@ (8004010 <HAL_DMA_IRQHandler+0xa10>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d040      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a76      	ldr	r2, [pc, #472]	@ (8004014 <HAL_DMA_IRQHandler+0xa14>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d03b      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a74      	ldr	r2, [pc, #464]	@ (8004018 <HAL_DMA_IRQHandler+0xa18>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d036      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a73      	ldr	r2, [pc, #460]	@ (800401c <HAL_DMA_IRQHandler+0xa1c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d031      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a71      	ldr	r2, [pc, #452]	@ (8004020 <HAL_DMA_IRQHandler+0xa20>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a70      	ldr	r2, [pc, #448]	@ (8004024 <HAL_DMA_IRQHandler+0xa24>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d027      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_DMA_IRQHandler+0xa28>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d022      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6d      	ldr	r2, [pc, #436]	@ (800402c <HAL_DMA_IRQHandler+0xa2c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d01d      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6b      	ldr	r2, [pc, #428]	@ (8004030 <HAL_DMA_IRQHandler+0xa30>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d018      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004034 <HAL_DMA_IRQHandler+0xa34>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d013      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a68      	ldr	r2, [pc, #416]	@ (8004038 <HAL_DMA_IRQHandler+0xa38>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00e      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a67      	ldr	r2, [pc, #412]	@ (800403c <HAL_DMA_IRQHandler+0xa3c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_DMA_IRQHandler+0xa40>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x8b8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a64      	ldr	r2, [pc, #400]	@ (8004044 <HAL_DMA_IRQHandler+0xa44>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <HAL_DMA_IRQHandler+0x8ca>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e007      	b.n	8003eda <HAL_DMA_IRQHandler+0x8da>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d307      	bcc.n	8003ef6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f2      	bne.n	8003eda <HAL_DMA_IRQHandler+0x8da>
 8003ef4:	e000      	b.n	8003ef8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ef6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2203      	movs	r2, #3
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003f0e:	e003      	b.n	8003f18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8272 	beq.w	800440e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e26c      	b.n	800440e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a43      	ldr	r2, [pc, #268]	@ (8004048 <HAL_DMA_IRQHandler+0xa48>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a42      	ldr	r2, [pc, #264]	@ (800404c <HAL_DMA_IRQHandler+0xa4c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a40      	ldr	r2, [pc, #256]	@ (8004050 <HAL_DMA_IRQHandler+0xa50>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3f      	ldr	r2, [pc, #252]	@ (8004054 <HAL_DMA_IRQHandler+0xa54>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3d      	ldr	r2, [pc, #244]	@ (8004058 <HAL_DMA_IRQHandler+0xa58>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <HAL_DMA_IRQHandler+0xa5c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3a      	ldr	r2, [pc, #232]	@ (8004060 <HAL_DMA_IRQHandler+0xa60>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x984>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	@ (8004064 <HAL_DMA_IRQHandler+0xa64>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x988>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_DMA_IRQHandler+0x98a>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 823f 	beq.w	800440e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80cd 	beq.w	8004148 <HAL_DMA_IRQHandler+0xb48>
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80c7 	beq.w	8004148 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d049      	beq.n	8004068 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8210 	beq.w	8004408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff0:	e20a      	b.n	8004408 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8206 	beq.w	8004408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004004:	e200      	b.n	8004408 <HAL_DMA_IRQHandler+0xe08>
 8004006:	bf00      	nop
 8004008:	40020010 	.word	0x40020010
 800400c:	40020028 	.word	0x40020028
 8004010:	40020040 	.word	0x40020040
 8004014:	40020058 	.word	0x40020058
 8004018:	40020070 	.word	0x40020070
 800401c:	40020088 	.word	0x40020088
 8004020:	400200a0 	.word	0x400200a0
 8004024:	400200b8 	.word	0x400200b8
 8004028:	40020410 	.word	0x40020410
 800402c:	40020428 	.word	0x40020428
 8004030:	40020440 	.word	0x40020440
 8004034:	40020458 	.word	0x40020458
 8004038:	40020470 	.word	0x40020470
 800403c:	40020488 	.word	0x40020488
 8004040:	400204a0 	.word	0x400204a0
 8004044:	400204b8 	.word	0x400204b8
 8004048:	58025408 	.word	0x58025408
 800404c:	5802541c 	.word	0x5802541c
 8004050:	58025430 	.word	0x58025430
 8004054:	58025444 	.word	0x58025444
 8004058:	58025458 	.word	0x58025458
 800405c:	5802546c 	.word	0x5802546c
 8004060:	58025480 	.word	0x58025480
 8004064:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d160      	bne.n	8004134 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7f      	ldr	r2, [pc, #508]	@ (8004274 <HAL_DMA_IRQHandler+0xc74>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d04a      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a7d      	ldr	r2, [pc, #500]	@ (8004278 <HAL_DMA_IRQHandler+0xc78>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d045      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <HAL_DMA_IRQHandler+0xc7c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d040      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7a      	ldr	r2, [pc, #488]	@ (8004280 <HAL_DMA_IRQHandler+0xc80>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d03b      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a79      	ldr	r2, [pc, #484]	@ (8004284 <HAL_DMA_IRQHandler+0xc84>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d036      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a77      	ldr	r2, [pc, #476]	@ (8004288 <HAL_DMA_IRQHandler+0xc88>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d031      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a76      	ldr	r2, [pc, #472]	@ (800428c <HAL_DMA_IRQHandler+0xc8c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d02c      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a74      	ldr	r2, [pc, #464]	@ (8004290 <HAL_DMA_IRQHandler+0xc90>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d027      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a73      	ldr	r2, [pc, #460]	@ (8004294 <HAL_DMA_IRQHandler+0xc94>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d022      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a71      	ldr	r2, [pc, #452]	@ (8004298 <HAL_DMA_IRQHandler+0xc98>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01d      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a70      	ldr	r2, [pc, #448]	@ (800429c <HAL_DMA_IRQHandler+0xc9c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6e      	ldr	r2, [pc, #440]	@ (80042a0 <HAL_DMA_IRQHandler+0xca0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6d      	ldr	r2, [pc, #436]	@ (80042a4 <HAL_DMA_IRQHandler+0xca4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6b      	ldr	r2, [pc, #428]	@ (80042a8 <HAL_DMA_IRQHandler+0xca8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6a      	ldr	r2, [pc, #424]	@ (80042ac <HAL_DMA_IRQHandler+0xcac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_DMA_IRQHandler+0xb12>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a68      	ldr	r2, [pc, #416]	@ (80042b0 <HAL_DMA_IRQHandler+0xcb0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <HAL_DMA_IRQHandler+0xb24>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e007      	b.n	8004134 <HAL_DMA_IRQHandler+0xb34>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0204 	bic.w	r2, r2, #4
 8004132:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8165 	beq.w	8004408 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004146:	e15f      	b.n	8004408 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2202      	movs	r2, #2
 8004152:	409a      	lsls	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80c5 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xce8>
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80bf 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2202      	movs	r2, #2
 8004174:	409a      	lsls	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d018      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 813a 	beq.w	800440c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a0:	e134      	b.n	800440c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8130 	beq.w	800440c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041b4:	e12a      	b.n	800440c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8089 	bne.w	80042d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004274 <HAL_DMA_IRQHandler+0xc74>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d04a      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a29      	ldr	r2, [pc, #164]	@ (8004278 <HAL_DMA_IRQHandler+0xc78>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d045      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a28      	ldr	r2, [pc, #160]	@ (800427c <HAL_DMA_IRQHandler+0xc7c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d040      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a26      	ldr	r2, [pc, #152]	@ (8004280 <HAL_DMA_IRQHandler+0xc80>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d03b      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a25      	ldr	r2, [pc, #148]	@ (8004284 <HAL_DMA_IRQHandler+0xc84>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d036      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a23      	ldr	r2, [pc, #140]	@ (8004288 <HAL_DMA_IRQHandler+0xc88>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d031      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a22      	ldr	r2, [pc, #136]	@ (800428c <HAL_DMA_IRQHandler+0xc8c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d02c      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <HAL_DMA_IRQHandler+0xc90>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d027      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <HAL_DMA_IRQHandler+0xc94>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <HAL_DMA_IRQHandler+0xc98>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <HAL_DMA_IRQHandler+0xc9c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <HAL_DMA_IRQHandler+0xca0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <HAL_DMA_IRQHandler+0xca4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <HAL_DMA_IRQHandler+0xca8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <HAL_DMA_IRQHandler+0xcac>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_DMA_IRQHandler+0xc62>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <HAL_DMA_IRQHandler+0xcb0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d128      	bne.n	80042b4 <HAL_DMA_IRQHandler+0xcb4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0214 	bic.w	r2, r2, #20
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e027      	b.n	80042c4 <HAL_DMA_IRQHandler+0xcc4>
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020a 	bic.w	r2, r2, #10
 80042c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8097 	beq.w	800440c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e6:	e091      	b.n	800440c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2208      	movs	r2, #8
 80042f2:	409a      	lsls	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8088 	beq.w	800440e <HAL_DMA_IRQHandler+0xe0e>
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8082 	beq.w	800440e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a41      	ldr	r2, [pc, #260]	@ (8004414 <HAL_DMA_IRQHandler+0xe14>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d04a      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3f      	ldr	r2, [pc, #252]	@ (8004418 <HAL_DMA_IRQHandler+0xe18>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d045      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3e      	ldr	r2, [pc, #248]	@ (800441c <HAL_DMA_IRQHandler+0xe1c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d040      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3c      	ldr	r2, [pc, #240]	@ (8004420 <HAL_DMA_IRQHandler+0xe20>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d03b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3b      	ldr	r2, [pc, #236]	@ (8004424 <HAL_DMA_IRQHandler+0xe24>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d036      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a39      	ldr	r2, [pc, #228]	@ (8004428 <HAL_DMA_IRQHandler+0xe28>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a38      	ldr	r2, [pc, #224]	@ (800442c <HAL_DMA_IRQHandler+0xe2c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d02c      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a36      	ldr	r2, [pc, #216]	@ (8004430 <HAL_DMA_IRQHandler+0xe30>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d027      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <HAL_DMA_IRQHandler+0xe34>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a33      	ldr	r2, [pc, #204]	@ (8004438 <HAL_DMA_IRQHandler+0xe38>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a32      	ldr	r2, [pc, #200]	@ (800443c <HAL_DMA_IRQHandler+0xe3c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <HAL_DMA_IRQHandler+0xe40>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <HAL_DMA_IRQHandler+0xe44>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <HAL_DMA_IRQHandler+0xe48>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <HAL_DMA_IRQHandler+0xe4c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_DMA_IRQHandler+0xdaa>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <HAL_DMA_IRQHandler+0xe50>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_DMA_IRQHandler+0xdbc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 021c 	bic.w	r2, r2, #28
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e007      	b.n	80043cc <HAL_DMA_IRQHandler+0xdcc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 020e 	bic.w	r2, r2, #14
 80043ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
 8004402:	e004      	b.n	800440e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004404:	bf00      	nop
 8004406:	e002      	b.n	800440e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800440c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800440e:	3728      	adds	r7, #40	@ 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8

08004454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7f      	ldr	r2, [pc, #508]	@ (8004670 <DMA_SetConfig+0x21c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d072      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7d      	ldr	r2, [pc, #500]	@ (8004674 <DMA_SetConfig+0x220>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d06d      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7c      	ldr	r2, [pc, #496]	@ (8004678 <DMA_SetConfig+0x224>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d068      	beq.n	800455e <DMA_SetConfig+0x10a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a7a      	ldr	r2, [pc, #488]	@ (800467c <DMA_SetConfig+0x228>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d063      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a79      	ldr	r2, [pc, #484]	@ (8004680 <DMA_SetConfig+0x22c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d05e      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a77      	ldr	r2, [pc, #476]	@ (8004684 <DMA_SetConfig+0x230>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d059      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a76      	ldr	r2, [pc, #472]	@ (8004688 <DMA_SetConfig+0x234>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d054      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a74      	ldr	r2, [pc, #464]	@ (800468c <DMA_SetConfig+0x238>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04f      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a73      	ldr	r2, [pc, #460]	@ (8004690 <DMA_SetConfig+0x23c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a71      	ldr	r2, [pc, #452]	@ (8004694 <DMA_SetConfig+0x240>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a70      	ldr	r2, [pc, #448]	@ (8004698 <DMA_SetConfig+0x244>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6e      	ldr	r2, [pc, #440]	@ (800469c <DMA_SetConfig+0x248>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6d      	ldr	r2, [pc, #436]	@ (80046a0 <DMA_SetConfig+0x24c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6b      	ldr	r2, [pc, #428]	@ (80046a4 <DMA_SetConfig+0x250>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <DMA_SetConfig+0x10a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6a      	ldr	r2, [pc, #424]	@ (80046a8 <DMA_SetConfig+0x254>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <DMA_SetConfig+0x258>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <DMA_SetConfig+0x10a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a67      	ldr	r2, [pc, #412]	@ (80046b0 <DMA_SetConfig+0x25c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a65      	ldr	r2, [pc, #404]	@ (80046b4 <DMA_SetConfig+0x260>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a64      	ldr	r2, [pc, #400]	@ (80046b8 <DMA_SetConfig+0x264>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <DMA_SetConfig+0x10a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a62      	ldr	r2, [pc, #392]	@ (80046bc <DMA_SetConfig+0x268>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a61      	ldr	r2, [pc, #388]	@ (80046c0 <DMA_SetConfig+0x26c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5f      	ldr	r2, [pc, #380]	@ (80046c4 <DMA_SetConfig+0x270>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <DMA_SetConfig+0x10a>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5e      	ldr	r2, [pc, #376]	@ (80046c8 <DMA_SetConfig+0x274>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <DMA_SetConfig+0x10a>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5c      	ldr	r2, [pc, #368]	@ (80046cc <DMA_SetConfig+0x278>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <DMA_SetConfig+0x10e>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <DMA_SetConfig+0x110>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004570:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004582:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a39      	ldr	r2, [pc, #228]	@ (8004670 <DMA_SetConfig+0x21c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d04a      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a38      	ldr	r2, [pc, #224]	@ (8004674 <DMA_SetConfig+0x220>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d045      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a36      	ldr	r2, [pc, #216]	@ (8004678 <DMA_SetConfig+0x224>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d040      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a35      	ldr	r2, [pc, #212]	@ (800467c <DMA_SetConfig+0x228>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d03b      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <DMA_SetConfig+0x22c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d036      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a32      	ldr	r2, [pc, #200]	@ (8004684 <DMA_SetConfig+0x230>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d031      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a30      	ldr	r2, [pc, #192]	@ (8004688 <DMA_SetConfig+0x234>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02c      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2f      	ldr	r2, [pc, #188]	@ (800468c <DMA_SetConfig+0x238>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d027      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004690 <DMA_SetConfig+0x23c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d022      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004694 <DMA_SetConfig+0x240>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d01d      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <DMA_SetConfig+0x244>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d018      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a29      	ldr	r2, [pc, #164]	@ (800469c <DMA_SetConfig+0x248>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d013      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <DMA_SetConfig+0x24c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00e      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a26      	ldr	r2, [pc, #152]	@ (80046a4 <DMA_SetConfig+0x250>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d009      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <DMA_SetConfig+0x254>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <DMA_SetConfig+0x1d0>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <DMA_SetConfig+0x258>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <DMA_SetConfig+0x1d4>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <DMA_SetConfig+0x1d6>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d059      	beq.n	80046e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	223f      	movs	r2, #63	@ 0x3f
 8004638:	409a      	lsls	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800464c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d138      	bne.n	80046d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800466e:	e086      	b.n	800477e <DMA_SetConfig+0x32a>
 8004670:	40020010 	.word	0x40020010
 8004674:	40020028 	.word	0x40020028
 8004678:	40020040 	.word	0x40020040
 800467c:	40020058 	.word	0x40020058
 8004680:	40020070 	.word	0x40020070
 8004684:	40020088 	.word	0x40020088
 8004688:	400200a0 	.word	0x400200a0
 800468c:	400200b8 	.word	0x400200b8
 8004690:	40020410 	.word	0x40020410
 8004694:	40020428 	.word	0x40020428
 8004698:	40020440 	.word	0x40020440
 800469c:	40020458 	.word	0x40020458
 80046a0:	40020470 	.word	0x40020470
 80046a4:	40020488 	.word	0x40020488
 80046a8:	400204a0 	.word	0x400204a0
 80046ac:	400204b8 	.word	0x400204b8
 80046b0:	58025408 	.word	0x58025408
 80046b4:	5802541c 	.word	0x5802541c
 80046b8:	58025430 	.word	0x58025430
 80046bc:	58025444 	.word	0x58025444
 80046c0:	58025458 	.word	0x58025458
 80046c4:	5802546c 	.word	0x5802546c
 80046c8:	58025480 	.word	0x58025480
 80046cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
}
 80046e0:	e04d      	b.n	800477e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a29      	ldr	r2, [pc, #164]	@ (800478c <DMA_SetConfig+0x338>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d022      	beq.n	8004732 <DMA_SetConfig+0x2de>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a27      	ldr	r2, [pc, #156]	@ (8004790 <DMA_SetConfig+0x33c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01d      	beq.n	8004732 <DMA_SetConfig+0x2de>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <DMA_SetConfig+0x340>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <DMA_SetConfig+0x2de>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a24      	ldr	r2, [pc, #144]	@ (8004798 <DMA_SetConfig+0x344>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <DMA_SetConfig+0x2de>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a23      	ldr	r2, [pc, #140]	@ (800479c <DMA_SetConfig+0x348>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <DMA_SetConfig+0x2de>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <DMA_SetConfig+0x34c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <DMA_SetConfig+0x2de>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a20      	ldr	r2, [pc, #128]	@ (80047a4 <DMA_SetConfig+0x350>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <DMA_SetConfig+0x2de>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1e      	ldr	r2, [pc, #120]	@ (80047a8 <DMA_SetConfig+0x354>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <DMA_SetConfig+0x2e2>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <DMA_SetConfig+0x2e4>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d108      	bne.n	800476e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	60da      	str	r2, [r3, #12]
}
 800476c:	e007      	b.n	800477e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	58025408 	.word	0x58025408
 8004790:	5802541c 	.word	0x5802541c
 8004794:	58025430 	.word	0x58025430
 8004798:	58025444 	.word	0x58025444
 800479c:	58025458 	.word	0x58025458
 80047a0:	5802546c 	.word	0x5802546c
 80047a4:	58025480 	.word	0x58025480
 80047a8:	58025494 	.word	0x58025494

080047ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a42      	ldr	r2, [pc, #264]	@ (80048c4 <DMA_CalcBaseAndBitshift+0x118>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04a      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a41      	ldr	r2, [pc, #260]	@ (80048c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d045      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a3f      	ldr	r2, [pc, #252]	@ (80048cc <DMA_CalcBaseAndBitshift+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d040      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3e      	ldr	r2, [pc, #248]	@ (80048d0 <DMA_CalcBaseAndBitshift+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03b      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3c      	ldr	r2, [pc, #240]	@ (80048d4 <DMA_CalcBaseAndBitshift+0x128>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d036      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d031      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a39      	ldr	r2, [pc, #228]	@ (80048dc <DMA_CalcBaseAndBitshift+0x130>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a38      	ldr	r2, [pc, #224]	@ (80048e0 <DMA_CalcBaseAndBitshift+0x134>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d027      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a36      	ldr	r2, [pc, #216]	@ (80048e4 <DMA_CalcBaseAndBitshift+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d022      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a35      	ldr	r2, [pc, #212]	@ (80048e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d01d      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <DMA_CalcBaseAndBitshift+0x140>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d018      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <DMA_CalcBaseAndBitshift+0x144>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a30      	ldr	r2, [pc, #192]	@ (80048f4 <DMA_CalcBaseAndBitshift+0x148>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2f      	ldr	r2, [pc, #188]	@ (80048f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d009      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2d      	ldr	r2, [pc, #180]	@ (80048fc <DMA_CalcBaseAndBitshift+0x150>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <DMA_CalcBaseAndBitshift+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <DMA_CalcBaseAndBitshift+0x154>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <DMA_CalcBaseAndBitshift+0xac>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <DMA_CalcBaseAndBitshift+0xae>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d024      	beq.n	80048a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3b10      	subs	r3, #16
 8004866:	4a27      	ldr	r2, [pc, #156]	@ (8004904 <DMA_CalcBaseAndBitshift+0x158>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	4a24      	ldr	r2, [pc, #144]	@ (8004908 <DMA_CalcBaseAndBitshift+0x15c>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d908      	bls.n	8004898 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <DMA_CalcBaseAndBitshift+0x160>)
 800488e:	4013      	ands	r3, r2
 8004890:	1d1a      	adds	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	659a      	str	r2, [r3, #88]	@ 0x58
 8004896:	e00d      	b.n	80048b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <DMA_CalcBaseAndBitshift+0x160>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a6:	e005      	b.n	80048b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
 8004904:	aaaaaaab 	.word	0xaaaaaaab
 8004908:	0800a0bc 	.word	0x0800a0bc
 800490c:	fffffc00 	.word	0xfffffc00

08004910 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d120      	bne.n	8004966 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	2b03      	cmp	r3, #3
 800492a:	d858      	bhi.n	80049de <DMA_CheckFifoParam+0xce>
 800492c:	a201      	add	r2, pc, #4	@ (adr r2, 8004934 <DMA_CheckFifoParam+0x24>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004945 	.word	0x08004945
 8004938:	08004957 	.word	0x08004957
 800493c:	08004945 	.word	0x08004945
 8004940:	080049df 	.word	0x080049df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d048      	beq.n	80049e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004954:	e045      	b.n	80049e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800495e:	d142      	bne.n	80049e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004964:	e03f      	b.n	80049e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800496e:	d123      	bne.n	80049b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	2b03      	cmp	r3, #3
 8004976:	d838      	bhi.n	80049ea <DMA_CheckFifoParam+0xda>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <DMA_CheckFifoParam+0x70>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	08004991 	.word	0x08004991
 8004984:	08004997 	.word	0x08004997
 8004988:	08004991 	.word	0x08004991
 800498c:	080049a9 	.word	0x080049a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
        break;
 8004994:	e030      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d025      	beq.n	80049ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049a6:	e022      	b.n	80049ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049b0:	d11f      	bne.n	80049f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049b6:	e01c      	b.n	80049f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <DMA_CheckFifoParam+0xb6>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d003      	beq.n	80049cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80049c4:	e018      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ca:	e015      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00e      	beq.n	80049f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
    break;
 80049dc:	e00b      	b.n	80049f6 <DMA_CheckFifoParam+0xe6>
        break;
 80049de:	bf00      	nop
 80049e0:	e00a      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        break;
 80049e2:	bf00      	nop
 80049e4:	e008      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        break;
 80049e6:	bf00      	nop
 80049e8:	e006      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        break;
 80049ea:	bf00      	nop
 80049ec:	e004      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
        break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <DMA_CheckFifoParam+0xe8>
    break;
 80049f6:	bf00      	nop
    }
  }

  return status;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop

08004a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a38      	ldr	r2, [pc, #224]	@ (8004afc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a35      	ldr	r2, [pc, #212]	@ (8004b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01a      	beq.n	8004aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	3b08      	subs	r3, #8
 8004a78:	4a28      	ldr	r2, [pc, #160]	@ (8004b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4b26      	ldr	r3, [pc, #152]	@ (8004b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a24      	ldr	r2, [pc, #144]	@ (8004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004aa4:	e024      	b.n	8004af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3b10      	subs	r3, #16
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d806      	bhi.n	8004ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d902      	bls.n	8004ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3308      	adds	r3, #8
 8004acc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ae0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2201      	movs	r2, #1
 8004aea:	409a      	lsls	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	58025408 	.word	0x58025408
 8004b00:	5802541c 	.word	0x5802541c
 8004b04:	58025430 	.word	0x58025430
 8004b08:	58025444 	.word	0x58025444
 8004b0c:	58025458 	.word	0x58025458
 8004b10:	5802546c 	.word	0x5802546c
 8004b14:	58025480 	.word	0x58025480
 8004b18:	58025494 	.word	0x58025494
 8004b1c:	cccccccd 	.word	0xcccccccd
 8004b20:	16009600 	.word	0x16009600
 8004b24:	58025880 	.word	0x58025880
 8004b28:	aaaaaaab 	.word	0xaaaaaaab
 8004b2c:	400204b8 	.word	0x400204b8
 8004b30:	4002040f 	.word	0x4002040f
 8004b34:	10008200 	.word	0x10008200
 8004b38:	40020880 	.word	0x40020880

08004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d04a      	beq.n	8004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d847      	bhi.n	8004be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	@ (8004bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a24      	ldr	r2, [pc, #144]	@ (8004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a22      	ldr	r2, [pc, #136]	@ (8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a21      	ldr	r2, [pc, #132]	@ (8004c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	@ (8004c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1c      	ldr	r2, [pc, #112]	@ (8004c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d101      	bne.n	8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4b17      	ldr	r3, [pc, #92]	@ (8004c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	@ (8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004bc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8004bc6:	e009      	b.n	8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a11      	ldr	r2, [pc, #68]	@ (8004c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004bda:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	2201      	movs	r2, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	58025408 	.word	0x58025408
 8004bf8:	5802541c 	.word	0x5802541c
 8004bfc:	58025430 	.word	0x58025430
 8004c00:	58025444 	.word	0x58025444
 8004c04:	58025458 	.word	0x58025458
 8004c08:	5802546c 	.word	0x5802546c
 8004c0c:	58025480 	.word	0x58025480
 8004c10:	58025494 	.word	0x58025494
 8004c14:	1600963f 	.word	0x1600963f
 8004c18:	58025940 	.word	0x58025940
 8004c1c:	1000823f 	.word	0x1000823f
 8004c20:	40020940 	.word	0x40020940

08004c24 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d105      	bne.n	8004c4a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e315      	b.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e30e      	b.n	8005276 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 82fd 	bne.w	8005268 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a82      	ldr	r2, [pc, #520]	@ (8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d04a      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a81      	ldr	r2, [pc, #516]	@ (8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d045      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7f      	ldr	r2, [pc, #508]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d040      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d03b      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7c      	ldr	r2, [pc, #496]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d036      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d031      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a79      	ldr	r2, [pc, #484]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02c      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a78      	ldr	r2, [pc, #480]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d027      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a76      	ldr	r2, [pc, #472]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a75      	ldr	r2, [pc, #468]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01d      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a73      	ldr	r2, [pc, #460]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a70      	ldr	r2, [pc, #448]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6c      	ldr	r2, [pc, #432]	@ (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004d34:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	3308      	adds	r3, #8
 8004d44:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	223f      	movs	r2, #63	@ 0x3f
 8004d50:	409a      	lsls	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e018      	b.n	8004d8a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	f248 0320 	movw	r3, #32800	@ 0x8020
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d76:	3304      	adds	r3, #4
 8004d78:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2201      	movs	r2, #1
 8004d84:	409a      	lsls	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fb41 	bl	8005418 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d072      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3a      	ldr	r2, [pc, #232]	@ (8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d06d      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a39      	ldr	r2, [pc, #228]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d068      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a37      	ldr	r2, [pc, #220]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d063      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a36      	ldr	r2, [pc, #216]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d05e      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a34      	ldr	r2, [pc, #208]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d059      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a33      	ldr	r2, [pc, #204]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d054      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a31      	ldr	r2, [pc, #196]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d04f      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a30      	ldr	r2, [pc, #192]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2a      	ldr	r2, [pc, #168]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a28      	ldr	r2, [pc, #160]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a27      	ldr	r2, [pc, #156]	@ (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a25      	ldr	r2, [pc, #148]	@ (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	@ (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a19      	ldr	r2, [pc, #100]	@ (8004ee8 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d132      	bne.n	8004eec <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e031      	b.n	8004eee <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004e8a:	bf00      	nop
 8004e8c:	40020010 	.word	0x40020010
 8004e90:	40020028 	.word	0x40020028
 8004e94:	40020040 	.word	0x40020040
 8004e98:	40020058 	.word	0x40020058
 8004e9c:	40020070 	.word	0x40020070
 8004ea0:	40020088 	.word	0x40020088
 8004ea4:	400200a0 	.word	0x400200a0
 8004ea8:	400200b8 	.word	0x400200b8
 8004eac:	40020410 	.word	0x40020410
 8004eb0:	40020428 	.word	0x40020428
 8004eb4:	40020440 	.word	0x40020440
 8004eb8:	40020458 	.word	0x40020458
 8004ebc:	40020470 	.word	0x40020470
 8004ec0:	40020488 	.word	0x40020488
 8004ec4:	400204a0 	.word	0x400204a0
 8004ec8:	400204b8 	.word	0x400204b8
 8004ecc:	58025408 	.word	0x58025408
 8004ed0:	5802541c 	.word	0x5802541c
 8004ed4:	58025430 	.word	0x58025430
 8004ed8:	58025444 	.word	0x58025444
 8004edc:	58025458 	.word	0x58025458
 8004ee0:	5802546c 	.word	0x5802546c
 8004ee4:	58025480 	.word	0x58025480
 8004ee8:	58025494 	.word	0x58025494
 8004eec:	2300      	movs	r3, #0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004efa:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f0c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	@ (8005000 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a39      	ldr	r2, [pc, #228]	@ (8005004 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a38      	ldr	r2, [pc, #224]	@ (8005008 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a36      	ldr	r2, [pc, #216]	@ (800500c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	@ (8005010 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a33      	ldr	r2, [pc, #204]	@ (8005014 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a32      	ldr	r2, [pc, #200]	@ (8005018 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a30      	ldr	r2, [pc, #192]	@ (800501c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2f      	ldr	r2, [pc, #188]	@ (8005020 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005024 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2c      	ldr	r2, [pc, #176]	@ (8005028 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a27      	ldr	r2, [pc, #156]	@ (8005034 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a26      	ldr	r2, [pc, #152]	@ (8005038 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a24      	ldr	r2, [pc, #144]	@ (800503c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d043      	beq.n	8005040 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 021e 	bic.w	r2, r3, #30
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0216 	orr.w	r2, r2, #22
 8004fca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fda:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d043      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e03a      	b.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004ffe:	bf00      	nop
 8005000:	40020010 	.word	0x40020010
 8005004:	40020028 	.word	0x40020028
 8005008:	40020040 	.word	0x40020040
 800500c:	40020058 	.word	0x40020058
 8005010:	40020070 	.word	0x40020070
 8005014:	40020088 	.word	0x40020088
 8005018:	400200a0 	.word	0x400200a0
 800501c:	400200b8 	.word	0x400200b8
 8005020:	40020410 	.word	0x40020410
 8005024:	40020428 	.word	0x40020428
 8005028:	40020440 	.word	0x40020440
 800502c:	40020458 	.word	0x40020458
 8005030:	40020470 	.word	0x40020470
 8005034:	40020488 	.word	0x40020488
 8005038:	400204a0 	.word	0x400204a0
 800503c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 020e 	bic.w	r2, r3, #14
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 020a 	orr.w	r2, r2, #10
 8005052:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0204 	orr.w	r2, r2, #4
 8005072:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a81      	ldr	r2, [pc, #516]	@ (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d072      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a80      	ldr	r2, [pc, #512]	@ (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d06d      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7e      	ldr	r2, [pc, #504]	@ (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d068      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7d      	ldr	r2, [pc, #500]	@ (800528c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d063      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a7b      	ldr	r2, [pc, #492]	@ (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d05e      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a7a      	ldr	r2, [pc, #488]	@ (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d059      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a78      	ldr	r2, [pc, #480]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d054      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a77      	ldr	r2, [pc, #476]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d04f      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a75      	ldr	r2, [pc, #468]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d04a      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a74      	ldr	r2, [pc, #464]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d045      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a72      	ldr	r2, [pc, #456]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d040      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a71      	ldr	r2, [pc, #452]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03b      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6f      	ldr	r2, [pc, #444]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d036      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6e      	ldr	r2, [pc, #440]	@ (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d031      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6c      	ldr	r2, [pc, #432]	@ (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02c      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6b      	ldr	r2, [pc, #428]	@ (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d027      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a69      	ldr	r2, [pc, #420]	@ (80052c0 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a68      	ldr	r2, [pc, #416]	@ (80052c4 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a66      	ldr	r2, [pc, #408]	@ (80052c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a65      	ldr	r2, [pc, #404]	@ (80052cc <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a63      	ldr	r2, [pc, #396]	@ (80052d0 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a62      	ldr	r2, [pc, #392]	@ (80052d4 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a60      	ldr	r2, [pc, #384]	@ (80052d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a5f      	ldr	r2, [pc, #380]	@ (80052dc <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01a      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800519e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a34      	ldr	r2, [pc, #208]	@ (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d045      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a32      	ldr	r2, [pc, #200]	@ (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d040      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a31      	ldr	r2, [pc, #196]	@ (800528c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d036      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2e      	ldr	r2, [pc, #184]	@ (8005294 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d031      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005298 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02c      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2b      	ldr	r2, [pc, #172]	@ (800529c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a29      	ldr	r2, [pc, #164]	@ (80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a28      	ldr	r2, [pc, #160]	@ (80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01d      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a26      	ldr	r2, [pc, #152]	@ (80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a25      	ldr	r2, [pc, #148]	@ (80052ac <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	@ (80052b0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a22      	ldr	r2, [pc, #136]	@ (80052b4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a20      	ldr	r2, [pc, #128]	@ (80052b8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e00e      	b.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e005      	b.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40020010 	.word	0x40020010
 8005284:	40020028 	.word	0x40020028
 8005288:	40020040 	.word	0x40020040
 800528c:	40020058 	.word	0x40020058
 8005290:	40020070 	.word	0x40020070
 8005294:	40020088 	.word	0x40020088
 8005298:	400200a0 	.word	0x400200a0
 800529c:	400200b8 	.word	0x400200b8
 80052a0:	40020410 	.word	0x40020410
 80052a4:	40020428 	.word	0x40020428
 80052a8:	40020440 	.word	0x40020440
 80052ac:	40020458 	.word	0x40020458
 80052b0:	40020470 	.word	0x40020470
 80052b4:	40020488 	.word	0x40020488
 80052b8:	400204a0 	.word	0x400204a0
 80052bc:	400204b8 	.word	0x400204b8
 80052c0:	58025408 	.word	0x58025408
 80052c4:	5802541c 	.word	0x5802541c
 80052c8:	58025430 	.word	0x58025430
 80052cc:	58025444 	.word	0x58025444
 80052d0:	58025458 	.word	0x58025458
 80052d4:	5802546c 	.word	0x5802546c
 80052d8:	58025480 	.word	0x58025480
 80052dc:	58025494 	.word	0x58025494

080052e0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a39      	ldr	r2, [pc, #228]	@ (80053d8 <HAL_DMAEx_ChangeMemory+0xf8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a37      	ldr	r2, [pc, #220]	@ (80053dc <HAL_DMAEx_ChangeMemory+0xfc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a36      	ldr	r2, [pc, #216]	@ (80053e0 <HAL_DMAEx_ChangeMemory+0x100>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a34      	ldr	r2, [pc, #208]	@ (80053e4 <HAL_DMAEx_ChangeMemory+0x104>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a33      	ldr	r2, [pc, #204]	@ (80053e8 <HAL_DMAEx_ChangeMemory+0x108>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a31      	ldr	r2, [pc, #196]	@ (80053ec <HAL_DMAEx_ChangeMemory+0x10c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a30      	ldr	r2, [pc, #192]	@ (80053f0 <HAL_DMAEx_ChangeMemory+0x110>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2e      	ldr	r2, [pc, #184]	@ (80053f4 <HAL_DMAEx_ChangeMemory+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2d      	ldr	r2, [pc, #180]	@ (80053f8 <HAL_DMAEx_ChangeMemory+0x118>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2b      	ldr	r2, [pc, #172]	@ (80053fc <HAL_DMAEx_ChangeMemory+0x11c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2a      	ldr	r2, [pc, #168]	@ (8005400 <HAL_DMAEx_ChangeMemory+0x120>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a28      	ldr	r2, [pc, #160]	@ (8005404 <HAL_DMAEx_ChangeMemory+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a27      	ldr	r2, [pc, #156]	@ (8005408 <HAL_DMAEx_ChangeMemory+0x128>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a25      	ldr	r2, [pc, #148]	@ (800540c <HAL_DMAEx_ChangeMemory+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a24      	ldr	r2, [pc, #144]	@ (8005410 <HAL_DMAEx_ChangeMemory+0x130>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMAEx_ChangeMemory+0xae>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	@ (8005414 <HAL_DMAEx_ChangeMemory+0x134>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d101      	bne.n	8005392 <HAL_DMAEx_ChangeMemory+0xb2>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <HAL_DMAEx_ChangeMemory+0xb4>
 8005392:	2300      	movs	r3, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e010      	b.n	80053ca <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	611a      	str	r2, [r3, #16]
 80053b0:	e00b      	b.n	80053ca <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	60da      	str	r2, [r3, #12]
 80053c0:	e003      	b.n	80053ca <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40020010 	.word	0x40020010
 80053dc:	40020028 	.word	0x40020028
 80053e0:	40020040 	.word	0x40020040
 80053e4:	40020058 	.word	0x40020058
 80053e8:	40020070 	.word	0x40020070
 80053ec:	40020088 	.word	0x40020088
 80053f0:	400200a0 	.word	0x400200a0
 80053f4:	400200b8 	.word	0x400200b8
 80053f8:	40020410 	.word	0x40020410
 80053fc:	40020428 	.word	0x40020428
 8005400:	40020440 	.word	0x40020440
 8005404:	40020458 	.word	0x40020458
 8005408:	40020470 	.word	0x40020470
 800540c:	40020488 	.word	0x40020488
 8005410:	400204a0 	.word	0x400204a0
 8005414:	400204b8 	.word	0x400204b8

08005418 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a46      	ldr	r2, [pc, #280]	@ (8005544 <DMA_MultiBufferSetConfig+0x12c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a44      	ldr	r2, [pc, #272]	@ (8005548 <DMA_MultiBufferSetConfig+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a43      	ldr	r2, [pc, #268]	@ (800554c <DMA_MultiBufferSetConfig+0x134>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a41      	ldr	r2, [pc, #260]	@ (8005550 <DMA_MultiBufferSetConfig+0x138>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a40      	ldr	r2, [pc, #256]	@ (8005554 <DMA_MultiBufferSetConfig+0x13c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a3e      	ldr	r2, [pc, #248]	@ (8005558 <DMA_MultiBufferSetConfig+0x140>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3d      	ldr	r2, [pc, #244]	@ (800555c <DMA_MultiBufferSetConfig+0x144>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3b      	ldr	r2, [pc, #236]	@ (8005560 <DMA_MultiBufferSetConfig+0x148>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3a      	ldr	r2, [pc, #232]	@ (8005564 <DMA_MultiBufferSetConfig+0x14c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a38      	ldr	r2, [pc, #224]	@ (8005568 <DMA_MultiBufferSetConfig+0x150>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a37      	ldr	r2, [pc, #220]	@ (800556c <DMA_MultiBufferSetConfig+0x154>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a35      	ldr	r2, [pc, #212]	@ (8005570 <DMA_MultiBufferSetConfig+0x158>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a34      	ldr	r2, [pc, #208]	@ (8005574 <DMA_MultiBufferSetConfig+0x15c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a32      	ldr	r2, [pc, #200]	@ (8005578 <DMA_MultiBufferSetConfig+0x160>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a31      	ldr	r2, [pc, #196]	@ (800557c <DMA_MultiBufferSetConfig+0x164>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <DMA_MultiBufferSetConfig+0xae>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005580 <DMA_MultiBufferSetConfig+0x168>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <DMA_MultiBufferSetConfig+0xb2>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <DMA_MultiBufferSetConfig+0xb4>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d108      	bne.n	80054f2 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80054f0:	e021      	b.n	8005536 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
}
 8005502:	e018      	b.n	8005536 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d108      	bne.n	8005526 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	60da      	str	r2, [r3, #12]
}
 8005524:	e007      	b.n	8005536 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40020010 	.word	0x40020010
 8005548:	40020028 	.word	0x40020028
 800554c:	40020040 	.word	0x40020040
 8005550:	40020058 	.word	0x40020058
 8005554:	40020070 	.word	0x40020070
 8005558:	40020088 	.word	0x40020088
 800555c:	400200a0 	.word	0x400200a0
 8005560:	400200b8 	.word	0x400200b8
 8005564:	40020410 	.word	0x40020410
 8005568:	40020428 	.word	0x40020428
 800556c:	40020440 	.word	0x40020440
 8005570:	40020458 	.word	0x40020458
 8005574:	40020470 	.word	0x40020470
 8005578:	40020488 	.word	0x40020488
 800557c:	400204a0 	.word	0x400204a0
 8005580:	400204b8 	.word	0x400204b8

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005592:	4b89      	ldr	r3, [pc, #548]	@ (80057b8 <HAL_GPIO_Init+0x234>)
 8005594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005596:	e194      	b.n	80058c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2101      	movs	r1, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8186 	beq.w	80058bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d005      	beq.n	80055c8 <HAL_GPIO_Init+0x44>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d130      	bne.n	800562a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055fe:	2201      	movs	r2, #1
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0201 	and.w	r2, r3, #1
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d017      	beq.n	8005666 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	2203      	movs	r2, #3
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43db      	mvns	r3, r3
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	4013      	ands	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d123      	bne.n	80056ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	08da      	lsrs	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3208      	adds	r2, #8
 800567a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3208      	adds	r2, #8
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0203 	and.w	r2, r3, #3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80e0 	beq.w	80058bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fc:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <HAL_GPIO_Init+0x238>)
 80056fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005702:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <HAL_GPIO_Init+0x238>)
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800570c:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_GPIO_Init+0x238>)
 800570e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800571a:	4a29      	ldr	r2, [pc, #164]	@ (80057c0 <HAL_GPIO_Init+0x23c>)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3302      	adds	r3, #2
 8005722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a20      	ldr	r2, [pc, #128]	@ (80057c4 <HAL_GPIO_Init+0x240>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d052      	beq.n	80057ec <HAL_GPIO_Init+0x268>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <HAL_GPIO_Init+0x244>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_GPIO_Init+0x22e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_GPIO_Init+0x248>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02b      	beq.n	80057ae <HAL_GPIO_Init+0x22a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1d      	ldr	r2, [pc, #116]	@ (80057d0 <HAL_GPIO_Init+0x24c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d025      	beq.n	80057aa <HAL_GPIO_Init+0x226>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1c      	ldr	r2, [pc, #112]	@ (80057d4 <HAL_GPIO_Init+0x250>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <HAL_GPIO_Init+0x222>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <HAL_GPIO_Init+0x254>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d019      	beq.n	80057a2 <HAL_GPIO_Init+0x21e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_GPIO_Init+0x258>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_GPIO_Init+0x21a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a19      	ldr	r2, [pc, #100]	@ (80057e0 <HAL_GPIO_Init+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00d      	beq.n	800579a <HAL_GPIO_Init+0x216>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <HAL_GPIO_Init+0x260>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x212>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <HAL_GPIO_Init+0x264>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_GPIO_Init+0x20e>
 800578e:	2309      	movs	r3, #9
 8005790:	e02d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005792:	230a      	movs	r3, #10
 8005794:	e02b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 8005796:	2308      	movs	r3, #8
 8005798:	e029      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579a:	2307      	movs	r3, #7
 800579c:	e027      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 800579e:	2306      	movs	r3, #6
 80057a0:	e025      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a2:	2305      	movs	r3, #5
 80057a4:	e023      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057a6:	2304      	movs	r3, #4
 80057a8:	e021      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057aa:	2303      	movs	r3, #3
 80057ac:	e01f      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e01d      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e01b      	b.n	80057ee <HAL_GPIO_Init+0x26a>
 80057b6:	bf00      	nop
 80057b8:	58000080 	.word	0x58000080
 80057bc:	58024400 	.word	0x58024400
 80057c0:	58000400 	.word	0x58000400
 80057c4:	58020000 	.word	0x58020000
 80057c8:	58020400 	.word	0x58020400
 80057cc:	58020800 	.word	0x58020800
 80057d0:	58020c00 	.word	0x58020c00
 80057d4:	58021000 	.word	0x58021000
 80057d8:	58021400 	.word	0x58021400
 80057dc:	58021800 	.word	0x58021800
 80057e0:	58021c00 	.word	0x58021c00
 80057e4:	58022000 	.word	0x58022000
 80057e8:	58022400 	.word	0x58022400
 80057ec:	2300      	movs	r3, #0
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	4093      	lsls	r3, r2
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fe:	4938      	ldr	r1, [pc, #224]	@ (80058e0 <HAL_GPIO_Init+0x35c>)
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	43db      	mvns	r3, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	3301      	adds	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f ae63 	bne.w	8005598 <HAL_GPIO_Init+0x14>
  }
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	3724      	adds	r7, #36	@ 0x24
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	58000400 	.word	0x58000400

080058e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
 80058f0:	4613      	mov	r3, r2
 80058f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058f4:	787b      	ldrb	r3, [r7, #1]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005900:	e003      	b.n	800590a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005902:	887b      	ldrh	r3, [r7, #2]
 8005904:	041a      	lsls	r2, r3, #16
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	619a      	str	r2, [r3, #24]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e08b      	b.n	8005a42 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fb70 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	@ 0x24
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005968:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005978:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800598e:	609a      	str	r2, [r3, #8]
 8005990:	e006      	b.n	80059a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800599e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d108      	bne.n	80059ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b6:	605a      	str	r2, [r3, #4]
 80059b8:	e007      	b.n	80059ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a4c <HAL_I2C_Init+0x134>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69d9      	ldr	r1, [r3, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	02008000 	.word	0x02008000

08005a50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	607a      	str	r2, [r7, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	817b      	strh	r3, [r7, #10]
 8005a60:	4613      	mov	r3, r2
 8005a62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	f040 80fd 	bne.w	8005c6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2C_Master_Transmit+0x30>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e0f6      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a88:	f7fb fdea 	bl	8001660 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2319      	movs	r3, #25
 8005a94:	2201      	movs	r2, #1
 8005a96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fb72 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0e1      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2221      	movs	r2, #33	@ 0x21
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	893a      	ldrh	r2, [r7, #8]
 8005aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2bff      	cmp	r3, #255	@ 0xff
 8005ada:	d906      	bls.n	8005aea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	22ff      	movs	r2, #255	@ 0xff
 8005ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ae2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e007      	b.n	8005afa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005af4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005af8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d024      	beq.n	8005b4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	781a      	ldrb	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	8979      	ldrh	r1, [r7, #10]
 8005b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c78 <HAL_I2C_Master_Transmit+0x228>)
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fd6d 	bl	8006624 <I2C_TransferConfig>
 8005b4a:	e066      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	8979      	ldrh	r1, [r7, #10]
 8005b54:	4b48      	ldr	r3, [pc, #288]	@ (8005c78 <HAL_I2C_Master_Transmit+0x228>)
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fd62 	bl	8006624 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b60:	e05b      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fb65 	bl	8006236 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e07b      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d034      	beq.n	8005c1a <HAL_I2C_Master_Transmit+0x1ca>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d130      	bne.n	8005c1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2180      	movs	r1, #128	@ 0x80
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fade 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e04d      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2bff      	cmp	r3, #255	@ 0xff
 8005bda:	d90e      	bls.n	8005bfa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	22ff      	movs	r2, #255	@ 0xff
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	8979      	ldrh	r1, [r7, #10]
 8005bea:	2300      	movs	r3, #0
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fd16 	bl	8006624 <I2C_TransferConfig>
 8005bf8:	e00f      	b.n	8005c1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fd05 	bl	8006624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d19e      	bne.n	8005b62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	6a39      	ldr	r1, [r7, #32]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fb4b 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e01a      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6859      	ldr	r1, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <HAL_I2C_Master_Transmit+0x22c>)
 8005c4c:	400b      	ands	r3, r1
 8005c4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	80002000 	.word	0x80002000
 8005c7c:	fe00e800 	.word	0xfe00e800

08005c80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	607a      	str	r2, [r7, #4]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	817b      	strh	r3, [r7, #10]
 8005c90:	4613      	mov	r3, r2
 8005c92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	f040 80db 	bne.w	8005e58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_I2C_Master_Receive+0x30>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e0d4      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fb fcd2 	bl	8001660 <HAL_GetTick>
 8005cbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	2319      	movs	r3, #25
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa5a 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e0bf      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2222      	movs	r2, #34	@ 0x22
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	893a      	ldrh	r2, [r7, #8]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2bff      	cmp	r3, #255	@ 0xff
 8005d0a:	d90e      	bls.n	8005d2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	22ff      	movs	r2, #255	@ 0xff
 8005d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	8979      	ldrh	r1, [r7, #10]
 8005d1a:	4b52      	ldr	r3, [pc, #328]	@ (8005e64 <HAL_I2C_Master_Receive+0x1e4>)
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fc7e 	bl	8006624 <I2C_TransferConfig>
 8005d28:	e06d      	b.n	8005e06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	8979      	ldrh	r1, [r7, #10]
 8005d3c:	4b49      	ldr	r3, [pc, #292]	@ (8005e64 <HAL_I2C_Master_Receive+0x1e4>)
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fc6d 	bl	8006624 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d4a:	e05c      	b.n	8005e06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	6a39      	ldr	r1, [r7, #32]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fafb 	bl	800634c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e07c      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d034      	beq.n	8005e06 <HAL_I2C_Master_Receive+0x186>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d130      	bne.n	8005e06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2200      	movs	r2, #0
 8005dac:	2180      	movs	r1, #128	@ 0x80
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f9e8 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e04d      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2bff      	cmp	r3, #255	@ 0xff
 8005dc6:	d90e      	bls.n	8005de6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	@ 0xff
 8005dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	8979      	ldrh	r1, [r7, #10]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fc20 	bl	8006624 <I2C_TransferConfig>
 8005de4:	e00f      	b.n	8005e06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	8979      	ldrh	r1, [r7, #10]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fc0f 	bl	8006624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d19d      	bne.n	8005d4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	6a39      	ldr	r1, [r7, #32]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fa55 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e01a      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b0c      	ldr	r3, [pc, #48]	@ (8005e68 <HAL_I2C_Master_Receive+0x1e8>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e000      	b.n	8005e5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
  }
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	80002400 	.word	0x80002400
 8005e68:	fe00e800 	.word	0xfe00e800

08005e6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	817b      	strh	r3, [r7, #10]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	813b      	strh	r3, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 80f9 	bne.w	8006086 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_I2C_Mem_Write+0x34>
 8005e9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d105      	bne.n	8005eac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0ed      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_I2C_Mem_Write+0x4e>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e0e6      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ec2:	f7fb fbcd 	bl	8001660 <HAL_GetTick>
 8005ec6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2319      	movs	r3, #25
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f955 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0d1      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2221      	movs	r2, #33	@ 0x21
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2240      	movs	r2, #64	@ 0x40
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f0c:	88f8      	ldrh	r0, [r7, #6]
 8005f0e:	893a      	ldrh	r2, [r7, #8]
 8005f10:	8979      	ldrh	r1, [r7, #10]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f8b9 	bl	8006094 <I2C_RequestMemoryWrite>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0a9      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2bff      	cmp	r3, #255	@ 0xff
 8005f3c:	d90e      	bls.n	8005f5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	22ff      	movs	r2, #255	@ 0xff
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	8979      	ldrh	r1, [r7, #10]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fb65 	bl	8006624 <I2C_TransferConfig>
 8005f5a:	e00f      	b.n	8005f7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fb54 	bl	8006624 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f958 	bl	8006236 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e07b      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d034      	beq.n	8006034 <HAL_I2C_Mem_Write+0x1c8>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d130      	bne.n	8006034 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f8d1 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e04d      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2bff      	cmp	r3, #255	@ 0xff
 8005ff4:	d90e      	bls.n	8006014 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	22ff      	movs	r2, #255	@ 0xff
 8005ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006000:	b2da      	uxtb	r2, r3
 8006002:	8979      	ldrh	r1, [r7, #10]
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fb09 	bl	8006624 <I2C_TransferConfig>
 8006012:	e00f      	b.n	8006034 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	b2da      	uxtb	r2, r3
 8006024:	8979      	ldrh	r1, [r7, #10]
 8006026:	2300      	movs	r3, #0
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 faf8 	bl	8006624 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d19e      	bne.n	8005f7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f93e 	bl	80062c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e01a      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <HAL_I2C_Mem_Write+0x224>)
 8006066:	400b      	ands	r3, r1
 8006068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	fe00e800 	.word	0xfe00e800

08006094 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	461a      	mov	r2, r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	817b      	strh	r3, [r7, #10]
 80060a6:	460b      	mov	r3, r1
 80060a8:	813b      	strh	r3, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	8979      	ldrh	r1, [r7, #10]
 80060b4:	4b20      	ldr	r3, [pc, #128]	@ (8006138 <I2C_RequestMemoryWrite+0xa4>)
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fab1 	bl	8006624 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	69b9      	ldr	r1, [r7, #24]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f8b5 	bl	8006236 <I2C_WaitOnTXISFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e02c      	b.n	8006130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d105      	bne.n	80060e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060dc:	893b      	ldrh	r3, [r7, #8]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80060e6:	e015      	b.n	8006114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060e8:	893b      	ldrh	r3, [r7, #8]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	69b9      	ldr	r1, [r7, #24]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 f89b 	bl	8006236 <I2C_WaitOnTXISFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e012      	b.n	8006130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800610a:	893b      	ldrh	r3, [r7, #8]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	2200      	movs	r2, #0
 800611c:	2180      	movs	r1, #128	@ 0x80
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f830 	bl	8006184 <I2C_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	80002000 	.word	0x80002000

0800613c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d103      	bne.n	800615a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d007      	beq.n	8006178 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	619a      	str	r2, [r3, #24]
  }
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006194:	e03b      	b.n	800620e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f962 	bl	8006464 <I2C_IsErrorOccurred>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e041      	b.n	800622e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d02d      	beq.n	800620e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fb fa55 	bl	8001660 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d122      	bne.n	800620e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d113      	bne.n	800620e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e00f      	b.n	800622e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699a      	ldr	r2, [r3, #24]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	bf0c      	ite	eq
 800621e:	2301      	moveq	r3, #1
 8006220:	2300      	movne	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	429a      	cmp	r2, r3
 800622a:	d0b4      	beq.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006242:	e033      	b.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f90b 	bl	8006464 <I2C_IsErrorOccurred>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e031      	b.n	80062bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625e:	d025      	beq.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006260:	f7fb f9fe 	bl	8001660 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	d302      	bcc.n	8006276 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11a      	bne.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b02      	cmp	r3, #2
 8006282:	d013      	beq.n	80062ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e007      	b.n	80062bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d1c4      	bne.n	8006244 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d0:	e02f      	b.n	8006332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f8c4 	bl	8006464 <I2C_IsErrorOccurred>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e02d      	b.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fb f9bb 	bl	8001660 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d11a      	bne.n	8006332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d013      	beq.n	8006332 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e007      	b.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d1c8      	bne.n	80062d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800635c:	e071      	b.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f87e 	bl	8006464 <I2C_IsErrorOccurred>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b20      	cmp	r3, #32
 800637e:	d13b      	bne.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d138      	bne.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d105      	bne.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	d121      	bne.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2210      	movs	r2, #16
 80063b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2204      	movs	r2, #4
 80063ba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2220      	movs	r2, #32
 80063c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b24      	ldr	r3, [pc, #144]	@ (8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80063d0:	400b      	ands	r3, r1
 80063d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	75fb      	strb	r3, [r7, #23]
 80063f0:	e002      	b.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80063f8:	f7fb f932 	bl	8001660 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d119      	bne.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d00f      	beq.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d002      	beq.n	8006456 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006450:	7dfb      	ldrb	r3, [r7, #23]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d083      	beq.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	fe00e800 	.word	0xfe00e800

08006464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	@ 0x28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d068      	beq.n	8006562 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2210      	movs	r2, #16
 8006496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006498:	e049      	b.n	800652e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d045      	beq.n	800652e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fb f8dd 	bl	8001660 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_IsErrorOccurred+0x54>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d13a      	bne.n	800652e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064da:	d121      	bne.n	8006520 <I2C_IsErrorOccurred+0xbc>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064e2:	d01d      	beq.n	8006520 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d01a      	beq.n	8006520 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064fa:	f7fb f8b1 	bl	8001660 <HAL_GetTick>
 80064fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006500:	e00e      	b.n	8006520 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006502:	f7fb f8ad 	bl	8001660 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b19      	cmp	r3, #25
 800650e:	d907      	bls.n	8006520 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800651e:	e006      	b.n	800652e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d1e9      	bne.n	8006502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b20      	cmp	r3, #32
 800653a:	d003      	beq.n	8006544 <I2C_IsErrorOccurred+0xe0>
 800653c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0aa      	beq.n	800649a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006548:	2b00      	cmp	r3, #0
 800654a:	d103      	bne.n	8006554 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2220      	movs	r2, #32
 8006552:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	f043 0308 	orr.w	r3, r3, #8
 800659c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80065d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01c      	beq.n	8006612 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff fdaf 	bl	800613c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6859      	ldr	r1, [r3, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006620 <I2C_IsErrorOccurred+0x1bc>)
 80065ea:	400b      	ands	r3, r1
 80065ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006616:	4618      	mov	r0, r3
 8006618:	3728      	adds	r7, #40	@ 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	fe00e800 	.word	0xfe00e800

08006624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	607b      	str	r3, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	4613      	mov	r3, r2
 8006634:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006636:	897b      	ldrh	r3, [r7, #10]
 8006638:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800663c:	7a7b      	ldrb	r3, [r7, #9]
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006644:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	4313      	orrs	r3, r2
 800664e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006652:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	0d5b      	lsrs	r3, r3, #21
 800665e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006662:	4b08      	ldr	r3, [pc, #32]	@ (8006684 <I2C_TransferConfig+0x60>)
 8006664:	430b      	orrs	r3, r1
 8006666:	43db      	mvns	r3, r3
 8006668:	ea02 0103 	and.w	r1, r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	03ff63ff 	.word	0x03ff63ff

08006688 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b20      	cmp	r3, #32
 800669c:	d138      	bne.n	8006710 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e032      	b.n	8006712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	@ 0x24
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b20      	cmp	r3, #32
 8006732:	d139      	bne.n	80067a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800673e:	2302      	movs	r3, #2
 8006740:	e033      	b.n	80067aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2224      	movs	r2, #36	@ 0x24
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006770:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067c0:	4b19      	ldr	r3, [pc, #100]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d00a      	beq.n	80067e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80067cc:	4b16      	ldr	r3, [pc, #88]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d001      	beq.n	80067de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e01f      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e01d      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80067e2:	4b11      	ldr	r3, [pc, #68]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f023 0207 	bic.w	r2, r3, #7
 80067ea:	490f      	ldr	r1, [pc, #60]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80067f2:	f7fa ff35 	bl	8001660 <HAL_GetTick>
 80067f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80067f8:	e009      	b.n	800680e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80067fa:	f7fa ff31 	bl	8001660 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006808:	d901      	bls.n	800680e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e007      	b.n	800681e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800680e:	4b06      	ldr	r3, [pc, #24]	@ (8006828 <HAL_PWREx_ConfigSupply+0x70>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681a:	d1ee      	bne.n	80067fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	58024800 	.word	0x58024800

0800682c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	@ 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f000 bc48 	b.w	80070d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8088 	beq.w	800695e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800684e:	4b99      	ldr	r3, [pc, #612]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006858:	4b96      	ldr	r3, [pc, #600]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	2b10      	cmp	r3, #16
 8006862:	d007      	beq.n	8006874 <HAL_RCC_OscConfig+0x48>
 8006864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006866:	2b18      	cmp	r3, #24
 8006868:	d111      	bne.n	800688e <HAL_RCC_OscConfig+0x62>
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d10c      	bne.n	800688e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006874:	4b8f      	ldr	r3, [pc, #572]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d06d      	beq.n	800695c <HAL_RCC_OscConfig+0x130>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d169      	bne.n	800695c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f000 bc21 	b.w	80070d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d106      	bne.n	80068a6 <HAL_RCC_OscConfig+0x7a>
 8006898:	4b86      	ldr	r3, [pc, #536]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a85      	ldr	r2, [pc, #532]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 800689e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e02e      	b.n	8006904 <HAL_RCC_OscConfig+0xd8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_RCC_OscConfig+0x9c>
 80068ae:	4b81      	ldr	r3, [pc, #516]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a80      	ldr	r2, [pc, #512]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a7d      	ldr	r2, [pc, #500]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e01d      	b.n	8006904 <HAL_RCC_OscConfig+0xd8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068d0:	d10c      	bne.n	80068ec <HAL_RCC_OscConfig+0xc0>
 80068d2:	4b78      	ldr	r3, [pc, #480]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a77      	ldr	r2, [pc, #476]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	4b75      	ldr	r3, [pc, #468]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a74      	ldr	r2, [pc, #464]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e00b      	b.n	8006904 <HAL_RCC_OscConfig+0xd8>
 80068ec:	4b71      	ldr	r3, [pc, #452]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a70      	ldr	r2, [pc, #448]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b6e      	ldr	r3, [pc, #440]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6d      	ldr	r2, [pc, #436]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80068fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d013      	beq.n	8006934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690c:	f7fa fea8 	bl	8001660 <HAL_GetTick>
 8006910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006914:	f7fa fea4 	bl	8001660 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b64      	cmp	r3, #100	@ 0x64
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e3d4      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006926:	4b63      	ldr	r3, [pc, #396]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0f0      	beq.n	8006914 <HAL_RCC_OscConfig+0xe8>
 8006932:	e014      	b.n	800695e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006934:	f7fa fe94 	bl	8001660 <HAL_GetTick>
 8006938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800693c:	f7fa fe90 	bl	8001660 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b64      	cmp	r3, #100	@ 0x64
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e3c0      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800694e:	4b59      	ldr	r3, [pc, #356]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x110>
 800695a:	e000      	b.n	800695e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800695c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 80ca 	beq.w	8006b00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800696c:	4b51      	ldr	r3, [pc, #324]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006974:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006976:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_RCC_OscConfig+0x166>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b18      	cmp	r3, #24
 8006986:	d156      	bne.n	8006a36 <HAL_RCC_OscConfig+0x20a>
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d151      	bne.n	8006a36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006992:	4b48      	ldr	r3, [pc, #288]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_RCC_OscConfig+0x17e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e392      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069aa:	4b42      	ldr	r3, [pc, #264]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 0219 	bic.w	r2, r3, #25
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	493f      	ldr	r1, [pc, #252]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fa fe50 	bl	8001660 <HAL_GetTick>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c4:	f7fa fe4c 	bl	8001660 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e37c      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069d6:	4b37      	ldr	r3, [pc, #220]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069e2:	f7fa fe6d 	bl	80016c0 <HAL_GetREVID>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d817      	bhi.n	8006a20 <HAL_RCC_OscConfig+0x1f4>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b40      	cmp	r3, #64	@ 0x40
 80069f6:	d108      	bne.n	8006a0a <HAL_RCC_OscConfig+0x1de>
 80069f8:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a00:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a08:	e07a      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	031b      	lsls	r3, r3, #12
 8006a18:	4926      	ldr	r1, [pc, #152]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a1e:	e06f      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a20:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	061b      	lsls	r3, r3, #24
 8006a2e:	4921      	ldr	r1, [pc, #132]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a34:	e064      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d047      	beq.n	8006ace <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f023 0219 	bic.w	r2, r3, #25
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	491a      	ldr	r1, [pc, #104]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fa fe06 	bl	8001660 <HAL_GetTick>
 8006a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a58:	f7fa fe02 	bl	8001660 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e332      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a76:	f7fa fe23 	bl	80016c0 <HAL_GetREVID>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d819      	bhi.n	8006ab8 <HAL_RCC_OscConfig+0x28c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	d108      	bne.n	8006a9e <HAL_RCC_OscConfig+0x272>
 8006a8c:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006a94:	4a07      	ldr	r2, [pc, #28]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a9a:	6053      	str	r3, [r2, #4]
 8006a9c:	e030      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
 8006a9e:	4b05      	ldr	r3, [pc, #20]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	031b      	lsls	r3, r3, #12
 8006aac:	4901      	ldr	r1, [pc, #4]	@ (8006ab4 <HAL_RCC_OscConfig+0x288>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	604b      	str	r3, [r1, #4]
 8006ab2:	e025      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
 8006ab4:	58024400 	.word	0x58024400
 8006ab8:	4b9a      	ldr	r3, [pc, #616]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	061b      	lsls	r3, r3, #24
 8006ac6:	4997      	ldr	r1, [pc, #604]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	604b      	str	r3, [r1, #4]
 8006acc:	e018      	b.n	8006b00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ace:	4b95      	ldr	r3, [pc, #596]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a94      	ldr	r2, [pc, #592]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ada:	f7fa fdc1 	bl	8001660 <HAL_GetTick>
 8006ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ae0:	e008      	b.n	8006af4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae2:	f7fa fdbd 	bl	8001660 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e2ed      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af4:	4b8b      	ldr	r3, [pc, #556]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1f0      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80a9 	beq.w	8006c60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0e:	4b85      	ldr	r3, [pc, #532]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b18:	4b82      	ldr	r3, [pc, #520]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d007      	beq.n	8006b34 <HAL_RCC_OscConfig+0x308>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b18      	cmp	r3, #24
 8006b28:	d13a      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x374>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d135      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b34:	4b7b      	ldr	r3, [pc, #492]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_RCC_OscConfig+0x320>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	2b80      	cmp	r3, #128	@ 0x80
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e2c1      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b4c:	f7fa fdb8 	bl	80016c0 <HAL_GetREVID>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d817      	bhi.n	8006b8a <HAL_RCC_OscConfig+0x35e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d108      	bne.n	8006b74 <HAL_RCC_OscConfig+0x348>
 8006b62:	4b70      	ldr	r3, [pc, #448]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b72:	e075      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b74:	4b6b      	ldr	r3, [pc, #428]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	069b      	lsls	r3, r3, #26
 8006b82:	4968      	ldr	r1, [pc, #416]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b88:	e06a      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b8a:	4b66      	ldr	r3, [pc, #408]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	4962      	ldr	r1, [pc, #392]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b9e:	e05f      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d042      	beq.n	8006c2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a5d      	ldr	r2, [pc, #372]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fa fd54 	bl	8001660 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006bbc:	f7fa fd50 	bl	8001660 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e280      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bce:	4b55      	ldr	r3, [pc, #340]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bda:	f7fa fd71 	bl	80016c0 <HAL_GetREVID>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d817      	bhi.n	8006c18 <HAL_RCC_OscConfig+0x3ec>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d108      	bne.n	8006c02 <HAL_RCC_OscConfig+0x3d6>
 8006bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6053      	str	r3, [r2, #4]
 8006c00:	e02e      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
 8006c02:	4b48      	ldr	r3, [pc, #288]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	069b      	lsls	r3, r3, #26
 8006c10:	4944      	ldr	r1, [pc, #272]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
 8006c16:	e023      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
 8006c18:	4b42      	ldr	r3, [pc, #264]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	061b      	lsls	r3, r3, #24
 8006c26:	493f      	ldr	r1, [pc, #252]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60cb      	str	r3, [r1, #12]
 8006c2c:	e018      	b.n	8006c60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a3c      	ldr	r2, [pc, #240]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3a:	f7fa fd11 	bl	8001660 <HAL_GetTick>
 8006c3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006c42:	f7fa fd0d 	bl	8001660 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e23d      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c54:	4b33      	ldr	r3, [pc, #204]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f0      	bne.n	8006c42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d036      	beq.n	8006cda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d019      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c74:	4b2b      	ldr	r3, [pc, #172]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c78:	4a2a      	ldr	r2, [pc, #168]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c80:	f7fa fcee 	bl	8001660 <HAL_GetTick>
 8006c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c88:	f7fa fcea 	bl	8001660 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e21a      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c9a:	4b22      	ldr	r3, [pc, #136]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f0      	beq.n	8006c88 <HAL_RCC_OscConfig+0x45c>
 8006ca6:	e018      	b.n	8006cda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cac:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fa fcd4 	bl	8001660 <HAL_GetTick>
 8006cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cbc:	f7fa fcd0 	bl	8001660 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e200      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cce:	4b15      	ldr	r3, [pc, #84]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d039      	beq.n	8006d5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01c      	beq.n	8006d28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006cf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cfa:	f7fa fcb1 	bl	8001660 <HAL_GetTick>
 8006cfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d02:	f7fa fcad 	bl	8001660 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e1dd      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d14:	4b03      	ldr	r3, [pc, #12]	@ (8006d24 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0f0      	beq.n	8006d02 <HAL_RCC_OscConfig+0x4d6>
 8006d20:	e01b      	b.n	8006d5a <HAL_RCC_OscConfig+0x52e>
 8006d22:	bf00      	nop
 8006d24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d28:	4b9b      	ldr	r3, [pc, #620]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a9a      	ldr	r2, [pc, #616]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d34:	f7fa fc94 	bl	8001660 <HAL_GetTick>
 8006d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3c:	f7fa fc90 	bl	8001660 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e1c0      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d4e:	4b92      	ldr	r3, [pc, #584]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8081 	beq.w	8006e6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d68:	4b8c      	ldr	r3, [pc, #560]	@ (8006f9c <HAL_RCC_OscConfig+0x770>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8006f9c <HAL_RCC_OscConfig+0x770>)
 8006d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d74:	f7fa fc74 	bl	8001660 <HAL_GetTick>
 8006d78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7c:	f7fa fc70 	bl	8001660 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b64      	cmp	r3, #100	@ 0x64
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e1a0      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d8e:	4b83      	ldr	r3, [pc, #524]	@ (8006f9c <HAL_RCC_OscConfig+0x770>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d106      	bne.n	8006db0 <HAL_RCC_OscConfig+0x584>
 8006da2:	4b7d      	ldr	r3, [pc, #500]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	4a7c      	ldr	r2, [pc, #496]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dae:	e02d      	b.n	8006e0c <HAL_RCC_OscConfig+0x5e0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10c      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x5a6>
 8006db8:	4b77      	ldr	r3, [pc, #476]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbc:	4a76      	ldr	r2, [pc, #472]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc4:	4b74      	ldr	r3, [pc, #464]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc8:	4a73      	ldr	r2, [pc, #460]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dca:	f023 0304 	bic.w	r3, r3, #4
 8006dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dd0:	e01c      	b.n	8006e0c <HAL_RCC_OscConfig+0x5e0>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0x5c8>
 8006dda:	4b6f      	ldr	r3, [pc, #444]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	4a6e      	ldr	r2, [pc, #440]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006de0:	f043 0304 	orr.w	r3, r3, #4
 8006de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006de6:	4b6c      	ldr	r3, [pc, #432]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dea:	4a6b      	ldr	r2, [pc, #428]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006df2:	e00b      	b.n	8006e0c <HAL_RCC_OscConfig+0x5e0>
 8006df4:	4b68      	ldr	r3, [pc, #416]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df8:	4a67      	ldr	r2, [pc, #412]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e00:	4b65      	ldr	r3, [pc, #404]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e04:	4a64      	ldr	r2, [pc, #400]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	f023 0304 	bic.w	r3, r3, #4
 8006e0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d015      	beq.n	8006e40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e14:	f7fa fc24 	bl	8001660 <HAL_GetTick>
 8006e18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fa fc20 	bl	8001660 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e14e      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e32:	4b59      	ldr	r3, [pc, #356]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0ee      	beq.n	8006e1c <HAL_RCC_OscConfig+0x5f0>
 8006e3e:	e014      	b.n	8006e6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e40:	f7fa fc0e 	bl	8001660 <HAL_GetTick>
 8006e44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e46:	e00a      	b.n	8006e5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e48:	f7fa fc0a 	bl	8001660 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e138      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1ee      	bne.n	8006e48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 812d 	beq.w	80070ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e74:	4b48      	ldr	r3, [pc, #288]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e7c:	2b18      	cmp	r3, #24
 8006e7e:	f000 80bd 	beq.w	8006ffc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	f040 809e 	bne.w	8006fc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8c:	4b42      	ldr	r3, [pc, #264]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a41      	ldr	r2, [pc, #260]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fa fbe2 	bl	8001660 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fa fbde 	bl	8001660 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e10e      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eb2:	4b39      	ldr	r3, [pc, #228]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ebe:	4b36      	ldr	r3, [pc, #216]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ec2:	4b37      	ldr	r3, [pc, #220]	@ (8006fa0 <HAL_RCC_OscConfig+0x774>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006ece:	0112      	lsls	r2, r2, #4
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	4931      	ldr	r1, [pc, #196]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	3b01      	subs	r3, #1
 8006ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	025b      	lsls	r3, r3, #9
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	3b01      	subs	r3, #1
 8006f02:	061b      	lsls	r3, r3, #24
 8006f04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f08:	4923      	ldr	r1, [pc, #140]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006f0e:	4b22      	ldr	r3, [pc, #136]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a21      	ldr	r2, [pc, #132]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f1e:	4b21      	ldr	r3, [pc, #132]	@ (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f26:	00d2      	lsls	r2, r2, #3
 8006f28:	491b      	ldr	r1, [pc, #108]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	f023 020c 	bic.w	r2, r3, #12
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	4917      	ldr	r1, [pc, #92]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f40:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	f023 0202 	bic.w	r2, r3, #2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4c:	4912      	ldr	r1, [pc, #72]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f52:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	4a10      	ldr	r2, [pc, #64]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a0d      	ldr	r2, [pc, #52]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006f76:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7a:	4a07      	ldr	r2, [pc, #28]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f82:	4b05      	ldr	r3, [pc, #20]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a04      	ldr	r2, [pc, #16]	@ (8006f98 <HAL_RCC_OscConfig+0x76c>)
 8006f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f8e:	f7fa fb67 	bl	8001660 <HAL_GetTick>
 8006f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f94:	e011      	b.n	8006fba <HAL_RCC_OscConfig+0x78e>
 8006f96:	bf00      	nop
 8006f98:	58024400 	.word	0x58024400
 8006f9c:	58024800 	.word	0x58024800
 8006fa0:	fffffc0c 	.word	0xfffffc0c
 8006fa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa8:	f7fa fb5a 	bl	8001660 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e08a      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fba:	4b47      	ldr	r3, [pc, #284]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x77c>
 8006fc6:	e082      	b.n	80070ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc8:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a42      	ldr	r2, [pc, #264]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8006fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fa fb44 	bl	8001660 <HAL_GetTick>
 8006fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fdc:	f7fa fb40 	bl	8001660 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e070      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fee:	4b3a      	ldr	r3, [pc, #232]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x7b0>
 8006ffa:	e068      	b.n	80070ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ffc:	4b36      	ldr	r3, [pc, #216]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007002:	4b35      	ldr	r3, [pc, #212]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007006:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	2b01      	cmp	r3, #1
 800700e:	d031      	beq.n	8007074 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0203 	and.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800701a:	429a      	cmp	r2, r3
 800701c:	d12a      	bne.n	8007074 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	429a      	cmp	r2, r3
 800702c:	d122      	bne.n	8007074 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800703a:	429a      	cmp	r2, r3
 800703c:	d11a      	bne.n	8007074 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800704c:	429a      	cmp	r2, r3
 800704e:	d111      	bne.n	8007074 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800705e:	429a      	cmp	r2, r3
 8007060:	d108      	bne.n	8007074 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	0e1b      	lsrs	r3, r3, #24
 8007066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e02b      	b.n	80070d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007078:	4b17      	ldr	r3, [pc, #92]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 800707a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707c:	08db      	lsrs	r3, r3, #3
 800707e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007082:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d01f      	beq.n	80070ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	4a11      	ldr	r2, [pc, #68]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800709a:	f7fa fae1 	bl	8001660 <HAL_GetTick>
 800709e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80070a0:	bf00      	nop
 80070a2:	f7fa fadd 	bl	8001660 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d0f9      	beq.n	80070a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070ae:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 80070b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <HAL_RCC_OscConfig+0x8b0>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80070ba:	00d2      	lsls	r2, r2, #3
 80070bc:	4906      	ldr	r1, [pc, #24]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80070c2:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c6:	4a04      	ldr	r2, [pc, #16]	@ (80070d8 <HAL_RCC_OscConfig+0x8ac>)
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3730      	adds	r7, #48	@ 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	58024400 	.word	0x58024400
 80070dc:	ffff0007 	.word	0xffff0007

080070e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e19c      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070f4:	4b8a      	ldr	r3, [pc, #552]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d910      	bls.n	8007124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007102:	4b87      	ldr	r3, [pc, #540]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f023 020f 	bic.w	r2, r3, #15
 800710a:	4985      	ldr	r1, [pc, #532]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	4313      	orrs	r3, r2
 8007110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b83      	ldr	r3, [pc, #524]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e184      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	4b7b      	ldr	r3, [pc, #492]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800713c:	429a      	cmp	r2, r3
 800713e:	d908      	bls.n	8007152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007140:	4b78      	ldr	r3, [pc, #480]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	4975      	ldr	r1, [pc, #468]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 800714e:	4313      	orrs	r3, r2
 8007150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d010      	beq.n	8007180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	4b70      	ldr	r3, [pc, #448]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800716a:	429a      	cmp	r2, r3
 800716c:	d908      	bls.n	8007180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800716e:	4b6d      	ldr	r3, [pc, #436]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	496a      	ldr	r1, [pc, #424]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 800717c:	4313      	orrs	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	4b64      	ldr	r3, [pc, #400]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007198:	429a      	cmp	r2, r3
 800719a:	d908      	bls.n	80071ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800719c:	4b61      	ldr	r3, [pc, #388]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	495e      	ldr	r1, [pc, #376]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	4b59      	ldr	r3, [pc, #356]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d908      	bls.n	80071dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80071ca:	4b56      	ldr	r3, [pc, #344]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	4953      	ldr	r1, [pc, #332]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d908      	bls.n	800720a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f023 020f 	bic.w	r2, r3, #15
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	4947      	ldr	r1, [pc, #284]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007206:	4313      	orrs	r3, r2
 8007208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d055      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007216:	4b43      	ldr	r3, [pc, #268]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4940      	ldr	r1, [pc, #256]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007224:	4313      	orrs	r3, r2
 8007226:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d107      	bne.n	8007240 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007230:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d121      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0f6      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b03      	cmp	r3, #3
 8007246:	d107      	bne.n	8007258 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007248:	4b36      	ldr	r3, [pc, #216]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d115      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0ea      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d107      	bne.n	8007270 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007260:	4b30      	ldr	r3, [pc, #192]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0de      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007270:	4b2c      	ldr	r3, [pc, #176]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0d6      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f023 0207 	bic.w	r2, r3, #7
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4925      	ldr	r1, [pc, #148]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 800728e:	4313      	orrs	r3, r2
 8007290:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007292:	f7fa f9e5 	bl	8001660 <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007298:	e00a      	b.n	80072b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800729a:	f7fa f9e1 	bl	8001660 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e0be      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	429a      	cmp	r2, r3
 80072c0:	d1eb      	bne.n	800729a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d010      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	4b14      	ldr	r3, [pc, #80]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	429a      	cmp	r2, r3
 80072dc:	d208      	bcs.n	80072f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072de:	4b11      	ldr	r3, [pc, #68]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f023 020f 	bic.w	r2, r3, #15
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	490e      	ldr	r1, [pc, #56]	@ (8007324 <HAL_RCC_ClockConfig+0x244>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d214      	bcs.n	8007328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fe:	4b08      	ldr	r3, [pc, #32]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 020f 	bic.w	r2, r3, #15
 8007306:	4906      	ldr	r1, [pc, #24]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	4313      	orrs	r3, r2
 800730c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800730e:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <HAL_RCC_ClockConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d005      	beq.n	8007328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e086      	b.n	800742e <HAL_RCC_ClockConfig+0x34e>
 8007320:	52002000 	.word	0x52002000
 8007324:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d010      	beq.n	8007356 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	4b3f      	ldr	r3, [pc, #252]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007340:	429a      	cmp	r2, r3
 8007342:	d208      	bcs.n	8007356 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007344:	4b3c      	ldr	r3, [pc, #240]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	4939      	ldr	r1, [pc, #228]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007352:	4313      	orrs	r3, r2
 8007354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	4b34      	ldr	r3, [pc, #208]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800736e:	429a      	cmp	r2, r3
 8007370:	d208      	bcs.n	8007384 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007372:	4b31      	ldr	r3, [pc, #196]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	492e      	ldr	r1, [pc, #184]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007380:	4313      	orrs	r3, r2
 8007382:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	d010      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	4b28      	ldr	r3, [pc, #160]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800739c:	429a      	cmp	r2, r3
 800739e:	d208      	bcs.n	80073b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073a0:	4b25      	ldr	r3, [pc, #148]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	4922      	ldr	r1, [pc, #136]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d010      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d208      	bcs.n	80073e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80073ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	4917      	ldr	r1, [pc, #92]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073e0:	f000 f89e 	bl	8007520 <HAL_RCC_GetSysClockFreq>
 80073e4:	4602      	mov	r2, r0
 80073e6:	4b14      	ldr	r3, [pc, #80]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	4912      	ldr	r1, [pc, #72]	@ (800743c <HAL_RCC_ClockConfig+0x35c>)
 80073f2:	5ccb      	ldrb	r3, [r1, r3]
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007438 <HAL_RCC_ClockConfig+0x358>)
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	4a0d      	ldr	r2, [pc, #52]	@ (800743c <HAL_RCC_ClockConfig+0x35c>)
 8007408:	5cd3      	ldrb	r3, [r2, r3]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	4a0a      	ldr	r2, [pc, #40]	@ (8007440 <HAL_RCC_ClockConfig+0x360>)
 8007416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007418:	4a0a      	ldr	r2, [pc, #40]	@ (8007444 <HAL_RCC_ClockConfig+0x364>)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800741e:	4b0a      	ldr	r3, [pc, #40]	@ (8007448 <HAL_RCC_ClockConfig+0x368>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7fa f8d2 	bl	80015cc <HAL_InitTick>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
 800743c:	0800a0ac 	.word	0x0800a0ac
 8007440:	24000004 	.word	0x24000004
 8007444:	24000000 	.word	0x24000000
 8007448:	24000008 	.word	0x24000008

0800744c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08c      	sub	sp, #48	@ 0x30
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d12a      	bne.n	80074b4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800745e:	4b2d      	ldr	r3, [pc, #180]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 8007460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007464:	4a2b      	ldr	r2, [pc, #172]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800746e:	4b29      	ldr	r3, [pc, #164]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 8007470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800747c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007482:	2302      	movs	r3, #2
 8007484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007486:	2303      	movs	r3, #3
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800748e:	2300      	movs	r3, #0
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007492:	f107 031c 	add.w	r3, r7, #28
 8007496:	4619      	mov	r1, r3
 8007498:	481f      	ldr	r0, [pc, #124]	@ (8007518 <HAL_RCC_MCOConfig+0xcc>)
 800749a:	f7fe f873 	bl	8005584 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800749e:	4b1d      	ldr	r3, [pc, #116]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	430b      	orrs	r3, r1
 80074ac:	4919      	ldr	r1, [pc, #100]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80074b2:	e02a      	b.n	800750a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80074b4:	4b17      	ldr	r3, [pc, #92]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ba:	4a16      	ldr	r2, [pc, #88]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074bc:	f043 0304 	orr.w	r3, r3, #4
 80074c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80074c4:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80074d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d8:	2302      	movs	r3, #2
 80074da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074dc:	2303      	movs	r3, #3
 80074de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80074e4:	2300      	movs	r3, #0
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80074e8:	f107 031c 	add.w	r3, r7, #28
 80074ec:	4619      	mov	r1, r3
 80074ee:	480b      	ldr	r0, [pc, #44]	@ (800751c <HAL_RCC_MCOConfig+0xd0>)
 80074f0:	f7fe f848 	bl	8005584 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80074f4:	4b07      	ldr	r3, [pc, #28]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	01d9      	lsls	r1, r3, #7
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	430b      	orrs	r3, r1
 8007504:	4903      	ldr	r1, [pc, #12]	@ (8007514 <HAL_RCC_MCOConfig+0xc8>)
 8007506:	4313      	orrs	r3, r2
 8007508:	610b      	str	r3, [r1, #16]
}
 800750a:	bf00      	nop
 800750c:	3730      	adds	r7, #48	@ 0x30
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
 8007518:	58020000 	.word	0x58020000
 800751c:	58020800 	.word	0x58020800

08007520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007520:	b480      	push	{r7}
 8007522:	b089      	sub	sp, #36	@ 0x24
 8007524:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007526:	4bb3      	ldr	r3, [pc, #716]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800752e:	2b18      	cmp	r3, #24
 8007530:	f200 8155 	bhi.w	80077de <HAL_RCC_GetSysClockFreq+0x2be>
 8007534:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	080075a1 	.word	0x080075a1
 8007540:	080077df 	.word	0x080077df
 8007544:	080077df 	.word	0x080077df
 8007548:	080077df 	.word	0x080077df
 800754c:	080077df 	.word	0x080077df
 8007550:	080077df 	.word	0x080077df
 8007554:	080077df 	.word	0x080077df
 8007558:	080077df 	.word	0x080077df
 800755c:	080075c7 	.word	0x080075c7
 8007560:	080077df 	.word	0x080077df
 8007564:	080077df 	.word	0x080077df
 8007568:	080077df 	.word	0x080077df
 800756c:	080077df 	.word	0x080077df
 8007570:	080077df 	.word	0x080077df
 8007574:	080077df 	.word	0x080077df
 8007578:	080077df 	.word	0x080077df
 800757c:	080075cd 	.word	0x080075cd
 8007580:	080077df 	.word	0x080077df
 8007584:	080077df 	.word	0x080077df
 8007588:	080077df 	.word	0x080077df
 800758c:	080077df 	.word	0x080077df
 8007590:	080077df 	.word	0x080077df
 8007594:	080077df 	.word	0x080077df
 8007598:	080077df 	.word	0x080077df
 800759c:	080075d3 	.word	0x080075d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a0:	4b94      	ldr	r3, [pc, #592]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ac:	4b91      	ldr	r3, [pc, #580]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	08db      	lsrs	r3, r3, #3
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	4a90      	ldr	r2, [pc, #576]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80075be:	e111      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80075c0:	4b8d      	ldr	r3, [pc, #564]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075c2:	61bb      	str	r3, [r7, #24]
      break;
 80075c4:	e10e      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80075c6:	4b8d      	ldr	r3, [pc, #564]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80075c8:	61bb      	str	r3, [r7, #24]
      break;
 80075ca:	e10b      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80075cc:	4b8c      	ldr	r3, [pc, #560]	@ (8007800 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80075ce:	61bb      	str	r3, [r7, #24]
      break;
 80075d0:	e108      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d2:	4b88      	ldr	r3, [pc, #544]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80075dc:	4b85      	ldr	r3, [pc, #532]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80075e8:	4b82      	ldr	r3, [pc, #520]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075f2:	4b80      	ldr	r3, [pc, #512]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80e1 	beq.w	80077d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f000 8083 	beq.w	8007724 <HAL_RCC_GetSysClockFreq+0x204>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b02      	cmp	r3, #2
 8007622:	f200 80a1 	bhi.w	8007768 <HAL_RCC_GetSysClockFreq+0x248>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x114>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d056      	beq.n	80076e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007632:	e099      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007634:	4b6f      	ldr	r3, [pc, #444]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02d      	beq.n	800769c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007640:	4b6c      	ldr	r3, [pc, #432]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	08db      	lsrs	r3, r3, #3
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	4a6b      	ldr	r2, [pc, #428]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	ee07 3a90 	vmov	s15, r3
 8007658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766a:	4b62      	ldr	r3, [pc, #392]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767a:	ed97 6a02 	vldr	s12, [r7, #8]
 800767e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007696:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800769a:	e087      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007808 <HAL_RCC_GetSysClockFreq+0x2e8>
 80076aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ae:	4b51      	ldr	r3, [pc, #324]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	ed97 6a02 	vldr	s12, [r7, #8]
 80076c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80076de:	e065      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800780c <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b40      	ldr	r3, [pc, #256]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a02 	vldr	s12, [r7, #8]
 8007706:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007722:	e043      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007810 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a02 	vldr	s12, [r7, #8]
 800774a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007766:	e021      	b.n	80077ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800780c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b1e      	ldr	r3, [pc, #120]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a02 	vldr	s12, [r7, #8]
 800778e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80077ac:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b0:	0a5b      	lsrs	r3, r3, #9
 80077b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b6:	3301      	adds	r3, #1
 80077b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d0:	ee17 3a90 	vmov	r3, s15
 80077d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80077d6:	e005      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
      break;
 80077dc:	e002      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80077de:	4b07      	ldr	r3, [pc, #28]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077e0:	61bb      	str	r3, [r7, #24]
      break;
 80077e2:	bf00      	nop
  }

  return sysclockfreq;
 80077e4:	69bb      	ldr	r3, [r7, #24]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3724      	adds	r7, #36	@ 0x24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
 80077f8:	03d09000 	.word	0x03d09000
 80077fc:	003d0900 	.word	0x003d0900
 8007800:	007a1200 	.word	0x007a1200
 8007804:	46000000 	.word	0x46000000
 8007808:	4c742400 	.word	0x4c742400
 800780c:	4a742400 	.word	0x4a742400
 8007810:	4af42400 	.word	0x4af42400

08007814 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b0ca      	sub	sp, #296	@ 0x128
 800781a:	af00      	add	r7, sp, #0
 800781c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007820:	2300      	movs	r3, #0
 8007822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007826:	2300      	movs	r3, #0
 8007828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007838:	2500      	movs	r5, #0
 800783a:	ea54 0305 	orrs.w	r3, r4, r5
 800783e:	d049      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007846:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800784a:	d02f      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800784c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007850:	d828      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007856:	d01a      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800785c:	d822      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007866:	d007      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007868:	e01c      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786a:	4bb8      	ldr	r3, [pc, #736]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	4ab7      	ldr	r2, [pc, #732]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007876:	e01a      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787c:	3308      	adds	r3, #8
 800787e:	2102      	movs	r1, #2
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f9d1 	bl	8008c28 <RCCEx_PLL2_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800788c:	e00f      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	3328      	adds	r3, #40	@ 0x28
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fa78 	bl	8008d8c <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80078a2:	e004      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078aa:	e000      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80078ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078b6:	4ba5      	ldr	r3, [pc, #660]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078c4:	4aa1      	ldr	r2, [pc, #644]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078c6:	430b      	orrs	r3, r1
 80078c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80078e0:	f04f 0900 	mov.w	r9, #0
 80078e4:	ea58 0309 	orrs.w	r3, r8, r9
 80078e8:	d047      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d82a      	bhi.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80078f4:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007911 	.word	0x08007911
 8007900:	0800791f 	.word	0x0800791f
 8007904:	08007935 	.word	0x08007935
 8007908:	08007953 	.word	0x08007953
 800790c:	08007953 	.word	0x08007953
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007910:	4b8e      	ldr	r3, [pc, #568]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	4a8d      	ldr	r2, [pc, #564]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800791a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800791c:	e01a      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	3308      	adds	r3, #8
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f97e 	bl	8008c28 <RCCEx_PLL2_Config>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007932:	e00f      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fa25 	bl	8008d8c <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007948:	e004      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800795c:	4b7b      	ldr	r3, [pc, #492]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800795e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007960:	f023 0107 	bic.w	r1, r3, #7
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796a:	4a78      	ldr	r2, [pc, #480]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800796c:	430b      	orrs	r3, r1
 800796e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007970:	e003      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007986:	f04f 0b00 	mov.w	fp, #0
 800798a:	ea5a 030b 	orrs.w	r3, sl, fp
 800798e:	d04c      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799a:	d030      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800799c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a0:	d829      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a4:	d02d      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80079a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079a8:	d825      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079aa:	2b80      	cmp	r3, #128	@ 0x80
 80079ac:	d018      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80079ae:	2b80      	cmp	r3, #128	@ 0x80
 80079b0:	d821      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80079b6:	2b40      	cmp	r3, #64	@ 0x40
 80079b8:	d007      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80079ba:	e01c      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079bc:	4b63      	ldr	r3, [pc, #396]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c0:	4a62      	ldr	r2, [pc, #392]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079c8:	e01c      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	3308      	adds	r3, #8
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 f928 	bl	8008c28 <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079de:	e011      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	3328      	adds	r3, #40	@ 0x28
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 f9cf 	bl	8008d8c <RCCEx_PLL3_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80079fe:	bf00      	nop
 8007a00:	e000      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a20:	e003      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007a36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007a40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	d053      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a56:	d035      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a5c:	d82e      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a62:	d031      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a68:	d828      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6e:	d01a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a74:	d822      	bhi.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a7e:	d007      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007a80:	e01c      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a82:	4b32      	ldr	r3, [pc, #200]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	4a31      	ldr	r2, [pc, #196]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8e:	e01c      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	3308      	adds	r3, #8
 8007a96:	2100      	movs	r1, #0
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f001 f8c5 	bl	8008c28 <RCCEx_PLL2_Config>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007aa4:	e011      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	3328      	adds	r3, #40	@ 0x28
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f001 f96c 	bl	8008d8c <RCCEx_PLL3_Config>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aba:	e006      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ac2:	e002      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ac4:	bf00      	nop
 8007ac6:	e000      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ae8:	e003      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007afe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b02:	2300      	movs	r3, #0
 8007b04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007b08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	d056      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007b1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b1e:	d038      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007b20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b24:	d831      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b2a:	d034      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007b2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b30:	d82b      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b36:	d01d      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b3c:	d825      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d006      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b48:	e01f      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b4a:	bf00      	nop
 8007b4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b50:	4ba2      	ldr	r3, [pc, #648]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	4aa1      	ldr	r2, [pc, #644]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b5c:	e01c      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b62:	3308      	adds	r3, #8
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f85e 	bl	8008c28 <RCCEx_PLL2_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007b72:	e011      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	3328      	adds	r3, #40	@ 0x28
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f905 	bl	8008d8c <RCCEx_PLL3_Config>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007b88:	e006      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b90:	e002      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007bb0:	4a8a      	ldr	r2, [pc, #552]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007bd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d03a      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be6:	2b30      	cmp	r3, #48	@ 0x30
 8007be8:	d01f      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007bea:	2b30      	cmp	r3, #48	@ 0x30
 8007bec:	d819      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bee:	2b20      	cmp	r3, #32
 8007bf0:	d00c      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d815      	bhi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d019      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d111      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bfe:	4b77      	ldr	r3, [pc, #476]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c02:	4a76      	ldr	r2, [pc, #472]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c0a:	e011      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	3308      	adds	r3, #8
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 f807 	bl	8008c28 <RCCEx_PLL2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007c20:	e006      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c28:	e002      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c38:	4b68      	ldr	r3, [pc, #416]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c46:	4a65      	ldr	r2, [pc, #404]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007c4c:	e003      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007c62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c66:	2300      	movs	r3, #0
 8007c68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d051      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c80:	d035      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c86:	d82e      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c8c:	d031      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007c8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c92:	d828      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c98:	d01a      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9e:	d822      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d003      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca8:	d007      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007caa:	e01c      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cac:	4b4b      	ldr	r3, [pc, #300]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	4a4a      	ldr	r2, [pc, #296]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ffb0 	bl	8008c28 <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007cce:	e011      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	3328      	adds	r3, #40	@ 0x28
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f857 	bl	8008d8c <RCCEx_PLL3_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007ce4:	e006      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cfc:	4b37      	ldr	r3, [pc, #220]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d0a:	4a34      	ldr	r2, [pc, #208]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d10:	e003      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d056      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d44:	d033      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007d46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d4a:	d82c      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d50:	d02f      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007d52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d56:	d826      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d5c:	d02b      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007d5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d62:	d820      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d68:	d012      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d6e:	d81a      	bhi.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d022      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d78:	d115      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	3308      	adds	r3, #8
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 ff50 	bl	8008c28 <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007d8e:	e015      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d94:	3328      	adds	r3, #40	@ 0x28
 8007d96:	2101      	movs	r1, #1
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fff7 	bl	8008d8c <RCCEx_PLL3_Config>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007da4:	e00a      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dac:	e006      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dae:	bf00      	nop
 8007db0:	e004      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007db2:	bf00      	nop
 8007db4:	e002      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10d      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd2:	4a02      	ldr	r2, [pc, #8]	@ (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dd8:	e006      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007dda:	bf00      	nop
 8007ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4313      	orrs	r3, r2
 8007e06:	d055      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e14:	d033      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e1a:	d82c      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e20:	d02f      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e26:	d826      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e2c:	d02b      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007e2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007e32:	d820      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e38:	d012      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e3e:	d81a      	bhi.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d022      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e48:	d115      	bne.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	3308      	adds	r3, #8
 8007e50:	2101      	movs	r1, #1
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fee8 	bl	8008c28 <RCCEx_PLL2_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e5e:	e015      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	3328      	adds	r3, #40	@ 0x28
 8007e66:	2101      	movs	r1, #1
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 ff8f 	bl	8008d8c <RCCEx_PLL3_Config>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e74:	e00a      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e7c:	e006      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e7e:	bf00      	nop
 8007e80:	e004      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e82:	bf00      	nop
 8007e84:	e002      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e86:	bf00      	nop
 8007e88:	e000      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e94:	4ba3      	ldr	r3, [pc, #652]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ea4:	4a9f      	ldr	r2, [pc, #636]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eaa:	e003      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	d037      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ede:	d00e      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ee4:	d816      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d018      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007eea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eee:	d111      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef4:	4a8b      	ldr	r2, [pc, #556]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007efc:	e00f      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	3308      	adds	r3, #8
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fe8e 	bl	8008c28 <RCCEx_PLL2_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007f12:	e004      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f26:	4b7f      	ldr	r3, [pc, #508]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f34:	4a7b      	ldr	r2, [pc, #492]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f3a:	e003      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f54:	2300      	movs	r3, #0
 8007f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007f5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4313      	orrs	r3, r2
 8007f62:	d039      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d81c      	bhi.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007fb1 	.word	0x08007fb1
 8007f78:	08007f85 	.word	0x08007f85
 8007f7c:	08007f93 	.word	0x08007f93
 8007f80:	08007fb1 	.word	0x08007fb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f84:	4b67      	ldr	r3, [pc, #412]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f88:	4a66      	ldr	r2, [pc, #408]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007f90:	e00f      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f96:	3308      	adds	r3, #8
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fe44 	bl	8008c28 <RCCEx_PLL2_Config>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007fa6:	e004      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fae:	e000      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fba:	4b5a      	ldr	r3, [pc, #360]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fbe:	f023 0103 	bic.w	r1, r3, #3
 8007fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc8:	4a56      	ldr	r2, [pc, #344]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007fce:	e003      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f000 809f 	beq.w	8008138 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008006:	f7f9 fb2b 	bl	8001660 <HAL_GetTick>
 800800a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800e:	e00b      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008010:	f7f9 fb26 	bl	8001660 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b64      	cmp	r3, #100	@ 0x64
 800801e:	d903      	bls.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008026:	e005      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008028:	4b3f      	ldr	r3, [pc, #252]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0ed      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008038:	2b00      	cmp	r3, #0
 800803a:	d179      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800803c:	4b39      	ldr	r3, [pc, #228]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800803e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008048:	4053      	eors	r3, r2
 800804a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800804e:	2b00      	cmp	r3, #0
 8008050:	d015      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008052:	4b34      	ldr	r3, [pc, #208]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800805a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800805e:	4b31      	ldr	r3, [pc, #196]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008062:	4a30      	ldr	r2, [pc, #192]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008068:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800806a:	4b2e      	ldr	r3, [pc, #184]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806e:	4a2d      	ldr	r2, [pc, #180]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008074:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008076:	4a2b      	ldr	r2, [pc, #172]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800807c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800808a:	d118      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7f9 fae8 	bl	8001660 <HAL_GetTick>
 8008090:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008094:	e00d      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008096:	f7f9 fae3 	bl	8001660 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080a0:	1ad2      	subs	r2, r2, r3
 80080a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d903      	bls.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80080b0:	e005      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0eb      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80080be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d129      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d6:	d10e      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80080d8:	4b12      	ldr	r3, [pc, #72]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80080e8:	091a      	lsrs	r2, r3, #4
 80080ea:	4b10      	ldr	r3, [pc, #64]	@ (800812c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f0:	430b      	orrs	r3, r1
 80080f2:	6113      	str	r3, [r2, #16]
 80080f4:	e005      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80080f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008100:	6113      	str	r3, [r2, #16]
 8008102:	4b08      	ldr	r3, [pc, #32]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008104:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800810e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008112:	4a04      	ldr	r2, [pc, #16]	@ (8008124 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008114:	430b      	orrs	r3, r1
 8008116:	6713      	str	r3, [r2, #112]	@ 0x70
 8008118:	e00e      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800811a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008122:	e009      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008124:	58024400 	.word	0x58024400
 8008128:	58024800 	.word	0x58024800
 800812c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f002 0301 	and.w	r3, r2, #1
 8008144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008148:	2300      	movs	r3, #0
 800814a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800814e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008152:	460b      	mov	r3, r1
 8008154:	4313      	orrs	r3, r2
 8008156:	f000 8089 	beq.w	800826c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008160:	2b28      	cmp	r3, #40	@ 0x28
 8008162:	d86b      	bhi.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008164:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816a:	bf00      	nop
 800816c:	08008245 	.word	0x08008245
 8008170:	0800823d 	.word	0x0800823d
 8008174:	0800823d 	.word	0x0800823d
 8008178:	0800823d 	.word	0x0800823d
 800817c:	0800823d 	.word	0x0800823d
 8008180:	0800823d 	.word	0x0800823d
 8008184:	0800823d 	.word	0x0800823d
 8008188:	0800823d 	.word	0x0800823d
 800818c:	08008211 	.word	0x08008211
 8008190:	0800823d 	.word	0x0800823d
 8008194:	0800823d 	.word	0x0800823d
 8008198:	0800823d 	.word	0x0800823d
 800819c:	0800823d 	.word	0x0800823d
 80081a0:	0800823d 	.word	0x0800823d
 80081a4:	0800823d 	.word	0x0800823d
 80081a8:	0800823d 	.word	0x0800823d
 80081ac:	08008227 	.word	0x08008227
 80081b0:	0800823d 	.word	0x0800823d
 80081b4:	0800823d 	.word	0x0800823d
 80081b8:	0800823d 	.word	0x0800823d
 80081bc:	0800823d 	.word	0x0800823d
 80081c0:	0800823d 	.word	0x0800823d
 80081c4:	0800823d 	.word	0x0800823d
 80081c8:	0800823d 	.word	0x0800823d
 80081cc:	08008245 	.word	0x08008245
 80081d0:	0800823d 	.word	0x0800823d
 80081d4:	0800823d 	.word	0x0800823d
 80081d8:	0800823d 	.word	0x0800823d
 80081dc:	0800823d 	.word	0x0800823d
 80081e0:	0800823d 	.word	0x0800823d
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	0800823d 	.word	0x0800823d
 80081ec:	08008245 	.word	0x08008245
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	0800823d 	.word	0x0800823d
 80081f8:	0800823d 	.word	0x0800823d
 80081fc:	0800823d 	.word	0x0800823d
 8008200:	0800823d 	.word	0x0800823d
 8008204:	0800823d 	.word	0x0800823d
 8008208:	0800823d 	.word	0x0800823d
 800820c:	08008245 	.word	0x08008245
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008214:	3308      	adds	r3, #8
 8008216:	2101      	movs	r1, #1
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fd05 	bl	8008c28 <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008224:	e00f      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	3328      	adds	r3, #40	@ 0x28
 800822c:	2101      	movs	r1, #1
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fdac 	bl	8008d8c <RCCEx_PLL3_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800823a:	e004      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008242:	e000      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800824e:	4bbf      	ldr	r3, [pc, #764]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008252:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825c:	4abb      	ldr	r2, [pc, #748]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800825e:	430b      	orrs	r3, r1
 8008260:	6553      	str	r3, [r2, #84]	@ 0x54
 8008262:	e003      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f002 0302 	and.w	r3, r2, #2
 8008278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800827c:	2300      	movs	r3, #0
 800827e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008282:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d041      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008292:	2b05      	cmp	r3, #5
 8008294:	d824      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008296:	a201      	add	r2, pc, #4	@ (adr r2, 800829c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082e9 	.word	0x080082e9
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082cb 	.word	0x080082cb
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	080082e9 	.word	0x080082e9
 80082b0:	080082e9 	.word	0x080082e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b8:	3308      	adds	r3, #8
 80082ba:	2101      	movs	r1, #1
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fcb3 	bl	8008c28 <RCCEx_PLL2_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082c8:	e00f      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ce:	3328      	adds	r3, #40	@ 0x28
 80082d0:	2101      	movs	r1, #1
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 fd5a 	bl	8008d8c <RCCEx_PLL3_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80082de:	e004      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082e6:	e000      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80082e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082f2:	4b96      	ldr	r3, [pc, #600]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f6:	f023 0107 	bic.w	r1, r3, #7
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008300:	4a92      	ldr	r2, [pc, #584]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008302:	430b      	orrs	r3, r1
 8008304:	6553      	str	r3, [r2, #84]	@ 0x54
 8008306:	e003      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800830c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f002 0304 	and.w	r3, r2, #4
 800831c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008320:	2300      	movs	r3, #0
 8008322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008326:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800832a:	460b      	mov	r3, r1
 800832c:	4313      	orrs	r3, r2
 800832e:	d044      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008338:	2b05      	cmp	r3, #5
 800833a:	d825      	bhi.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008391 	.word	0x08008391
 8008348:	0800835d 	.word	0x0800835d
 800834c:	08008373 	.word	0x08008373
 8008350:	08008391 	.word	0x08008391
 8008354:	08008391 	.word	0x08008391
 8008358:	08008391 	.word	0x08008391
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008360:	3308      	adds	r3, #8
 8008362:	2101      	movs	r1, #1
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fc5f 	bl	8008c28 <RCCEx_PLL2_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008370:	e00f      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	3328      	adds	r3, #40	@ 0x28
 8008378:	2101      	movs	r1, #1
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fd06 	bl	8008d8c <RCCEx_PLL3_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008386:	e004      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800838e:	e000      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800839a:	4b6c      	ldr	r3, [pc, #432]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800839c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839e:	f023 0107 	bic.w	r1, r3, #7
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083aa:	4a68      	ldr	r2, [pc, #416]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ac:	430b      	orrs	r3, r1
 80083ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80083b0:	e003      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f002 0320 	and.w	r3, r2, #32
 80083c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083ca:	2300      	movs	r3, #0
 80083cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083d4:	460b      	mov	r3, r1
 80083d6:	4313      	orrs	r3, r2
 80083d8:	d055      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083e6:	d033      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80083e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ec:	d82c      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f2:	d02f      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80083f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f8:	d826      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80083fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083fe:	d02b      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008400:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008404:	d820      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800840a:	d012      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800840c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008410:	d81a      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d022      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800841a:	d115      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	3308      	adds	r3, #8
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fbff 	bl	8008c28 <RCCEx_PLL2_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008430:	e015      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008436:	3328      	adds	r3, #40	@ 0x28
 8008438:	2102      	movs	r1, #2
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fca6 	bl	8008d8c <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008446:	e00a      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800844e:	e006      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008450:	bf00      	nop
 8008452:	e004      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008454:	bf00      	nop
 8008456:	e002      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008458:	bf00      	nop
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800845c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008466:	4b39      	ldr	r3, [pc, #228]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008476:	4a35      	ldr	r2, [pc, #212]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008478:	430b      	orrs	r3, r1
 800847a:	6553      	str	r3, [r2, #84]	@ 0x54
 800847c:	e003      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008496:	2300      	movs	r3, #0
 8008498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800849c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4313      	orrs	r3, r2
 80084a4:	d058      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084b2:	d033      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80084b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084b8:	d82c      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084be:	d02f      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c4:	d826      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084ca:	d02b      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80084cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084d0:	d820      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084d6:	d012      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084dc:	d81a      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d022      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e6:	d115      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	3308      	adds	r3, #8
 80084ee:	2100      	movs	r1, #0
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fb99 	bl	8008c28 <RCCEx_PLL2_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80084fc:	e015      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008502:	3328      	adds	r3, #40	@ 0x28
 8008504:	2102      	movs	r1, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fc40 	bl	8008d8c <RCCEx_PLL3_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008512:	e00a      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800851a:	e006      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800851c:	bf00      	nop
 800851e:	e004      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008520:	bf00      	nop
 8008522:	e002      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10e      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008532:	4b06      	ldr	r3, [pc, #24]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008536:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008542:	4a02      	ldr	r2, [pc, #8]	@ (800854c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008544:	430b      	orrs	r3, r1
 8008546:	6593      	str	r3, [r2, #88]	@ 0x58
 8008548:	e006      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800854a:	bf00      	nop
 800854c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800856e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008572:	460b      	mov	r3, r1
 8008574:	4313      	orrs	r3, r2
 8008576:	d055      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008580:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008584:	d033      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008586:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800858a:	d82c      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800858c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008590:	d02f      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008596:	d826      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008598:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800859c:	d02b      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800859e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80085a2:	d820      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085a8:	d012      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80085aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ae:	d81a      	bhi.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d022      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80085b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b8:	d115      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085be:	3308      	adds	r3, #8
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fb30 	bl	8008c28 <RCCEx_PLL2_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085ce:	e015      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d4:	3328      	adds	r3, #40	@ 0x28
 80085d6:	2102      	movs	r1, #2
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fbd7 	bl	8008d8c <RCCEx_PLL3_Config>
 80085de:	4603      	mov	r3, r0
 80085e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80085e4:	e00a      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ec:	e006      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085ee:	bf00      	nop
 80085f0:	e004      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085f2:	bf00      	nop
 80085f4:	e002      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80085fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008604:	4ba1      	ldr	r3, [pc, #644]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008608:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008614:	4a9d      	ldr	r2, [pc, #628]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008616:	430b      	orrs	r3, r1
 8008618:	6593      	str	r3, [r2, #88]	@ 0x58
 800861a:	e003      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f002 0308 	and.w	r3, r2, #8
 8008630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800863a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	d01e      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008650:	d10c      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008656:	3328      	adds	r3, #40	@ 0x28
 8008658:	2102      	movs	r1, #2
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fb96 	bl	8008d8c <RCCEx_PLL3_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800866c:	4b87      	ldr	r3, [pc, #540]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800866e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008670:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800867c:	4a83      	ldr	r2, [pc, #524]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800867e:	430b      	orrs	r3, r1
 8008680:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f002 0310 	and.w	r3, r2, #16
 800868e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008698:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800869c:	460b      	mov	r3, r1
 800869e:	4313      	orrs	r3, r2
 80086a0:	d01e      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80086a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ae:	d10c      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80086b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b4:	3328      	adds	r3, #40	@ 0x28
 80086b6:	2102      	movs	r1, #2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fb67 	bl	8008d8c <RCCEx_PLL3_Config>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086ca:	4b70      	ldr	r3, [pc, #448]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086da:	4a6c      	ldr	r2, [pc, #432]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086dc:	430b      	orrs	r3, r1
 80086de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086f0:	2300      	movs	r3, #0
 80086f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80086fa:	460b      	mov	r3, r1
 80086fc:	4313      	orrs	r3, r2
 80086fe:	d03e      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800870c:	d022      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800870e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008712:	d81b      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800871c:	d00b      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800871e:	e015      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008724:	3308      	adds	r3, #8
 8008726:	2100      	movs	r1, #0
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fa7d 	bl	8008c28 <RCCEx_PLL2_Config>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008734:	e00f      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873a:	3328      	adds	r3, #40	@ 0x28
 800873c:	2102      	movs	r1, #2
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fb24 	bl	8008d8c <RCCEx_PLL3_Config>
 8008744:	4603      	mov	r3, r0
 8008746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800874a:	e004      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008752:	e000      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800875e:	4b4b      	ldr	r3, [pc, #300]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008762:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800876e:	4a47      	ldr	r2, [pc, #284]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008770:	430b      	orrs	r3, r1
 8008772:	6593      	str	r3, [r2, #88]	@ 0x58
 8008774:	e003      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800877a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800878a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800878c:	2300      	movs	r3, #0
 800878e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008790:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008794:	460b      	mov	r3, r1
 8008796:	4313      	orrs	r3, r2
 8008798:	d03b      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087a6:	d01f      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80087a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80087ac:	d818      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80087ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b2:	d003      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80087b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087b8:	d007      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80087ba:	e011      	b.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087bc:	4b33      	ldr	r3, [pc, #204]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c0:	4a32      	ldr	r2, [pc, #200]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80087c8:	e00f      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ce:	3328      	adds	r3, #40	@ 0x28
 80087d0:	2101      	movs	r1, #1
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fada 	bl	8008d8c <RCCEx_PLL3_Config>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80087de:	e004      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087e6:	e000      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80087e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087f2:	4b26      	ldr	r3, [pc, #152]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80087fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008802:	4a22      	ldr	r2, [pc, #136]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008804:	430b      	orrs	r3, r1
 8008806:	6553      	str	r3, [r2, #84]	@ 0x54
 8008808:	e003      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800880e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800881e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008820:	2300      	movs	r3, #0
 8008822:	677b      	str	r3, [r7, #116]	@ 0x74
 8008824:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008828:	460b      	mov	r3, r1
 800882a:	4313      	orrs	r3, r2
 800882c:	d034      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800883c:	d007      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800883e:	e011      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008840:	4b12      	ldr	r3, [pc, #72]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008844:	4a11      	ldr	r2, [pc, #68]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800884c:	e00e      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800884e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008852:	3308      	adds	r3, #8
 8008854:	2102      	movs	r1, #2
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f9e6 	bl	8008c28 <RCCEx_PLL2_Config>
 800885c:	4603      	mov	r3, r0
 800885e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008862:	e003      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800886a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10d      	bne.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008874:	4b05      	ldr	r3, [pc, #20]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008878:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008882:	4a02      	ldr	r2, [pc, #8]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008884:	430b      	orrs	r3, r1
 8008886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008894:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80088a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088a6:	2300      	movs	r3, #0
 80088a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80088ae:	460b      	mov	r3, r1
 80088b0:	4313      	orrs	r3, r2
 80088b2:	d00c      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b8:	3328      	adds	r3, #40	@ 0x28
 80088ba:	2102      	movs	r1, #2
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fa65 	bl	8008d8c <RCCEx_PLL3_Config>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80088da:	663b      	str	r3, [r7, #96]	@ 0x60
 80088dc:	2300      	movs	r3, #0
 80088de:	667b      	str	r3, [r7, #100]	@ 0x64
 80088e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80088e4:	460b      	mov	r3, r1
 80088e6:	4313      	orrs	r3, r2
 80088e8:	d038      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80088ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088f6:	d018      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80088f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088fc:	d811      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80088fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008902:	d014      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008908:	d80b      	bhi.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d011      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800890e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008912:	d106      	bne.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008914:	4bc3      	ldr	r3, [pc, #780]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	4ac2      	ldr	r2, [pc, #776]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800891a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800891e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008920:	e008      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008928:	e004      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800892a:	bf00      	nop
 800892c:	e002      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800892e:	bf00      	nop
 8008930:	e000      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10b      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800893c:	4bb9      	ldr	r3, [pc, #740]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800893e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008940:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894c:	4ab5      	ldr	r2, [pc, #724]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800894e:	430b      	orrs	r3, r1
 8008950:	6553      	str	r3, [r2, #84]	@ 0x54
 8008952:	e003      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800896a:	2300      	movs	r3, #0
 800896c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800896e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008972:	460b      	mov	r3, r1
 8008974:	4313      	orrs	r3, r2
 8008976:	d009      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008978:	4baa      	ldr	r3, [pc, #680]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800897a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008986:	4aa7      	ldr	r2, [pc, #668]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008988:	430b      	orrs	r3, r1
 800898a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008998:	653b      	str	r3, [r7, #80]	@ 0x50
 800899a:	2300      	movs	r3, #0
 800899c:	657b      	str	r3, [r7, #84]	@ 0x54
 800899e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d00a      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80089a8:	4b9e      	ldr	r3, [pc, #632]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80089b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089b8:	4a9a      	ldr	r2, [pc, #616]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ba:	430b      	orrs	r3, r1
 80089bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80089ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089cc:	2300      	movs	r3, #0
 80089ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80089d4:	460b      	mov	r3, r1
 80089d6:	4313      	orrs	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089da:	4b92      	ldr	r3, [pc, #584]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e8:	4a8e      	ldr	r2, [pc, #568]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80089ea:	430b      	orrs	r3, r1
 80089ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80089fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80089fc:	2300      	movs	r3, #0
 80089fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008a04:	460b      	mov	r3, r1
 8008a06:	4313      	orrs	r3, r2
 8008a08:	d00e      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a0a:	4b86      	ldr	r3, [pc, #536]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	4a85      	ldr	r2, [pc, #532]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a14:	6113      	str	r3, [r2, #16]
 8008a16:	4b83      	ldr	r3, [pc, #524]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a18:	6919      	ldr	r1, [r3, #16]
 8008a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a22:	4a80      	ldr	r2, [pc, #512]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008a34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4313      	orrs	r3, r2
 8008a42:	d009      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008a44:	4b77      	ldr	r3, [pc, #476]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a48:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a52:	4a74      	ldr	r2, [pc, #464]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a54:	430b      	orrs	r3, r1
 8008a56:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a66:	2300      	movs	r3, #0
 8008a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d00a      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a74:	4b6b      	ldr	r3, [pc, #428]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a78:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a84:	4a67      	ldr	r2, [pc, #412]	@ (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a86:	430b      	orrs	r3, r1
 8008a88:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	2100      	movs	r1, #0
 8008a94:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	d011      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	3308      	adds	r3, #8
 8008aac:	2100      	movs	r1, #0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f8ba 	bl	8008c28 <RCCEx_PLL2_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	6239      	str	r1, [r7, #32]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8008adc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	d011      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	3308      	adds	r3, #8
 8008aec:	2101      	movs	r1, #1
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 f89a 	bl	8008c28 <RCCEx_PLL2_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	2100      	movs	r1, #0
 8008b14:	61b9      	str	r1, [r7, #24]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	61fb      	str	r3, [r7, #28]
 8008b1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008b20:	460b      	mov	r3, r1
 8008b22:	4313      	orrs	r3, r2
 8008b24:	d011      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f87a 	bl	8008c28 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	2100      	movs	r1, #0
 8008b54:	6139      	str	r1, [r7, #16]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008b60:	460b      	mov	r3, r1
 8008b62:	4313      	orrs	r3, r2
 8008b64:	d011      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6a:	3328      	adds	r3, #40	@ 0x28
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f90c 	bl	8008d8c <RCCEx_PLL3_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	2100      	movs	r1, #0
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	d011      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008baa:	3328      	adds	r3, #40	@ 0x28
 8008bac:	2101      	movs	r1, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f8ec 	bl	8008d8c <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008be0:	460b      	mov	r3, r1
 8008be2:	4313      	orrs	r3, r2
 8008be4:	d011      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	3328      	adds	r3, #40	@ 0x28
 8008bec:	2102      	movs	r1, #2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f8cc 	bl	8008d8c <RCCEx_PLL3_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008c0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	e000      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c24:	58024400 	.word	0x58024400

08008c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c36:	4b53      	ldr	r3, [pc, #332]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d101      	bne.n	8008c46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e099      	b.n	8008d7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c46:	4b4f      	ldr	r3, [pc, #316]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c52:	f7f8 fd05 	bl	8001660 <HAL_GetTick>
 8008c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c58:	e008      	b.n	8008c6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c5a:	f7f8 fd01 	bl	8001660 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e086      	b.n	8008d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c6c:	4b45      	ldr	r3, [pc, #276]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1f0      	bne.n	8008c5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c78:	4b42      	ldr	r3, [pc, #264]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	031b      	lsls	r3, r3, #12
 8008c86:	493f      	ldr	r1, [pc, #252]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	025b      	lsls	r3, r3, #9
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	061b      	lsls	r3, r3, #24
 8008cb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cbc:	4931      	ldr	r1, [pc, #196]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cc2:	4b30      	ldr	r3, [pc, #192]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	492d      	ldr	r1, [pc, #180]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	f023 0220 	bic.w	r2, r3, #32
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	4928      	ldr	r1, [pc, #160]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ce6:	4b27      	ldr	r3, [pc, #156]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cea:	4a26      	ldr	r2, [pc, #152]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cec:	f023 0310 	bic.w	r3, r3, #16
 8008cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008cf2:	4b24      	ldr	r3, [pc, #144]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cf6:	4b24      	ldr	r3, [pc, #144]	@ (8008d88 <RCCEx_PLL2_Config+0x160>)
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	69d2      	ldr	r2, [r2, #28]
 8008cfe:	00d2      	lsls	r2, r2, #3
 8008d00:	4920      	ldr	r1, [pc, #128]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d06:	4b1f      	ldr	r3, [pc, #124]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d0c:	f043 0310 	orr.w	r3, r3, #16
 8008d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d18:	4b1a      	ldr	r3, [pc, #104]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4a19      	ldr	r2, [pc, #100]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d24:	e00f      	b.n	8008d46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d106      	bne.n	8008d3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d2c:	4b15      	ldr	r3, [pc, #84]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	4a14      	ldr	r2, [pc, #80]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d38:	e005      	b.n	8008d46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d3a:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	4a11      	ldr	r2, [pc, #68]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d46:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d52:	f7f8 fc85 	bl	8001660 <HAL_GetTick>
 8008d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d58:	e008      	b.n	8008d6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d5a:	f7f8 fc81 	bl	8001660 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e006      	b.n	8008d7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d6c:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <RCCEx_PLL2_Config+0x15c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
 8008d88:	ffff0007 	.word	0xffff0007

08008d8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d9a:	4b53      	ldr	r3, [pc, #332]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d101      	bne.n	8008daa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e099      	b.n	8008ede <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008daa:	4b4f      	ldr	r3, [pc, #316]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a4e      	ldr	r2, [pc, #312]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db6:	f7f8 fc53 	bl	8001660 <HAL_GetTick>
 8008dba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dbc:	e008      	b.n	8008dd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dbe:	f7f8 fc4f 	bl	8001660 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d901      	bls.n	8008dd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e086      	b.n	8008ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dd0:	4b45      	ldr	r3, [pc, #276]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1f0      	bne.n	8008dbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ddc:	4b42      	ldr	r3, [pc, #264]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	051b      	lsls	r3, r3, #20
 8008dea:	493f      	ldr	r1, [pc, #252]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	025b      	lsls	r3, r3, #9
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	041b      	lsls	r3, r3, #16
 8008e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	061b      	lsls	r3, r3, #24
 8008e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e20:	4931      	ldr	r1, [pc, #196]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e26:	4b30      	ldr	r3, [pc, #192]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	492d      	ldr	r1, [pc, #180]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e38:	4b2b      	ldr	r3, [pc, #172]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	4928      	ldr	r1, [pc, #160]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4e:	4a26      	ldr	r2, [pc, #152]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e56:	4b24      	ldr	r3, [pc, #144]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <RCCEx_PLL3_Config+0x160>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	69d2      	ldr	r2, [r2, #28]
 8008e62:	00d2      	lsls	r2, r2, #3
 8008e64:	4920      	ldr	r1, [pc, #128]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d106      	bne.n	8008e8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008e86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e88:	e00f      	b.n	8008eaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d106      	bne.n	8008e9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e90:	4b15      	ldr	r3, [pc, #84]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	4a14      	ldr	r2, [pc, #80]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008e96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008e9c:	e005      	b.n	8008eaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e9e:	4b12      	ldr	r3, [pc, #72]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea2:	4a11      	ldr	r2, [pc, #68]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a0e      	ldr	r2, [pc, #56]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eb6:	f7f8 fbd3 	bl	8001660 <HAL_GetTick>
 8008eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ebc:	e008      	b.n	8008ed0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ebe:	f7f8 fbcf 	bl	8001660 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e006      	b.n	8008ede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ed0:	4b05      	ldr	r3, [pc, #20]	@ (8008ee8 <RCCEx_PLL3_Config+0x15c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0f0      	beq.n	8008ebe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	ffff0007 	.word	0xffff0007

08008ef0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e03e      	b.n	8008f84 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7f8 f976 	bl	800120c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3308      	adds	r3, #8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f000 f830 	bl	8008f90 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	f000 f8b8 	bl	80090b0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6858      	ldr	r0, [r3, #4]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	f000 f8ff 	bl	8009150 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	6892      	ldr	r2, [r2, #8]
 8008f5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	6892      	ldr	r2, [r2, #8]
 8008f66:	f041 0101 	orr.w	r1, r1, #1
 8008f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008f6e:	4b07      	ldr	r3, [pc, #28]	@ (8008f8c <HAL_SRAM_Init+0x9c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a06      	ldr	r2, [pc, #24]	@ (8008f8c <HAL_SRAM_Init+0x9c>)
 8008f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	52004000 	.word	0x52004000

08008f90 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	f023 0101 	bic.w	r1, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d102      	bne.n	8008fc0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008fba:	2340      	movs	r3, #64	@ 0x40
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e001      	b.n	8008fc4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008fd0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008fd6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008fdc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008fe2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008fe8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008fee:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008ff4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8008ffa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8009000:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8009006:	4313      	orrs	r3, r2
 8009008:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4313      	orrs	r3, r2
 8009012:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	4313      	orrs	r3, r2
 8009026:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8009028:	4b20      	ldr	r3, [pc, #128]	@ (80090ac <FMC_NORSRAM_Init+0x11c>)
 800902a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009032:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800903a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009042:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	43db      	mvns	r3, r3
 8009052:	ea02 0103 	and.w	r1, r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	4319      	orrs	r1, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009068:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800906c:	d10c      	bne.n	8009088 <FMC_NORSRAM_Init+0xf8>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	0008fb7f 	.word	0x0008fb7f

080090b0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	021b      	lsls	r3, r3, #8
 80090dc:	431a      	orrs	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	431a      	orrs	r2, r3
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	051b      	lsls	r3, r3, #20
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	3b02      	subs	r3, #2
 80090f6:	061b      	lsls	r3, r3, #24
 80090f8:	431a      	orrs	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	4313      	orrs	r3, r2
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	3201      	adds	r2, #1
 8009104:	4319      	orrs	r1, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009118:	d113      	bne.n	8009142 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009122:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	3b01      	subs	r3, #1
 800912a:	051b      	lsls	r3, r3, #20
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009164:	d11d      	bne.n	80091a2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009170:	4013      	ands	r3, r2
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	6811      	ldr	r1, [r2, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	6852      	ldr	r2, [r2, #4]
 800917a:	0112      	lsls	r2, r2, #4
 800917c:	4311      	orrs	r1, r2
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	6892      	ldr	r2, [r2, #8]
 8009182:	0212      	lsls	r2, r2, #8
 8009184:	4311      	orrs	r1, r2
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	6992      	ldr	r2, [r2, #24]
 800918a:	4311      	orrs	r1, r2
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	68d2      	ldr	r2, [r2, #12]
 8009190:	0412      	lsls	r2, r2, #16
 8009192:	430a      	orrs	r2, r1
 8009194:	ea43 0102 	orr.w	r1, r3, r2
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80091a0:	e005      	b.n	80091ae <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80091aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	cff00000 	.word	0xcff00000

080091c0 <std>:
 80091c0:	2300      	movs	r3, #0
 80091c2:	b510      	push	{r4, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	e9c0 3300 	strd	r3, r3, [r0]
 80091ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ce:	6083      	str	r3, [r0, #8]
 80091d0:	8181      	strh	r1, [r0, #12]
 80091d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80091d4:	81c2      	strh	r2, [r0, #14]
 80091d6:	6183      	str	r3, [r0, #24]
 80091d8:	4619      	mov	r1, r3
 80091da:	2208      	movs	r2, #8
 80091dc:	305c      	adds	r0, #92	@ 0x5c
 80091de:	f000 f906 	bl	80093ee <memset>
 80091e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <std+0x58>)
 80091e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80091e6:	4b0d      	ldr	r3, [pc, #52]	@ (800921c <std+0x5c>)
 80091e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <std+0x60>)
 80091ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <std+0x64>)
 80091f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <std+0x68>)
 80091f4:	6224      	str	r4, [r4, #32]
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d006      	beq.n	8009208 <std+0x48>
 80091fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091fe:	4294      	cmp	r4, r2
 8009200:	d002      	beq.n	8009208 <std+0x48>
 8009202:	33d0      	adds	r3, #208	@ 0xd0
 8009204:	429c      	cmp	r4, r3
 8009206:	d105      	bne.n	8009214 <std+0x54>
 8009208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009210:	f000 b966 	b.w	80094e0 <__retarget_lock_init_recursive>
 8009214:	bd10      	pop	{r4, pc}
 8009216:	bf00      	nop
 8009218:	08009369 	.word	0x08009369
 800921c:	0800938b 	.word	0x0800938b
 8009220:	080093c3 	.word	0x080093c3
 8009224:	080093e7 	.word	0x080093e7
 8009228:	24000218 	.word	0x24000218

0800922c <stdio_exit_handler>:
 800922c:	4a02      	ldr	r2, [pc, #8]	@ (8009238 <stdio_exit_handler+0xc>)
 800922e:	4903      	ldr	r1, [pc, #12]	@ (800923c <stdio_exit_handler+0x10>)
 8009230:	4803      	ldr	r0, [pc, #12]	@ (8009240 <stdio_exit_handler+0x14>)
 8009232:	f000 b869 	b.w	8009308 <_fwalk_sglue>
 8009236:	bf00      	nop
 8009238:	24000010 	.word	0x24000010
 800923c:	08009d81 	.word	0x08009d81
 8009240:	24000020 	.word	0x24000020

08009244 <cleanup_stdio>:
 8009244:	6841      	ldr	r1, [r0, #4]
 8009246:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <cleanup_stdio+0x34>)
 8009248:	4299      	cmp	r1, r3
 800924a:	b510      	push	{r4, lr}
 800924c:	4604      	mov	r4, r0
 800924e:	d001      	beq.n	8009254 <cleanup_stdio+0x10>
 8009250:	f000 fd96 	bl	8009d80 <_fflush_r>
 8009254:	68a1      	ldr	r1, [r4, #8]
 8009256:	4b09      	ldr	r3, [pc, #36]	@ (800927c <cleanup_stdio+0x38>)
 8009258:	4299      	cmp	r1, r3
 800925a:	d002      	beq.n	8009262 <cleanup_stdio+0x1e>
 800925c:	4620      	mov	r0, r4
 800925e:	f000 fd8f 	bl	8009d80 <_fflush_r>
 8009262:	68e1      	ldr	r1, [r4, #12]
 8009264:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <cleanup_stdio+0x3c>)
 8009266:	4299      	cmp	r1, r3
 8009268:	d004      	beq.n	8009274 <cleanup_stdio+0x30>
 800926a:	4620      	mov	r0, r4
 800926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009270:	f000 bd86 	b.w	8009d80 <_fflush_r>
 8009274:	bd10      	pop	{r4, pc}
 8009276:	bf00      	nop
 8009278:	24000218 	.word	0x24000218
 800927c:	24000280 	.word	0x24000280
 8009280:	240002e8 	.word	0x240002e8

08009284 <global_stdio_init.part.0>:
 8009284:	b510      	push	{r4, lr}
 8009286:	4b0b      	ldr	r3, [pc, #44]	@ (80092b4 <global_stdio_init.part.0+0x30>)
 8009288:	4c0b      	ldr	r4, [pc, #44]	@ (80092b8 <global_stdio_init.part.0+0x34>)
 800928a:	4a0c      	ldr	r2, [pc, #48]	@ (80092bc <global_stdio_init.part.0+0x38>)
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	4620      	mov	r0, r4
 8009290:	2200      	movs	r2, #0
 8009292:	2104      	movs	r1, #4
 8009294:	f7ff ff94 	bl	80091c0 <std>
 8009298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800929c:	2201      	movs	r2, #1
 800929e:	2109      	movs	r1, #9
 80092a0:	f7ff ff8e 	bl	80091c0 <std>
 80092a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092a8:	2202      	movs	r2, #2
 80092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ae:	2112      	movs	r1, #18
 80092b0:	f7ff bf86 	b.w	80091c0 <std>
 80092b4:	24000350 	.word	0x24000350
 80092b8:	24000218 	.word	0x24000218
 80092bc:	0800922d 	.word	0x0800922d

080092c0 <__sfp_lock_acquire>:
 80092c0:	4801      	ldr	r0, [pc, #4]	@ (80092c8 <__sfp_lock_acquire+0x8>)
 80092c2:	f000 b90e 	b.w	80094e2 <__retarget_lock_acquire_recursive>
 80092c6:	bf00      	nop
 80092c8:	24000359 	.word	0x24000359

080092cc <__sfp_lock_release>:
 80092cc:	4801      	ldr	r0, [pc, #4]	@ (80092d4 <__sfp_lock_release+0x8>)
 80092ce:	f000 b909 	b.w	80094e4 <__retarget_lock_release_recursive>
 80092d2:	bf00      	nop
 80092d4:	24000359 	.word	0x24000359

080092d8 <__sinit>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	4604      	mov	r4, r0
 80092dc:	f7ff fff0 	bl	80092c0 <__sfp_lock_acquire>
 80092e0:	6a23      	ldr	r3, [r4, #32]
 80092e2:	b11b      	cbz	r3, 80092ec <__sinit+0x14>
 80092e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e8:	f7ff bff0 	b.w	80092cc <__sfp_lock_release>
 80092ec:	4b04      	ldr	r3, [pc, #16]	@ (8009300 <__sinit+0x28>)
 80092ee:	6223      	str	r3, [r4, #32]
 80092f0:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <__sinit+0x2c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f5      	bne.n	80092e4 <__sinit+0xc>
 80092f8:	f7ff ffc4 	bl	8009284 <global_stdio_init.part.0>
 80092fc:	e7f2      	b.n	80092e4 <__sinit+0xc>
 80092fe:	bf00      	nop
 8009300:	08009245 	.word	0x08009245
 8009304:	24000350 	.word	0x24000350

08009308 <_fwalk_sglue>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	4607      	mov	r7, r0
 800930e:	4688      	mov	r8, r1
 8009310:	4614      	mov	r4, r2
 8009312:	2600      	movs	r6, #0
 8009314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009318:	f1b9 0901 	subs.w	r9, r9, #1
 800931c:	d505      	bpl.n	800932a <_fwalk_sglue+0x22>
 800931e:	6824      	ldr	r4, [r4, #0]
 8009320:	2c00      	cmp	r4, #0
 8009322:	d1f7      	bne.n	8009314 <_fwalk_sglue+0xc>
 8009324:	4630      	mov	r0, r6
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	89ab      	ldrh	r3, [r5, #12]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d907      	bls.n	8009340 <_fwalk_sglue+0x38>
 8009330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009334:	3301      	adds	r3, #1
 8009336:	d003      	beq.n	8009340 <_fwalk_sglue+0x38>
 8009338:	4629      	mov	r1, r5
 800933a:	4638      	mov	r0, r7
 800933c:	47c0      	blx	r8
 800933e:	4306      	orrs	r6, r0
 8009340:	3568      	adds	r5, #104	@ 0x68
 8009342:	e7e9      	b.n	8009318 <_fwalk_sglue+0x10>

08009344 <iprintf>:
 8009344:	b40f      	push	{r0, r1, r2, r3}
 8009346:	b507      	push	{r0, r1, r2, lr}
 8009348:	4906      	ldr	r1, [pc, #24]	@ (8009364 <iprintf+0x20>)
 800934a:	ab04      	add	r3, sp, #16
 800934c:	6808      	ldr	r0, [r1, #0]
 800934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009352:	6881      	ldr	r1, [r0, #8]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f000 f9e9 	bl	800972c <_vfiprintf_r>
 800935a:	b003      	add	sp, #12
 800935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009360:	b004      	add	sp, #16
 8009362:	4770      	bx	lr
 8009364:	2400001c 	.word	0x2400001c

08009368 <__sread>:
 8009368:	b510      	push	{r4, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	f000 f868 	bl	8009444 <_read_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	bfab      	itete	ge
 8009378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800937a:	89a3      	ldrhlt	r3, [r4, #12]
 800937c:	181b      	addge	r3, r3, r0
 800937e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009382:	bfac      	ite	ge
 8009384:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009386:	81a3      	strhlt	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__swrite>:
 800938a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938e:	461f      	mov	r7, r3
 8009390:	898b      	ldrh	r3, [r1, #12]
 8009392:	05db      	lsls	r3, r3, #23
 8009394:	4605      	mov	r5, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4616      	mov	r6, r2
 800939a:	d505      	bpl.n	80093a8 <__swrite+0x1e>
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	2302      	movs	r3, #2
 80093a2:	2200      	movs	r2, #0
 80093a4:	f000 f83c 	bl	8009420 <_lseek_r>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	4628      	mov	r0, r5
 80093ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093be:	f000 b853 	b.w	8009468 <_write_r>

080093c2 <__sseek>:
 80093c2:	b510      	push	{r4, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ca:	f000 f829 	bl	8009420 <_lseek_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	bf15      	itete	ne
 80093d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093de:	81a3      	strheq	r3, [r4, #12]
 80093e0:	bf18      	it	ne
 80093e2:	81a3      	strhne	r3, [r4, #12]
 80093e4:	bd10      	pop	{r4, pc}

080093e6 <__sclose>:
 80093e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ea:	f000 b809 	b.w	8009400 <_close_r>

080093ee <memset>:
 80093ee:	4402      	add	r2, r0
 80093f0:	4603      	mov	r3, r0
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d100      	bne.n	80093f8 <memset+0xa>
 80093f6:	4770      	bx	lr
 80093f8:	f803 1b01 	strb.w	r1, [r3], #1
 80093fc:	e7f9      	b.n	80093f2 <memset+0x4>
	...

08009400 <_close_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	@ (800941c <_close_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f7 ff85 	bl	800131a <_close>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_close_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_close_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	24000354 	.word	0x24000354

08009420 <_lseek_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	@ (8009440 <_lseek_r+0x20>)
 8009424:	4604      	mov	r4, r0
 8009426:	4608      	mov	r0, r1
 8009428:	4611      	mov	r1, r2
 800942a:	2200      	movs	r2, #0
 800942c:	602a      	str	r2, [r5, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	f7f7 ff9a 	bl	8001368 <_lseek>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_lseek_r+0x1e>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_lseek_r+0x1e>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	24000354 	.word	0x24000354

08009444 <_read_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	@ (8009464 <_read_r+0x20>)
 8009448:	4604      	mov	r4, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	602a      	str	r2, [r5, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f7 ff28 	bl	80012a8 <_read>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_read_r+0x1e>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_read_r+0x1e>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	24000354 	.word	0x24000354

08009468 <_write_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	@ (8009488 <_write_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f7 ff33 	bl	80012e2 <_write>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_write_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_write_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	24000354 	.word	0x24000354

0800948c <__errno>:
 800948c:	4b01      	ldr	r3, [pc, #4]	@ (8009494 <__errno+0x8>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2400001c 	.word	0x2400001c

08009498 <__libc_init_array>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4d0d      	ldr	r5, [pc, #52]	@ (80094d0 <__libc_init_array+0x38>)
 800949c:	4c0d      	ldr	r4, [pc, #52]	@ (80094d4 <__libc_init_array+0x3c>)
 800949e:	1b64      	subs	r4, r4, r5
 80094a0:	10a4      	asrs	r4, r4, #2
 80094a2:	2600      	movs	r6, #0
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	d109      	bne.n	80094bc <__libc_init_array+0x24>
 80094a8:	4d0b      	ldr	r5, [pc, #44]	@ (80094d8 <__libc_init_array+0x40>)
 80094aa:	4c0c      	ldr	r4, [pc, #48]	@ (80094dc <__libc_init_array+0x44>)
 80094ac:	f000 fdb8 	bl	800a020 <_init>
 80094b0:	1b64      	subs	r4, r4, r5
 80094b2:	10a4      	asrs	r4, r4, #2
 80094b4:	2600      	movs	r6, #0
 80094b6:	42a6      	cmp	r6, r4
 80094b8:	d105      	bne.n	80094c6 <__libc_init_array+0x2e>
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c0:	4798      	blx	r3
 80094c2:	3601      	adds	r6, #1
 80094c4:	e7ee      	b.n	80094a4 <__libc_init_array+0xc>
 80094c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ca:	4798      	blx	r3
 80094cc:	3601      	adds	r6, #1
 80094ce:	e7f2      	b.n	80094b6 <__libc_init_array+0x1e>
 80094d0:	0800a100 	.word	0x0800a100
 80094d4:	0800a100 	.word	0x0800a100
 80094d8:	0800a100 	.word	0x0800a100
 80094dc:	0800a104 	.word	0x0800a104

080094e0 <__retarget_lock_init_recursive>:
 80094e0:	4770      	bx	lr

080094e2 <__retarget_lock_acquire_recursive>:
 80094e2:	4770      	bx	lr

080094e4 <__retarget_lock_release_recursive>:
 80094e4:	4770      	bx	lr
	...

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d041      	beq.n	8009574 <_free_r+0x8c>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f000 f8e0 	bl	80096c0 <__malloc_lock>
 8009500:	4a1d      	ldr	r2, [pc, #116]	@ (8009578 <_free_r+0x90>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x2c>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	4628      	mov	r0, r5
 800950c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009510:	f000 b8dc 	b.w	80096cc <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x42>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	1821      	adds	r1, r4, r0
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x1e>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x4c>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x42>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1850      	adds	r0, r2, r1
 8009538:	42a0      	cmp	r0, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x6c>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	4401      	add	r1, r0
 8009540:	1850      	adds	r0, r2, r1
 8009542:	4283      	cmp	r3, r0
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x22>
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	6053      	str	r3, [r2, #4]
 800954e:	4408      	add	r0, r1
 8009550:	6010      	str	r0, [r2, #0]
 8009552:	e7da      	b.n	800950a <_free_r+0x22>
 8009554:	d902      	bls.n	800955c <_free_r+0x74>
 8009556:	230c      	movs	r3, #12
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x22>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	1821      	adds	r1, r4, r0
 8009560:	428b      	cmp	r3, r1
 8009562:	bf04      	itt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	bf04      	itt	eq
 800956c:	1809      	addeq	r1, r1, r0
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	6054      	str	r4, [r2, #4]
 8009572:	e7ca      	b.n	800950a <_free_r+0x22>
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	24000360 	.word	0x24000360

0800957c <sbrk_aligned>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4e0f      	ldr	r6, [pc, #60]	@ (80095bc <sbrk_aligned+0x40>)
 8009580:	460c      	mov	r4, r1
 8009582:	6831      	ldr	r1, [r6, #0]
 8009584:	4605      	mov	r5, r0
 8009586:	b911      	cbnz	r1, 800958e <sbrk_aligned+0x12>
 8009588:	f000 fcb6 	bl	8009ef8 <_sbrk_r>
 800958c:	6030      	str	r0, [r6, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	4628      	mov	r0, r5
 8009592:	f000 fcb1 	bl	8009ef8 <_sbrk_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	d103      	bne.n	80095a2 <sbrk_aligned+0x26>
 800959a:	f04f 34ff 	mov.w	r4, #4294967295
 800959e:	4620      	mov	r0, r4
 80095a0:	bd70      	pop	{r4, r5, r6, pc}
 80095a2:	1cc4      	adds	r4, r0, #3
 80095a4:	f024 0403 	bic.w	r4, r4, #3
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d0f8      	beq.n	800959e <sbrk_aligned+0x22>
 80095ac:	1a21      	subs	r1, r4, r0
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 fca2 	bl	8009ef8 <_sbrk_r>
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1f2      	bne.n	800959e <sbrk_aligned+0x22>
 80095b8:	e7ef      	b.n	800959a <sbrk_aligned+0x1e>
 80095ba:	bf00      	nop
 80095bc:	2400035c 	.word	0x2400035c

080095c0 <_malloc_r>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	1ccd      	adds	r5, r1, #3
 80095c6:	f025 0503 	bic.w	r5, r5, #3
 80095ca:	3508      	adds	r5, #8
 80095cc:	2d0c      	cmp	r5, #12
 80095ce:	bf38      	it	cc
 80095d0:	250c      	movcc	r5, #12
 80095d2:	2d00      	cmp	r5, #0
 80095d4:	4606      	mov	r6, r0
 80095d6:	db01      	blt.n	80095dc <_malloc_r+0x1c>
 80095d8:	42a9      	cmp	r1, r5
 80095da:	d904      	bls.n	80095e6 <_malloc_r+0x26>
 80095dc:	230c      	movs	r3, #12
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	2000      	movs	r0, #0
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096bc <_malloc_r+0xfc>
 80095ea:	f000 f869 	bl	80096c0 <__malloc_lock>
 80095ee:	f8d8 3000 	ldr.w	r3, [r8]
 80095f2:	461c      	mov	r4, r3
 80095f4:	bb44      	cbnz	r4, 8009648 <_malloc_r+0x88>
 80095f6:	4629      	mov	r1, r5
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ffbf 	bl	800957c <sbrk_aligned>
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	4604      	mov	r4, r0
 8009602:	d158      	bne.n	80096b6 <_malloc_r+0xf6>
 8009604:	f8d8 4000 	ldr.w	r4, [r8]
 8009608:	4627      	mov	r7, r4
 800960a:	2f00      	cmp	r7, #0
 800960c:	d143      	bne.n	8009696 <_malloc_r+0xd6>
 800960e:	2c00      	cmp	r4, #0
 8009610:	d04b      	beq.n	80096aa <_malloc_r+0xea>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	eb04 0903 	add.w	r9, r4, r3
 800961c:	f000 fc6c 	bl	8009ef8 <_sbrk_r>
 8009620:	4581      	cmp	r9, r0
 8009622:	d142      	bne.n	80096aa <_malloc_r+0xea>
 8009624:	6821      	ldr	r1, [r4, #0]
 8009626:	1a6d      	subs	r5, r5, r1
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa6 	bl	800957c <sbrk_aligned>
 8009630:	3001      	adds	r0, #1
 8009632:	d03a      	beq.n	80096aa <_malloc_r+0xea>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	442b      	add	r3, r5
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	bb62      	cbnz	r2, 800969c <_malloc_r+0xdc>
 8009642:	f8c8 7000 	str.w	r7, [r8]
 8009646:	e00f      	b.n	8009668 <_malloc_r+0xa8>
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	1b52      	subs	r2, r2, r5
 800964c:	d420      	bmi.n	8009690 <_malloc_r+0xd0>
 800964e:	2a0b      	cmp	r2, #11
 8009650:	d917      	bls.n	8009682 <_malloc_r+0xc2>
 8009652:	1961      	adds	r1, r4, r5
 8009654:	42a3      	cmp	r3, r4
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	bf18      	it	ne
 800965a:	6059      	strne	r1, [r3, #4]
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	bf08      	it	eq
 8009660:	f8c8 1000 	streq.w	r1, [r8]
 8009664:	5162      	str	r2, [r4, r5]
 8009666:	604b      	str	r3, [r1, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 f82f 	bl	80096cc <__malloc_unlock>
 800966e:	f104 000b 	add.w	r0, r4, #11
 8009672:	1d23      	adds	r3, r4, #4
 8009674:	f020 0007 	bic.w	r0, r0, #7
 8009678:	1ac2      	subs	r2, r0, r3
 800967a:	bf1c      	itt	ne
 800967c:	1a1b      	subne	r3, r3, r0
 800967e:	50a3      	strne	r3, [r4, r2]
 8009680:	e7af      	b.n	80095e2 <_malloc_r+0x22>
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	42a3      	cmp	r3, r4
 8009686:	bf0c      	ite	eq
 8009688:	f8c8 2000 	streq.w	r2, [r8]
 800968c:	605a      	strne	r2, [r3, #4]
 800968e:	e7eb      	b.n	8009668 <_malloc_r+0xa8>
 8009690:	4623      	mov	r3, r4
 8009692:	6864      	ldr	r4, [r4, #4]
 8009694:	e7ae      	b.n	80095f4 <_malloc_r+0x34>
 8009696:	463c      	mov	r4, r7
 8009698:	687f      	ldr	r7, [r7, #4]
 800969a:	e7b6      	b.n	800960a <_malloc_r+0x4a>
 800969c:	461a      	mov	r2, r3
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d1fb      	bne.n	800969c <_malloc_r+0xdc>
 80096a4:	2300      	movs	r3, #0
 80096a6:	6053      	str	r3, [r2, #4]
 80096a8:	e7de      	b.n	8009668 <_malloc_r+0xa8>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6033      	str	r3, [r6, #0]
 80096ae:	4630      	mov	r0, r6
 80096b0:	f000 f80c 	bl	80096cc <__malloc_unlock>
 80096b4:	e794      	b.n	80095e0 <_malloc_r+0x20>
 80096b6:	6005      	str	r5, [r0, #0]
 80096b8:	e7d6      	b.n	8009668 <_malloc_r+0xa8>
 80096ba:	bf00      	nop
 80096bc:	24000360 	.word	0x24000360

080096c0 <__malloc_lock>:
 80096c0:	4801      	ldr	r0, [pc, #4]	@ (80096c8 <__malloc_lock+0x8>)
 80096c2:	f7ff bf0e 	b.w	80094e2 <__retarget_lock_acquire_recursive>
 80096c6:	bf00      	nop
 80096c8:	24000358 	.word	0x24000358

080096cc <__malloc_unlock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_unlock+0x8>)
 80096ce:	f7ff bf09 	b.w	80094e4 <__retarget_lock_release_recursive>
 80096d2:	bf00      	nop
 80096d4:	24000358 	.word	0x24000358

080096d8 <__sfputc_r>:
 80096d8:	6893      	ldr	r3, [r2, #8]
 80096da:	3b01      	subs	r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	b410      	push	{r4}
 80096e0:	6093      	str	r3, [r2, #8]
 80096e2:	da08      	bge.n	80096f6 <__sfputc_r+0x1e>
 80096e4:	6994      	ldr	r4, [r2, #24]
 80096e6:	42a3      	cmp	r3, r4
 80096e8:	db01      	blt.n	80096ee <__sfputc_r+0x16>
 80096ea:	290a      	cmp	r1, #10
 80096ec:	d103      	bne.n	80096f6 <__sfputc_r+0x1e>
 80096ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f2:	f000 bb6d 	b.w	8009dd0 <__swbuf_r>
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	1c58      	adds	r0, r3, #1
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	7019      	strb	r1, [r3, #0]
 80096fe:	4608      	mov	r0, r1
 8009700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009704:	4770      	bx	lr

08009706 <__sfputs_r>:
 8009706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009708:	4606      	mov	r6, r0
 800970a:	460f      	mov	r7, r1
 800970c:	4614      	mov	r4, r2
 800970e:	18d5      	adds	r5, r2, r3
 8009710:	42ac      	cmp	r4, r5
 8009712:	d101      	bne.n	8009718 <__sfputs_r+0x12>
 8009714:	2000      	movs	r0, #0
 8009716:	e007      	b.n	8009728 <__sfputs_r+0x22>
 8009718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971c:	463a      	mov	r2, r7
 800971e:	4630      	mov	r0, r6
 8009720:	f7ff ffda 	bl	80096d8 <__sfputc_r>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d1f3      	bne.n	8009710 <__sfputs_r+0xa>
 8009728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800972c <_vfiprintf_r>:
 800972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	460d      	mov	r5, r1
 8009732:	b09d      	sub	sp, #116	@ 0x74
 8009734:	4614      	mov	r4, r2
 8009736:	4698      	mov	r8, r3
 8009738:	4606      	mov	r6, r0
 800973a:	b118      	cbz	r0, 8009744 <_vfiprintf_r+0x18>
 800973c:	6a03      	ldr	r3, [r0, #32]
 800973e:	b90b      	cbnz	r3, 8009744 <_vfiprintf_r+0x18>
 8009740:	f7ff fdca 	bl	80092d8 <__sinit>
 8009744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d405      	bmi.n	8009756 <_vfiprintf_r+0x2a>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	059a      	lsls	r2, r3, #22
 800974e:	d402      	bmi.n	8009756 <_vfiprintf_r+0x2a>
 8009750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009752:	f7ff fec6 	bl	80094e2 <__retarget_lock_acquire_recursive>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	071b      	lsls	r3, r3, #28
 800975a:	d501      	bpl.n	8009760 <_vfiprintf_r+0x34>
 800975c:	692b      	ldr	r3, [r5, #16]
 800975e:	b99b      	cbnz	r3, 8009788 <_vfiprintf_r+0x5c>
 8009760:	4629      	mov	r1, r5
 8009762:	4630      	mov	r0, r6
 8009764:	f000 fb72 	bl	8009e4c <__swsetup_r>
 8009768:	b170      	cbz	r0, 8009788 <_vfiprintf_r+0x5c>
 800976a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800976c:	07dc      	lsls	r4, r3, #31
 800976e:	d504      	bpl.n	800977a <_vfiprintf_r+0x4e>
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	b01d      	add	sp, #116	@ 0x74
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	89ab      	ldrh	r3, [r5, #12]
 800977c:	0598      	lsls	r0, r3, #22
 800977e:	d4f7      	bmi.n	8009770 <_vfiprintf_r+0x44>
 8009780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009782:	f7ff feaf 	bl	80094e4 <__retarget_lock_release_recursive>
 8009786:	e7f3      	b.n	8009770 <_vfiprintf_r+0x44>
 8009788:	2300      	movs	r3, #0
 800978a:	9309      	str	r3, [sp, #36]	@ 0x24
 800978c:	2320      	movs	r3, #32
 800978e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009792:	f8cd 800c 	str.w	r8, [sp, #12]
 8009796:	2330      	movs	r3, #48	@ 0x30
 8009798:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009948 <_vfiprintf_r+0x21c>
 800979c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097a0:	f04f 0901 	mov.w	r9, #1
 80097a4:	4623      	mov	r3, r4
 80097a6:	469a      	mov	sl, r3
 80097a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ac:	b10a      	cbz	r2, 80097b2 <_vfiprintf_r+0x86>
 80097ae:	2a25      	cmp	r2, #37	@ 0x25
 80097b0:	d1f9      	bne.n	80097a6 <_vfiprintf_r+0x7a>
 80097b2:	ebba 0b04 	subs.w	fp, sl, r4
 80097b6:	d00b      	beq.n	80097d0 <_vfiprintf_r+0xa4>
 80097b8:	465b      	mov	r3, fp
 80097ba:	4622      	mov	r2, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ffa1 	bl	8009706 <__sfputs_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	f000 80a7 	beq.w	8009918 <_vfiprintf_r+0x1ec>
 80097ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097cc:	445a      	add	r2, fp
 80097ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80097d0:	f89a 3000 	ldrb.w	r3, [sl]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 809f 	beq.w	8009918 <_vfiprintf_r+0x1ec>
 80097da:	2300      	movs	r3, #0
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e4:	f10a 0a01 	add.w	sl, sl, #1
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80097f2:	4654      	mov	r4, sl
 80097f4:	2205      	movs	r2, #5
 80097f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fa:	4853      	ldr	r0, [pc, #332]	@ (8009948 <_vfiprintf_r+0x21c>)
 80097fc:	f7f6 fd70 	bl	80002e0 <memchr>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	b9d8      	cbnz	r0, 800983c <_vfiprintf_r+0x110>
 8009804:	06d1      	lsls	r1, r2, #27
 8009806:	bf44      	itt	mi
 8009808:	2320      	movmi	r3, #32
 800980a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800980e:	0713      	lsls	r3, r2, #28
 8009810:	bf44      	itt	mi
 8009812:	232b      	movmi	r3, #43	@ 0x2b
 8009814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009818:	f89a 3000 	ldrb.w	r3, [sl]
 800981c:	2b2a      	cmp	r3, #42	@ 0x2a
 800981e:	d015      	beq.n	800984c <_vfiprintf_r+0x120>
 8009820:	9a07      	ldr	r2, [sp, #28]
 8009822:	4654      	mov	r4, sl
 8009824:	2000      	movs	r0, #0
 8009826:	f04f 0c0a 	mov.w	ip, #10
 800982a:	4621      	mov	r1, r4
 800982c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009830:	3b30      	subs	r3, #48	@ 0x30
 8009832:	2b09      	cmp	r3, #9
 8009834:	d94b      	bls.n	80098ce <_vfiprintf_r+0x1a2>
 8009836:	b1b0      	cbz	r0, 8009866 <_vfiprintf_r+0x13a>
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	e014      	b.n	8009866 <_vfiprintf_r+0x13a>
 800983c:	eba0 0308 	sub.w	r3, r0, r8
 8009840:	fa09 f303 	lsl.w	r3, r9, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	46a2      	mov	sl, r4
 800984a:	e7d2      	b.n	80097f2 <_vfiprintf_r+0xc6>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1d19      	adds	r1, r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	9103      	str	r1, [sp, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfbb      	ittet	lt
 8009858:	425b      	neglt	r3, r3
 800985a:	f042 0202 	orrlt.w	r2, r2, #2
 800985e:	9307      	strge	r3, [sp, #28]
 8009860:	9307      	strlt	r3, [sp, #28]
 8009862:	bfb8      	it	lt
 8009864:	9204      	strlt	r2, [sp, #16]
 8009866:	7823      	ldrb	r3, [r4, #0]
 8009868:	2b2e      	cmp	r3, #46	@ 0x2e
 800986a:	d10a      	bne.n	8009882 <_vfiprintf_r+0x156>
 800986c:	7863      	ldrb	r3, [r4, #1]
 800986e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009870:	d132      	bne.n	80098d8 <_vfiprintf_r+0x1ac>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	1d1a      	adds	r2, r3, #4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9203      	str	r2, [sp, #12]
 800987a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800987e:	3402      	adds	r4, #2
 8009880:	9305      	str	r3, [sp, #20]
 8009882:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009958 <_vfiprintf_r+0x22c>
 8009886:	7821      	ldrb	r1, [r4, #0]
 8009888:	2203      	movs	r2, #3
 800988a:	4650      	mov	r0, sl
 800988c:	f7f6 fd28 	bl	80002e0 <memchr>
 8009890:	b138      	cbz	r0, 80098a2 <_vfiprintf_r+0x176>
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	eba0 000a 	sub.w	r0, r0, sl
 8009898:	2240      	movs	r2, #64	@ 0x40
 800989a:	4082      	lsls	r2, r0
 800989c:	4313      	orrs	r3, r2
 800989e:	3401      	adds	r4, #1
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a6:	4829      	ldr	r0, [pc, #164]	@ (800994c <_vfiprintf_r+0x220>)
 80098a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ac:	2206      	movs	r2, #6
 80098ae:	f7f6 fd17 	bl	80002e0 <memchr>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d03f      	beq.n	8009936 <_vfiprintf_r+0x20a>
 80098b6:	4b26      	ldr	r3, [pc, #152]	@ (8009950 <_vfiprintf_r+0x224>)
 80098b8:	bb1b      	cbnz	r3, 8009902 <_vfiprintf_r+0x1d6>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	3307      	adds	r3, #7
 80098be:	f023 0307 	bic.w	r3, r3, #7
 80098c2:	3308      	adds	r3, #8
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c8:	443b      	add	r3, r7
 80098ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80098cc:	e76a      	b.n	80097a4 <_vfiprintf_r+0x78>
 80098ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d2:	460c      	mov	r4, r1
 80098d4:	2001      	movs	r0, #1
 80098d6:	e7a8      	b.n	800982a <_vfiprintf_r+0xfe>
 80098d8:	2300      	movs	r3, #0
 80098da:	3401      	adds	r4, #1
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	4619      	mov	r1, r3
 80098e0:	f04f 0c0a 	mov.w	ip, #10
 80098e4:	4620      	mov	r0, r4
 80098e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ea:	3a30      	subs	r2, #48	@ 0x30
 80098ec:	2a09      	cmp	r2, #9
 80098ee:	d903      	bls.n	80098f8 <_vfiprintf_r+0x1cc>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0c6      	beq.n	8009882 <_vfiprintf_r+0x156>
 80098f4:	9105      	str	r1, [sp, #20]
 80098f6:	e7c4      	b.n	8009882 <_vfiprintf_r+0x156>
 80098f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098fc:	4604      	mov	r4, r0
 80098fe:	2301      	movs	r3, #1
 8009900:	e7f0      	b.n	80098e4 <_vfiprintf_r+0x1b8>
 8009902:	ab03      	add	r3, sp, #12
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	462a      	mov	r2, r5
 8009908:	4b12      	ldr	r3, [pc, #72]	@ (8009954 <_vfiprintf_r+0x228>)
 800990a:	a904      	add	r1, sp, #16
 800990c:	4630      	mov	r0, r6
 800990e:	f3af 8000 	nop.w
 8009912:	4607      	mov	r7, r0
 8009914:	1c78      	adds	r0, r7, #1
 8009916:	d1d6      	bne.n	80098c6 <_vfiprintf_r+0x19a>
 8009918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800991a:	07d9      	lsls	r1, r3, #31
 800991c:	d405      	bmi.n	800992a <_vfiprintf_r+0x1fe>
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d402      	bmi.n	800992a <_vfiprintf_r+0x1fe>
 8009924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009926:	f7ff fddd 	bl	80094e4 <__retarget_lock_release_recursive>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	065b      	lsls	r3, r3, #25
 800992e:	f53f af1f 	bmi.w	8009770 <_vfiprintf_r+0x44>
 8009932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009934:	e71e      	b.n	8009774 <_vfiprintf_r+0x48>
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <_vfiprintf_r+0x228>)
 800993e:	a904      	add	r1, sp, #16
 8009940:	4630      	mov	r0, r6
 8009942:	f000 f879 	bl	8009a38 <_printf_i>
 8009946:	e7e4      	b.n	8009912 <_vfiprintf_r+0x1e6>
 8009948:	0800a0c4 	.word	0x0800a0c4
 800994c:	0800a0ce 	.word	0x0800a0ce
 8009950:	00000000 	.word	0x00000000
 8009954:	08009707 	.word	0x08009707
 8009958:	0800a0ca 	.word	0x0800a0ca

0800995c <_printf_common>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	4616      	mov	r6, r2
 8009962:	4698      	mov	r8, r3
 8009964:	688a      	ldr	r2, [r1, #8]
 8009966:	690b      	ldr	r3, [r1, #16]
 8009968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800996c:	4293      	cmp	r3, r2
 800996e:	bfb8      	it	lt
 8009970:	4613      	movlt	r3, r2
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009978:	4607      	mov	r7, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b10a      	cbz	r2, 8009982 <_printf_common+0x26>
 800997e:	3301      	adds	r3, #1
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	0699      	lsls	r1, r3, #26
 8009986:	bf42      	ittt	mi
 8009988:	6833      	ldrmi	r3, [r6, #0]
 800998a:	3302      	addmi	r3, #2
 800998c:	6033      	strmi	r3, [r6, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	f015 0506 	ands.w	r5, r5, #6
 8009994:	d106      	bne.n	80099a4 <_printf_common+0x48>
 8009996:	f104 0a19 	add.w	sl, r4, #25
 800999a:	68e3      	ldr	r3, [r4, #12]
 800999c:	6832      	ldr	r2, [r6, #0]
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	42ab      	cmp	r3, r5
 80099a2:	dc26      	bgt.n	80099f2 <_printf_common+0x96>
 80099a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	3b00      	subs	r3, #0
 80099ac:	bf18      	it	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	0692      	lsls	r2, r2, #26
 80099b2:	d42b      	bmi.n	8009a0c <_printf_common+0xb0>
 80099b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099b8:	4641      	mov	r1, r8
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c8      	blx	r9
 80099be:	3001      	adds	r0, #1
 80099c0:	d01e      	beq.n	8009a00 <_printf_common+0xa4>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	f003 0306 	and.w	r3, r3, #6
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	bf02      	ittt	eq
 80099ce:	68e5      	ldreq	r5, [r4, #12]
 80099d0:	6833      	ldreq	r3, [r6, #0]
 80099d2:	1aed      	subeq	r5, r5, r3
 80099d4:	68a3      	ldr	r3, [r4, #8]
 80099d6:	bf0c      	ite	eq
 80099d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099dc:	2500      	movne	r5, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	bfc4      	itt	gt
 80099e2:	1a9b      	subgt	r3, r3, r2
 80099e4:	18ed      	addgt	r5, r5, r3
 80099e6:	2600      	movs	r6, #0
 80099e8:	341a      	adds	r4, #26
 80099ea:	42b5      	cmp	r5, r6
 80099ec:	d11a      	bne.n	8009a24 <_printf_common+0xc8>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e008      	b.n	8009a04 <_printf_common+0xa8>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4652      	mov	r2, sl
 80099f6:	4641      	mov	r1, r8
 80099f8:	4638      	mov	r0, r7
 80099fa:	47c8      	blx	r9
 80099fc:	3001      	adds	r0, #1
 80099fe:	d103      	bne.n	8009a08 <_printf_common+0xac>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7c6      	b.n	800999a <_printf_common+0x3e>
 8009a0c:	18e1      	adds	r1, r4, r3
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	2030      	movs	r0, #48	@ 0x30
 8009a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a16:	4422      	add	r2, r4
 8009a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a20:	3302      	adds	r3, #2
 8009a22:	e7c7      	b.n	80099b4 <_printf_common+0x58>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4622      	mov	r2, r4
 8009a28:	4641      	mov	r1, r8
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c8      	blx	r9
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d0e6      	beq.n	8009a00 <_printf_common+0xa4>
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7d9      	b.n	80099ea <_printf_common+0x8e>
	...

08009a38 <_printf_i>:
 8009a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	7e0f      	ldrb	r7, [r1, #24]
 8009a3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a40:	2f78      	cmp	r7, #120	@ 0x78
 8009a42:	4691      	mov	r9, r2
 8009a44:	4680      	mov	r8, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a4e:	d807      	bhi.n	8009a60 <_printf_i+0x28>
 8009a50:	2f62      	cmp	r7, #98	@ 0x62
 8009a52:	d80a      	bhi.n	8009a6a <_printf_i+0x32>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	f000 80d2 	beq.w	8009bfe <_printf_i+0x1c6>
 8009a5a:	2f58      	cmp	r7, #88	@ 0x58
 8009a5c:	f000 80b9 	beq.w	8009bd2 <_printf_i+0x19a>
 8009a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a68:	e03a      	b.n	8009ae0 <_printf_i+0xa8>
 8009a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a6e:	2b15      	cmp	r3, #21
 8009a70:	d8f6      	bhi.n	8009a60 <_printf_i+0x28>
 8009a72:	a101      	add	r1, pc, #4	@ (adr r1, 8009a78 <_printf_i+0x40>)
 8009a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ae5 	.word	0x08009ae5
 8009a80:	08009a61 	.word	0x08009a61
 8009a84:	08009a61 	.word	0x08009a61
 8009a88:	08009a61 	.word	0x08009a61
 8009a8c:	08009a61 	.word	0x08009a61
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a61 	.word	0x08009a61
 8009a98:	08009a61 	.word	0x08009a61
 8009a9c:	08009a61 	.word	0x08009a61
 8009aa0:	08009a61 	.word	0x08009a61
 8009aa4:	08009be5 	.word	0x08009be5
 8009aa8:	08009b0f 	.word	0x08009b0f
 8009aac:	08009b9f 	.word	0x08009b9f
 8009ab0:	08009a61 	.word	0x08009a61
 8009ab4:	08009a61 	.word	0x08009a61
 8009ab8:	08009c07 	.word	0x08009c07
 8009abc:	08009a61 	.word	0x08009a61
 8009ac0:	08009b0f 	.word	0x08009b0f
 8009ac4:	08009a61 	.word	0x08009a61
 8009ac8:	08009a61 	.word	0x08009a61
 8009acc:	08009ba7 	.word	0x08009ba7
 8009ad0:	6833      	ldr	r3, [r6, #0]
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6032      	str	r2, [r6, #0]
 8009ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e09d      	b.n	8009c20 <_printf_i+0x1e8>
 8009ae4:	6833      	ldr	r3, [r6, #0]
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	1d19      	adds	r1, r3, #4
 8009aea:	6031      	str	r1, [r6, #0]
 8009aec:	0606      	lsls	r6, r0, #24
 8009aee:	d501      	bpl.n	8009af4 <_printf_i+0xbc>
 8009af0:	681d      	ldr	r5, [r3, #0]
 8009af2:	e003      	b.n	8009afc <_printf_i+0xc4>
 8009af4:	0645      	lsls	r5, r0, #25
 8009af6:	d5fb      	bpl.n	8009af0 <_printf_i+0xb8>
 8009af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	da03      	bge.n	8009b08 <_printf_i+0xd0>
 8009b00:	232d      	movs	r3, #45	@ 0x2d
 8009b02:	426d      	negs	r5, r5
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b08:	4859      	ldr	r0, [pc, #356]	@ (8009c70 <_printf_i+0x238>)
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	e011      	b.n	8009b32 <_printf_i+0xfa>
 8009b0e:	6821      	ldr	r1, [r4, #0]
 8009b10:	6833      	ldr	r3, [r6, #0]
 8009b12:	0608      	lsls	r0, r1, #24
 8009b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b18:	d402      	bmi.n	8009b20 <_printf_i+0xe8>
 8009b1a:	0649      	lsls	r1, r1, #25
 8009b1c:	bf48      	it	mi
 8009b1e:	b2ad      	uxthmi	r5, r5
 8009b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b22:	4853      	ldr	r0, [pc, #332]	@ (8009c70 <_printf_i+0x238>)
 8009b24:	6033      	str	r3, [r6, #0]
 8009b26:	bf14      	ite	ne
 8009b28:	230a      	movne	r3, #10
 8009b2a:	2308      	moveq	r3, #8
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b32:	6866      	ldr	r6, [r4, #4]
 8009b34:	60a6      	str	r6, [r4, #8]
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	bfa2      	ittt	ge
 8009b3a:	6821      	ldrge	r1, [r4, #0]
 8009b3c:	f021 0104 	bicge.w	r1, r1, #4
 8009b40:	6021      	strge	r1, [r4, #0]
 8009b42:	b90d      	cbnz	r5, 8009b48 <_printf_i+0x110>
 8009b44:	2e00      	cmp	r6, #0
 8009b46:	d04b      	beq.n	8009be0 <_printf_i+0x1a8>
 8009b48:	4616      	mov	r6, r2
 8009b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8009b52:	5dc7      	ldrb	r7, [r0, r7]
 8009b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b58:	462f      	mov	r7, r5
 8009b5a:	42bb      	cmp	r3, r7
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	d9f4      	bls.n	8009b4a <_printf_i+0x112>
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d10b      	bne.n	8009b7c <_printf_i+0x144>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	07df      	lsls	r7, r3, #31
 8009b68:	d508      	bpl.n	8009b7c <_printf_i+0x144>
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	6861      	ldr	r1, [r4, #4]
 8009b6e:	4299      	cmp	r1, r3
 8009b70:	bfde      	ittt	le
 8009b72:	2330      	movle	r3, #48	@ 0x30
 8009b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b7c:	1b92      	subs	r2, r2, r6
 8009b7e:	6122      	str	r2, [r4, #16]
 8009b80:	f8cd a000 	str.w	sl, [sp]
 8009b84:	464b      	mov	r3, r9
 8009b86:	aa03      	add	r2, sp, #12
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	f7ff fee6 	bl	800995c <_printf_common>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d14a      	bne.n	8009c2a <_printf_i+0x1f2>
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	b004      	add	sp, #16
 8009b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	f043 0320 	orr.w	r3, r3, #32
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	4833      	ldr	r0, [pc, #204]	@ (8009c74 <_printf_i+0x23c>)
 8009ba8:	2778      	movs	r7, #120	@ 0x78
 8009baa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	6831      	ldr	r1, [r6, #0]
 8009bb2:	061f      	lsls	r7, r3, #24
 8009bb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bb8:	d402      	bmi.n	8009bc0 <_printf_i+0x188>
 8009bba:	065f      	lsls	r7, r3, #25
 8009bbc:	bf48      	it	mi
 8009bbe:	b2ad      	uxthmi	r5, r5
 8009bc0:	6031      	str	r1, [r6, #0]
 8009bc2:	07d9      	lsls	r1, r3, #31
 8009bc4:	bf44      	itt	mi
 8009bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bca:	6023      	strmi	r3, [r4, #0]
 8009bcc:	b11d      	cbz	r5, 8009bd6 <_printf_i+0x19e>
 8009bce:	2310      	movs	r3, #16
 8009bd0:	e7ac      	b.n	8009b2c <_printf_i+0xf4>
 8009bd2:	4827      	ldr	r0, [pc, #156]	@ (8009c70 <_printf_i+0x238>)
 8009bd4:	e7e9      	b.n	8009baa <_printf_i+0x172>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	f023 0320 	bic.w	r3, r3, #32
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	e7f6      	b.n	8009bce <_printf_i+0x196>
 8009be0:	4616      	mov	r6, r2
 8009be2:	e7bd      	b.n	8009b60 <_printf_i+0x128>
 8009be4:	6833      	ldr	r3, [r6, #0]
 8009be6:	6825      	ldr	r5, [r4, #0]
 8009be8:	6961      	ldr	r1, [r4, #20]
 8009bea:	1d18      	adds	r0, r3, #4
 8009bec:	6030      	str	r0, [r6, #0]
 8009bee:	062e      	lsls	r6, r5, #24
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_i+0x1c0>
 8009bf4:	6019      	str	r1, [r3, #0]
 8009bf6:	e002      	b.n	8009bfe <_printf_i+0x1c6>
 8009bf8:	0668      	lsls	r0, r5, #25
 8009bfa:	d5fb      	bpl.n	8009bf4 <_printf_i+0x1bc>
 8009bfc:	8019      	strh	r1, [r3, #0]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	4616      	mov	r6, r2
 8009c04:	e7bc      	b.n	8009b80 <_printf_i+0x148>
 8009c06:	6833      	ldr	r3, [r6, #0]
 8009c08:	1d1a      	adds	r2, r3, #4
 8009c0a:	6032      	str	r2, [r6, #0]
 8009c0c:	681e      	ldr	r6, [r3, #0]
 8009c0e:	6862      	ldr	r2, [r4, #4]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7f6 fb64 	bl	80002e0 <memchr>
 8009c18:	b108      	cbz	r0, 8009c1e <_printf_i+0x1e6>
 8009c1a:	1b80      	subs	r0, r0, r6
 8009c1c:	6060      	str	r0, [r4, #4]
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	6123      	str	r3, [r4, #16]
 8009c22:	2300      	movs	r3, #0
 8009c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c28:	e7aa      	b.n	8009b80 <_printf_i+0x148>
 8009c2a:	6923      	ldr	r3, [r4, #16]
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	4649      	mov	r1, r9
 8009c30:	4640      	mov	r0, r8
 8009c32:	47d0      	blx	sl
 8009c34:	3001      	adds	r0, #1
 8009c36:	d0ad      	beq.n	8009b94 <_printf_i+0x15c>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	079b      	lsls	r3, r3, #30
 8009c3c:	d413      	bmi.n	8009c66 <_printf_i+0x22e>
 8009c3e:	68e0      	ldr	r0, [r4, #12]
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	4298      	cmp	r0, r3
 8009c44:	bfb8      	it	lt
 8009c46:	4618      	movlt	r0, r3
 8009c48:	e7a6      	b.n	8009b98 <_printf_i+0x160>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	4649      	mov	r1, r9
 8009c50:	4640      	mov	r0, r8
 8009c52:	47d0      	blx	sl
 8009c54:	3001      	adds	r0, #1
 8009c56:	d09d      	beq.n	8009b94 <_printf_i+0x15c>
 8009c58:	3501      	adds	r5, #1
 8009c5a:	68e3      	ldr	r3, [r4, #12]
 8009c5c:	9903      	ldr	r1, [sp, #12]
 8009c5e:	1a5b      	subs	r3, r3, r1
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	dcf2      	bgt.n	8009c4a <_printf_i+0x212>
 8009c64:	e7eb      	b.n	8009c3e <_printf_i+0x206>
 8009c66:	2500      	movs	r5, #0
 8009c68:	f104 0619 	add.w	r6, r4, #25
 8009c6c:	e7f5      	b.n	8009c5a <_printf_i+0x222>
 8009c6e:	bf00      	nop
 8009c70:	0800a0d5 	.word	0x0800a0d5
 8009c74:	0800a0e6 	.word	0x0800a0e6

08009c78 <__sflush_r>:
 8009c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	0716      	lsls	r6, r2, #28
 8009c82:	4605      	mov	r5, r0
 8009c84:	460c      	mov	r4, r1
 8009c86:	d454      	bmi.n	8009d32 <__sflush_r+0xba>
 8009c88:	684b      	ldr	r3, [r1, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	dc02      	bgt.n	8009c94 <__sflush_r+0x1c>
 8009c8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd48      	ble.n	8009d26 <__sflush_r+0xae>
 8009c94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c96:	2e00      	cmp	r6, #0
 8009c98:	d045      	beq.n	8009d26 <__sflush_r+0xae>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ca0:	682f      	ldr	r7, [r5, #0]
 8009ca2:	6a21      	ldr	r1, [r4, #32]
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	d030      	beq.n	8009d0a <__sflush_r+0x92>
 8009ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	0759      	lsls	r1, r3, #29
 8009cae:	d505      	bpl.n	8009cbc <__sflush_r+0x44>
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cb6:	b10b      	cbz	r3, 8009cbc <__sflush_r+0x44>
 8009cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cba:	1ad2      	subs	r2, r2, r3
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cc0:	6a21      	ldr	r1, [r4, #32]
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b0      	blx	r6
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	d106      	bne.n	8009cda <__sflush_r+0x62>
 8009ccc:	6829      	ldr	r1, [r5, #0]
 8009cce:	291d      	cmp	r1, #29
 8009cd0:	d82b      	bhi.n	8009d2a <__sflush_r+0xb2>
 8009cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8009d7c <__sflush_r+0x104>)
 8009cd4:	410a      	asrs	r2, r1
 8009cd6:	07d6      	lsls	r6, r2, #31
 8009cd8:	d427      	bmi.n	8009d2a <__sflush_r+0xb2>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	6062      	str	r2, [r4, #4]
 8009cde:	04d9      	lsls	r1, r3, #19
 8009ce0:	6922      	ldr	r2, [r4, #16]
 8009ce2:	6022      	str	r2, [r4, #0]
 8009ce4:	d504      	bpl.n	8009cf0 <__sflush_r+0x78>
 8009ce6:	1c42      	adds	r2, r0, #1
 8009ce8:	d101      	bne.n	8009cee <__sflush_r+0x76>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	b903      	cbnz	r3, 8009cf0 <__sflush_r+0x78>
 8009cee:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cf2:	602f      	str	r7, [r5, #0]
 8009cf4:	b1b9      	cbz	r1, 8009d26 <__sflush_r+0xae>
 8009cf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d002      	beq.n	8009d04 <__sflush_r+0x8c>
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f7ff fbf2 	bl	80094e8 <_free_r>
 8009d04:	2300      	movs	r3, #0
 8009d06:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d08:	e00d      	b.n	8009d26 <__sflush_r+0xae>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b0      	blx	r6
 8009d10:	4602      	mov	r2, r0
 8009d12:	1c50      	adds	r0, r2, #1
 8009d14:	d1c9      	bne.n	8009caa <__sflush_r+0x32>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0c6      	beq.n	8009caa <__sflush_r+0x32>
 8009d1c:	2b1d      	cmp	r3, #29
 8009d1e:	d001      	beq.n	8009d24 <__sflush_r+0xac>
 8009d20:	2b16      	cmp	r3, #22
 8009d22:	d11e      	bne.n	8009d62 <__sflush_r+0xea>
 8009d24:	602f      	str	r7, [r5, #0]
 8009d26:	2000      	movs	r0, #0
 8009d28:	e022      	b.n	8009d70 <__sflush_r+0xf8>
 8009d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d2e:	b21b      	sxth	r3, r3
 8009d30:	e01b      	b.n	8009d6a <__sflush_r+0xf2>
 8009d32:	690f      	ldr	r7, [r1, #16]
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	d0f6      	beq.n	8009d26 <__sflush_r+0xae>
 8009d38:	0793      	lsls	r3, r2, #30
 8009d3a:	680e      	ldr	r6, [r1, #0]
 8009d3c:	bf08      	it	eq
 8009d3e:	694b      	ldreq	r3, [r1, #20]
 8009d40:	600f      	str	r7, [r1, #0]
 8009d42:	bf18      	it	ne
 8009d44:	2300      	movne	r3, #0
 8009d46:	eba6 0807 	sub.w	r8, r6, r7
 8009d4a:	608b      	str	r3, [r1, #8]
 8009d4c:	f1b8 0f00 	cmp.w	r8, #0
 8009d50:	dde9      	ble.n	8009d26 <__sflush_r+0xae>
 8009d52:	6a21      	ldr	r1, [r4, #32]
 8009d54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d56:	4643      	mov	r3, r8
 8009d58:	463a      	mov	r2, r7
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b0      	blx	r6
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	dc08      	bgt.n	8009d74 <__sflush_r+0xfc>
 8009d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	4407      	add	r7, r0
 8009d76:	eba8 0800 	sub.w	r8, r8, r0
 8009d7a:	e7e7      	b.n	8009d4c <__sflush_r+0xd4>
 8009d7c:	dfbffffe 	.word	0xdfbffffe

08009d80 <_fflush_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	690b      	ldr	r3, [r1, #16]
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	b913      	cbnz	r3, 8009d90 <_fflush_r+0x10>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	b118      	cbz	r0, 8009d9a <_fflush_r+0x1a>
 8009d92:	6a03      	ldr	r3, [r0, #32]
 8009d94:	b90b      	cbnz	r3, 8009d9a <_fflush_r+0x1a>
 8009d96:	f7ff fa9f 	bl	80092d8 <__sinit>
 8009d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0f3      	beq.n	8009d8a <_fflush_r+0xa>
 8009da2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009da4:	07d0      	lsls	r0, r2, #31
 8009da6:	d404      	bmi.n	8009db2 <_fflush_r+0x32>
 8009da8:	0599      	lsls	r1, r3, #22
 8009daa:	d402      	bmi.n	8009db2 <_fflush_r+0x32>
 8009dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dae:	f7ff fb98 	bl	80094e2 <__retarget_lock_acquire_recursive>
 8009db2:	4628      	mov	r0, r5
 8009db4:	4621      	mov	r1, r4
 8009db6:	f7ff ff5f 	bl	8009c78 <__sflush_r>
 8009dba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	d4e4      	bmi.n	8009d8c <_fflush_r+0xc>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	059b      	lsls	r3, r3, #22
 8009dc6:	d4e1      	bmi.n	8009d8c <_fflush_r+0xc>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dca:	f7ff fb8b 	bl	80094e4 <__retarget_lock_release_recursive>
 8009dce:	e7dd      	b.n	8009d8c <_fflush_r+0xc>

08009dd0 <__swbuf_r>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	460e      	mov	r6, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	b118      	cbz	r0, 8009de2 <__swbuf_r+0x12>
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	b90b      	cbnz	r3, 8009de2 <__swbuf_r+0x12>
 8009dde:	f7ff fa7b 	bl	80092d8 <__sinit>
 8009de2:	69a3      	ldr	r3, [r4, #24]
 8009de4:	60a3      	str	r3, [r4, #8]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	071a      	lsls	r2, r3, #28
 8009dea:	d501      	bpl.n	8009df0 <__swbuf_r+0x20>
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	b943      	cbnz	r3, 8009e02 <__swbuf_r+0x32>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f000 f82a 	bl	8009e4c <__swsetup_r>
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x32>
 8009dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8009dfe:	4638      	mov	r0, r7
 8009e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6922      	ldr	r2, [r4, #16]
 8009e06:	1a98      	subs	r0, r3, r2
 8009e08:	6963      	ldr	r3, [r4, #20]
 8009e0a:	b2f6      	uxtb	r6, r6
 8009e0c:	4283      	cmp	r3, r0
 8009e0e:	4637      	mov	r7, r6
 8009e10:	dc05      	bgt.n	8009e1e <__swbuf_r+0x4e>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	f7ff ffb3 	bl	8009d80 <_fflush_r>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1ed      	bne.n	8009dfa <__swbuf_r+0x2a>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	701e      	strb	r6, [r3, #0]
 8009e2c:	6962      	ldr	r2, [r4, #20]
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d004      	beq.n	8009e3e <__swbuf_r+0x6e>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	07db      	lsls	r3, r3, #31
 8009e38:	d5e1      	bpl.n	8009dfe <__swbuf_r+0x2e>
 8009e3a:	2e0a      	cmp	r6, #10
 8009e3c:	d1df      	bne.n	8009dfe <__swbuf_r+0x2e>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f7ff ff9d 	bl	8009d80 <_fflush_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0d9      	beq.n	8009dfe <__swbuf_r+0x2e>
 8009e4a:	e7d6      	b.n	8009dfa <__swbuf_r+0x2a>

08009e4c <__swsetup_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4b29      	ldr	r3, [pc, #164]	@ (8009ef4 <__swsetup_r+0xa8>)
 8009e50:	4605      	mov	r5, r0
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	460c      	mov	r4, r1
 8009e56:	b118      	cbz	r0, 8009e60 <__swsetup_r+0x14>
 8009e58:	6a03      	ldr	r3, [r0, #32]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <__swsetup_r+0x14>
 8009e5c:	f7ff fa3c 	bl	80092d8 <__sinit>
 8009e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e64:	0719      	lsls	r1, r3, #28
 8009e66:	d422      	bmi.n	8009eae <__swsetup_r+0x62>
 8009e68:	06da      	lsls	r2, r3, #27
 8009e6a:	d407      	bmi.n	8009e7c <__swsetup_r+0x30>
 8009e6c:	2209      	movs	r2, #9
 8009e6e:	602a      	str	r2, [r5, #0]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7a:	e033      	b.n	8009ee4 <__swsetup_r+0x98>
 8009e7c:	0758      	lsls	r0, r3, #29
 8009e7e:	d512      	bpl.n	8009ea6 <__swsetup_r+0x5a>
 8009e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e82:	b141      	cbz	r1, 8009e96 <__swsetup_r+0x4a>
 8009e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	d002      	beq.n	8009e92 <__swsetup_r+0x46>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f7ff fb2b 	bl	80094e8 <_free_r>
 8009e92:	2300      	movs	r3, #0
 8009e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e9c:	81a3      	strh	r3, [r4, #12]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f043 0308 	orr.w	r3, r3, #8
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <__swsetup_r+0x7a>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ebc:	d003      	beq.n	8009ec6 <__swsetup_r+0x7a>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f84f 	bl	8009f64 <__smakebuf_r>
 8009ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eca:	f013 0201 	ands.w	r2, r3, #1
 8009ece:	d00a      	beq.n	8009ee6 <__swsetup_r+0x9a>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	60a2      	str	r2, [r4, #8]
 8009ed4:	6962      	ldr	r2, [r4, #20]
 8009ed6:	4252      	negs	r2, r2
 8009ed8:	61a2      	str	r2, [r4, #24]
 8009eda:	6922      	ldr	r2, [r4, #16]
 8009edc:	b942      	cbnz	r2, 8009ef0 <__swsetup_r+0xa4>
 8009ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ee2:	d1c5      	bne.n	8009e70 <__swsetup_r+0x24>
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	0799      	lsls	r1, r3, #30
 8009ee8:	bf58      	it	pl
 8009eea:	6962      	ldrpl	r2, [r4, #20]
 8009eec:	60a2      	str	r2, [r4, #8]
 8009eee:	e7f4      	b.n	8009eda <__swsetup_r+0x8e>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e7f7      	b.n	8009ee4 <__swsetup_r+0x98>
 8009ef4:	2400001c 	.word	0x2400001c

08009ef8 <_sbrk_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4d06      	ldr	r5, [pc, #24]	@ (8009f14 <_sbrk_r+0x1c>)
 8009efc:	2300      	movs	r3, #0
 8009efe:	4604      	mov	r4, r0
 8009f00:	4608      	mov	r0, r1
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	f7f7 fa3e 	bl	8001384 <_sbrk>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_sbrk_r+0x1a>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_sbrk_r+0x1a>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	24000354 	.word	0x24000354

08009f18 <__swhatbuf_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	b096      	sub	sp, #88	@ 0x58
 8009f24:	4615      	mov	r5, r2
 8009f26:	461e      	mov	r6, r3
 8009f28:	da0d      	bge.n	8009f46 <__swhatbuf_r+0x2e>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f30:	f04f 0100 	mov.w	r1, #0
 8009f34:	bf14      	ite	ne
 8009f36:	2340      	movne	r3, #64	@ 0x40
 8009f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	6031      	str	r1, [r6, #0]
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	b016      	add	sp, #88	@ 0x58
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	466a      	mov	r2, sp
 8009f48:	f000 f848 	bl	8009fdc <_fstat_r>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	dbec      	blt.n	8009f2a <__swhatbuf_r+0x12>
 8009f50:	9901      	ldr	r1, [sp, #4]
 8009f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f5a:	4259      	negs	r1, r3
 8009f5c:	4159      	adcs	r1, r3
 8009f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f62:	e7eb      	b.n	8009f3c <__swhatbuf_r+0x24>

08009f64 <__smakebuf_r>:
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f68:	079d      	lsls	r5, r3, #30
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	d507      	bpl.n	8009f80 <__smakebuf_r+0x1c>
 8009f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	6163      	str	r3, [r4, #20]
 8009f7c:	b003      	add	sp, #12
 8009f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f80:	ab01      	add	r3, sp, #4
 8009f82:	466a      	mov	r2, sp
 8009f84:	f7ff ffc8 	bl	8009f18 <__swhatbuf_r>
 8009f88:	9f00      	ldr	r7, [sp, #0]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff fb16 	bl	80095c0 <_malloc_r>
 8009f94:	b948      	cbnz	r0, 8009faa <__smakebuf_r+0x46>
 8009f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9a:	059a      	lsls	r2, r3, #22
 8009f9c:	d4ee      	bmi.n	8009f7c <__smakebuf_r+0x18>
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	f043 0302 	orr.w	r3, r3, #2
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	e7e2      	b.n	8009f70 <__smakebuf_r+0xc>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	6020      	str	r0, [r4, #0]
 8009fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fba:	b15b      	cbz	r3, 8009fd4 <__smakebuf_r+0x70>
 8009fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f81d 	bl	800a000 <_isatty_r>
 8009fc6:	b128      	cbz	r0, 8009fd4 <__smakebuf_r+0x70>
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	431d      	orrs	r5, r3
 8009fd8:	81a5      	strh	r5, [r4, #12]
 8009fda:	e7cf      	b.n	8009f7c <__smakebuf_r+0x18>

08009fdc <_fstat_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d07      	ldr	r5, [pc, #28]	@ (8009ffc <_fstat_r+0x20>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	f7f7 f9a2 	bl	8001332 <_fstat>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d102      	bne.n	8009ff8 <_fstat_r+0x1c>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	b103      	cbz	r3, 8009ff8 <_fstat_r+0x1c>
 8009ff6:	6023      	str	r3, [r4, #0]
 8009ff8:	bd38      	pop	{r3, r4, r5, pc}
 8009ffa:	bf00      	nop
 8009ffc:	24000354 	.word	0x24000354

0800a000 <_isatty_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d06      	ldr	r5, [pc, #24]	@ (800a01c <_isatty_r+0x1c>)
 800a004:	2300      	movs	r3, #0
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f7 f9a1 	bl	8001352 <_isatty>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_isatty_r+0x1a>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_isatty_r+0x1a>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	24000354 	.word	0x24000354

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
